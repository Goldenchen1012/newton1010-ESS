; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_drv_bq796xx.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_drv_bq796xx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\SMP\smp_drv_bq796xx.c]
                          THUMB

                          AREA ||i.Func_Cal_ModbusCRC16||, CODE, READONLY, ALIGN=1

                  Func_Cal_ModbusCRC16 PROC
;;;201    //Remove this CRC function to Uliti
;;;202    uint16_t Func_Cal_ModbusCRC16(uint8_t *data, uint8_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;203    {
000002  4603              MOV      r3,r0
;;;204      uint8_t  j;
;;;205      uint16_t crc = 0xFFFF;
000004  f64f70ff          MOV      r0,#0xffff
;;;206    
;;;207      while(len--){
;;;208            crc ^= ((*data)&0xFF);
;;;209            data++;
;;;210            for(j=0;j<8;j++){
;;;211                if(crc & 0x01){ /* LSB(b0)=1 */
;;;212                    crc = (crc>>1) ^ 0xA001;
000008  f24a0401          MOV      r4,#0xa001
00000c  e00d              B        |L1.42|
                  |L1.14|
00000e  f8132b01          LDRB     r2,[r3],#1            ;208
000012  4050              EORS     r0,r0,r2              ;208
000014  2200              MOVS     r2,#0                 ;210
                  |L1.22|
000016  07c5              LSLS     r5,r0,#31             ;211
000018  d002              BEQ      |L1.32|
00001a  ea840050          EOR      r0,r4,r0,LSR #1
00001e  e000              B        |L1.34|
                  |L1.32|
;;;213                }else{
;;;214                    crc = crc >>1;
000020  0840              LSRS     r0,r0,#1
                  |L1.34|
000022  1c52              ADDS     r2,r2,#1              ;210
000024  b2d2              UXTB     r2,r2                 ;210
000026  2a08              CMP      r2,#8                 ;210
000028  d3f5              BCC      |L1.22|
                  |L1.42|
00002a  1e49              SUBS     r1,r1,#1              ;207
00002c  b2c9              UXTB     r1,r1                 ;207
00002e  d2ee              BCS      |L1.14|
;;;215                }    
;;;216            }
;;;217      }
;;;218      return crc;  // this is correct for Modbus
;;;219    
;;;220    } 
000030  bd30              POP      {r4,r5,pc}
;;;221    
                          ENDP


                          AREA ||i.Word2u8||, CODE, READONLY, ALIGN=1

                  Word2u8 PROC
;;;190    
;;;191    uint8_t Word2u8(uint16_t word_data, uint8_t type){
000000  2900              CMP      r1,#0
000002  d001              BEQ      |L2.8|
;;;192        uint8_t data;
;;;193        if ( type == HIGH_BYTE){
;;;194            data = (uint8_t)((word_data&0xFF00)>>8);
;;;195        }else{
;;;196            data = (uint8_t)(word_data&0xFF);
000004  b2c0              UXTB     r0,r0
;;;197        }
;;;198        return data;
;;;199    }
000006  4770              BX       lr
                  |L2.8|
000008  0a00              LSRS     r0,r0,#8              ;194
00000a  4770              BX       lr
;;;200    
                          ENDP


                          AREA ||i.bq796xx_event_RegisteCB||, CODE, READONLY, ALIGN=2

                  bq796xx_event_RegisteCB PROC
;;;1053   
;;;1054   int8_t bq796xx_event_RegisteCB(bq796xx_CB_Fun_t callbackfunc){
000000  2800              CMP      r0,#0
000002  d003              BEQ      |L3.12|
;;;1055   
;;;1056       if(callbackfunc==NULL){
;;;1057           return(SMP_ERROR_NULL);
;;;1058   		}   
;;;1059   		
;;;1060       bq796xx_event_cb = callbackfunc;
000004  4903              LDR      r1,|L3.20|
000006  64c8              STR      r0,[r1,#0x4c]  ; bq796xx_event_cb
;;;1061   	
;;;1062       return(SMP_SUCCESS);	
000008  2000              MOVS     r0,#0
;;;1063   }
00000a  4770              BX       lr
                  |L3.12|
00000c  f06f000a          MVN      r0,#0xa               ;1057
000010  4770              BX       lr
;;;1064   
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      ||.data||

                          AREA ||i.bq796xx_event_UnregisteCB||, CODE, READONLY, ALIGN=2

                  bq796xx_event_UnregisteCB PROC
;;;1064   
;;;1065   int8_t bq796xx_event_UnregisteCB(void){
000000  4901              LDR      r1,|L4.8|
;;;1066       bq796xx_event_cb = NULL;
000002  2000              MOVS     r0,#0
000004  64c8              STR      r0,[r1,#0x4c]  ; bq796xx_event_cb
;;;1067       
;;;1068   	  if(bq796xx_event_cb==NULL){
;;;1069           return(SMP_SUCCESS);	
;;;1070   		}else{
;;;1071           return(SMP_ERROR_NOT_SUPPORTED);		
;;;1072   		}
;;;1073   }
000006  4770              BX       lr
;;;1074   
                          ENDP

                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_CellBalance_1to8_clear||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_CellBalance_1to8_clear PROC
;;;1712   
;;;1713   uint8_t drv_bq796xx_CellBalance_1to8_clear(bq796xx_AFE_GPIO_stack is_stack, uint8_t dev_id, uint32_t delays){
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1714     static uint8_t    d_payload[8] = {0};  
;;;1715   
;;;1716   	if(bq796xx_data.comm_dir == DIR_SOUTH){
00000a  4819              LDR      r0,|L5.112|
00000c  f8900d8b          LDRB     r0,[r0,#0xd8b]  ; bq796xx_data
000010  2801              CMP      r0,#1
000012  d104              BNE      |L5.30|
;;;1717   	    dev_id = (bq796xx_default.bmu_total_num+1) - dev_id;
000014  4817              LDR      r0,|L5.116|
000016  7a80              LDRB     r0,[r0,#0xa]  ; bq796xx_default
000018  1b40              SUBS     r0,r0,r5
00001a  1c40              ADDS     r0,r0,#1
00001c  b2c5              UXTB     r5,r0
                  |L5.30|
;;;1718   	}	
;;;1719   	
;;;1720   	fill_data4_payload(d_payload, 0,0,0,0);
00001e  2400              MOVS     r4,#0
000020  4814              LDR      r0,|L5.116|
000022  4623              MOV      r3,r4
000024  4622              MOV      r2,r4
000026  4621              MOV      r1,r4
000028  3810              SUBS     r0,r0,#0x10
00002a  9400              STR      r4,[sp,#0]
00002c  f7fffffe          BL       fill_data4_payload
;;;1721   	fill_data4_payload(&d_payload[4], 0,0,0,0);
000030  9400              STR      r4,[sp,#0]
000032  4c10              LDR      r4,|L5.116|
000034  2300              MOVS     r3,#0
000036  3c10              SUBS     r4,r4,#0x10
000038  461a              MOV      r2,r3
00003a  4619              MOV      r1,r3
00003c  1d20              ADDS     r0,r4,#4
00003e  f7fffffe          BL       fill_data4_payload
;;;1722   	
;;;1723   	if(is_stack == STACK)
;;;1724         drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_CB_CELL08_CTRL, 8, d_payload, delays);
000042  f44f7248          MOV      r2,#0x320
000046  2f01              CMP      r7,#1                 ;1723
000048  d009              BEQ      |L5.94|
;;;1725     else
;;;1726   		  drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ796XX_CB_CELL08_CTRL, 8, d_payload, delays);
00004a  e9cd4600          STRD     r4,r6,[sp,#0]
00004e  2308              MOVS     r3,#8
000050  4629              MOV      r1,r5
000052  2090              MOVS     r0,#0x90
000054  f7fffffe          BL       drv_bq796xx_command_framing
                  |L5.88|
;;;1727   	
;;;1728   	return 0;
000058  2000              MOVS     r0,#0
;;;1729   }
00005a  e8bd81fc          POP      {r2-r8,pc}
                  |L5.94|
00005e  e9cd4600          STRD     r4,r6,[sp,#0]         ;1724
000062  2308              MOVS     r3,#8                 ;1724
000064  2100              MOVS     r1,#0                 ;1724
000066  20b0              MOVS     r0,#0xb0              ;1724
000068  f7fffffe          BL       drv_bq796xx_command_framing
00006c  e7f4              B        |L5.88|
;;;1730   
                          ENDP

00006e  0000              DCW      0x0000
                  |L5.112|
                          DCD      ||area_number.59||+0x86
                  |L5.116|
                          DCD      ||.data||+0x80

                          AREA ||i.drv_bq796xx_CellBalance_1to8_set||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_CellBalance_1to8_set PROC
;;;1666   
;;;1667   uint8_t drv_bq796xx_CellBalance_1to8_set(uint8_t bmu_id, uint8_t cell_d_en, bq796xx_cellbalance_time cb_time, uint32_t delays){
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1668   	  uint8_t i;
;;;1669       static uint8_t mask_en;
;;;1670       static uint8_t payload_temp[8] = {0};
;;;1671   
;;;1672   	  if(bq796xx_data.comm_dir == DIR_SOUTH){
000004  4c17              LDR      r4,|L6.100|
000006  f8944d8b          LDRB     r4,[r4,#0xd8b]  ; bq796xx_data
00000a  2c01              CMP      r4,#1
00000c  d104              BNE      |L6.24|
;;;1673   	    bmu_id = (bq796xx_default.bmu_total_num+1) - bmu_id;
00000e  4c16              LDR      r4,|L6.104|
000010  7aa4              LDRB     r4,[r4,#0xa]  ; bq796xx_default
000012  1a20              SUBS     r0,r4,r0
000014  1c40              ADDS     r0,r0,#1
000016  b2c0              UXTB     r0,r0
                  |L6.24|
;;;1674   	  } 		
;;;1675   		
;;;1676   		for(i=0; i<8; i++){
000018  2400              MOVS     r4,#0
;;;1677   			  mask_en = (cell_d_en &(0x01 << i));
00001a  4e13              LDR      r6,|L6.104|
00001c  f04f0801          MOV      r8,#1                 ;1672
000020  3e80              SUBS     r6,r6,#0x80
000022  46a4              MOV      r12,r4
;;;1678   		    if(mask_en == 0x00){
;;;1679   				    payload_temp[7-i] = 0;
000024  f1060760          ADD      r7,r6,#0x60
                  |L6.40|
000028  fa08f504          LSL      r5,r8,r4              ;1677
00002c  400d              ANDS     r5,r5,r1              ;1677
00002e  74f5              STRB     r5,[r6,#0x13]         ;1677
000030  b195              CBZ      r5,|L6.88|
;;;1680   				}else{
;;;1681   				    payload_temp[7-i] = cb_time;
000032  f1c40507          RSB      r5,r4,#7
000036  557a              STRB     r2,[r7,r5]
                  |L6.56|
000038  1c64              ADDS     r4,r4,#1              ;1676
00003a  b2e4              UXTB     r4,r4                 ;1676
00003c  2c08              CMP      r4,#8                 ;1676
00003e  d3f3              BCC      |L6.40|
;;;1682   				}
;;;1683   		}
;;;1684   		
;;;1685   	  drv_bq796xx_command_framing(SINGLE_WRITE, bmu_id, BQ796XX_CB_CELL08_CTRL, 8, payload_temp, delays);
000040  e9cd7300          STRD     r7,r3,[sp,#0]
000044  4601              MOV      r1,r0
000046  2308              MOVS     r3,#8
000048  f44f7248          MOV      r2,#0x320
00004c  2090              MOVS     r0,#0x90
00004e  f7fffffe          BL       drv_bq796xx_command_framing
;;;1686   	
;;;1687       return 0;
000052  2000              MOVS     r0,#0
;;;1688   }
000054  e8bd81fc          POP      {r2-r8,pc}
                  |L6.88|
000058  f1c40507          RSB      r5,r4,#7              ;1679
00005c  f807c005          STRB     r12,[r7,r5]           ;1679
000060  e7ea              B        |L6.56|
;;;1689   
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
                          DCD      ||area_number.59||+0x86
                  |L6.104|
                          DCD      ||.data||+0x80

                          AREA ||i.drv_bq796xx_CellBalance_9to16_clear||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_CellBalance_9to16_clear PROC
;;;1730   
;;;1731   uint8_t drv_bq796xx_CellBalance_9to16_clear(bq796xx_AFE_GPIO_stack is_stack, uint8_t dev_id, uint32_t delays){
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1732     static uint8_t    d_payload[8] = {0};  
;;;1733   
;;;1734   	if(bq796xx_data.comm_dir == DIR_SOUTH){
00000a  4819              LDR      r0,|L7.112|
00000c  f8900d8b          LDRB     r0,[r0,#0xd8b]  ; bq796xx_data
000010  2801              CMP      r0,#1
000012  d104              BNE      |L7.30|
;;;1735   	    dev_id = (bq796xx_default.bmu_total_num+1) - dev_id;
000014  4817              LDR      r0,|L7.116|
000016  7a80              LDRB     r0,[r0,#0xa]  ; bq796xx_default
000018  1b40              SUBS     r0,r0,r5
00001a  1c40              ADDS     r0,r0,#1
00001c  b2c5              UXTB     r5,r0
                  |L7.30|
;;;1736   	}	
;;;1737   	
;;;1738   	fill_data4_payload(d_payload, 0,0,0,0);
00001e  2400              MOVS     r4,#0
000020  4814              LDR      r0,|L7.116|
000022  4623              MOV      r3,r4
000024  4622              MOV      r2,r4
000026  4621              MOV      r1,r4
000028  3808              SUBS     r0,r0,#8
00002a  9400              STR      r4,[sp,#0]
00002c  f7fffffe          BL       fill_data4_payload
;;;1739   	fill_data4_payload(&d_payload[4], 0,0,0,0);
000030  9400              STR      r4,[sp,#0]
000032  4c10              LDR      r4,|L7.116|
000034  2300              MOVS     r3,#0
000036  3c08              SUBS     r4,r4,#8
000038  461a              MOV      r2,r3
00003a  4619              MOV      r1,r3
00003c  1d20              ADDS     r0,r4,#4
00003e  f7fffffe          BL       fill_data4_payload
;;;1740     
;;;1741   	if(is_stack == STACK)
;;;1742         drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_CB_CELL16_CTRL, 8, d_payload, delays);
000042  f44f7246          MOV      r2,#0x318
000046  2f01              CMP      r7,#1                 ;1741
000048  d009              BEQ      |L7.94|
;;;1743     else
;;;1744   		  drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ796XX_CB_CELL16_CTRL, 8, d_payload, delays);
00004a  e9cd4600          STRD     r4,r6,[sp,#0]
00004e  2308              MOVS     r3,#8
000050  4629              MOV      r1,r5
000052  2090              MOVS     r0,#0x90
000054  f7fffffe          BL       drv_bq796xx_command_framing
                  |L7.88|
;;;1745     
;;;1746   	return 0;
000058  2000              MOVS     r0,#0
;;;1747   }
00005a  e8bd81fc          POP      {r2-r8,pc}
                  |L7.94|
00005e  e9cd4600          STRD     r4,r6,[sp,#0]         ;1742
000062  2308              MOVS     r3,#8                 ;1742
000064  2100              MOVS     r1,#0                 ;1742
000066  20b0              MOVS     r0,#0xb0              ;1742
000068  f7fffffe          BL       drv_bq796xx_command_framing
00006c  e7f4              B        |L7.88|
;;;1748   
                          ENDP

00006e  0000              DCW      0x0000
                  |L7.112|
                          DCD      ||area_number.59||+0x86
                  |L7.116|
                          DCD      ||.data||+0x80

                          AREA ||i.drv_bq796xx_CellBalance_9to16_set||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_CellBalance_9to16_set PROC
;;;1689   
;;;1690   uint8_t drv_bq796xx_CellBalance_9to16_set(uint8_t bmu_id, uint8_t cell_d_en, bq796xx_cellbalance_time cb_time, uint32_t delays){
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;1691   	  uint8_t i;
;;;1692       static uint8_t mask_en;
;;;1693       static uint8_t payload_temp[8] = {0};
;;;1694   
;;;1695   	  if(bq796xx_data.comm_dir == DIR_SOUTH){
000004  4c17              LDR      r4,|L8.100|
000006  f8944d8b          LDRB     r4,[r4,#0xd8b]  ; bq796xx_data
00000a  2c01              CMP      r4,#1
00000c  d104              BNE      |L8.24|
;;;1696   	    bmu_id = (bq796xx_default.bmu_total_num+1) - bmu_id;
00000e  4c16              LDR      r4,|L8.104|
000010  7aa4              LDRB     r4,[r4,#0xa]  ; bq796xx_default
000012  1a20              SUBS     r0,r4,r0
000014  1c40              ADDS     r0,r0,#1
000016  b2c0              UXTB     r0,r0
                  |L8.24|
;;;1697   	  }		
;;;1698   		
;;;1699   		for(i=0; i<8; i++){
000018  2400              MOVS     r4,#0
;;;1700   			  mask_en = (cell_d_en &(0x01 << i));
00001a  4e13              LDR      r6,|L8.104|
00001c  f04f0801          MOV      r8,#1                 ;1695
000020  3e80              SUBS     r6,r6,#0x80
000022  46a4              MOV      r12,r4
;;;1701   		    if(mask_en == 0x00){
;;;1702   				    payload_temp[7-i] = 0;
000024  f1060768          ADD      r7,r6,#0x68
                  |L8.40|
000028  fa08f504          LSL      r5,r8,r4              ;1700
00002c  400d              ANDS     r5,r5,r1              ;1700
00002e  7535              STRB     r5,[r6,#0x14]         ;1700
000030  b195              CBZ      r5,|L8.88|
;;;1703   				}else{
;;;1704   				    payload_temp[7-i] = cb_time;
000032  f1c40507          RSB      r5,r4,#7
000036  557a              STRB     r2,[r7,r5]
                  |L8.56|
000038  1c64              ADDS     r4,r4,#1              ;1699
00003a  b2e4              UXTB     r4,r4                 ;1699
00003c  2c08              CMP      r4,#8                 ;1699
00003e  d3f3              BCC      |L8.40|
;;;1705   				}
;;;1706   		}
;;;1707   		
;;;1708   	  drv_bq796xx_command_framing(SINGLE_WRITE, bmu_id, BQ796XX_CB_CELL16_CTRL, 8, payload_temp, delays);
000040  e9cd7300          STRD     r7,r3,[sp,#0]
000044  4601              MOV      r1,r0
000046  2308              MOVS     r3,#8
000048  f44f7246          MOV      r2,#0x318
00004c  2090              MOVS     r0,#0x90
00004e  f7fffffe          BL       drv_bq796xx_command_framing
;;;1709   	
;;;1710       return 0;
000052  2000              MOVS     r0,#0
;;;1711   }
000054  e8bd81fc          POP      {r2-r8,pc}
                  |L8.88|
000058  f1c40507          RSB      r5,r4,#7              ;1702
00005c  f807c005          STRB     r12,[r7,r5]           ;1702
000060  e7ea              B        |L8.56|
;;;1712   
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
                          DCD      ||area_number.59||+0x86
                  |L8.104|
                          DCD      ||.data||+0x80

                          AREA ||i.drv_bq796xx_Clear_FaultRstAll||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Clear_FaultRstAll PROC
;;;652    
;;;653    uint8_t drv_bq796xx_Clear_FaultRstAll(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;654      uint8_t    d_payload[4] = {0};
000004  2000              MOVS     r0,#0
000006  9002              STR      r0,[sp,#8]
;;;655      
;;;656      fill_data4_payload(d_payload,0xFF,0xFF,0,0); //Clear all=x0FF
000008  22ff              MOVS     r2,#0xff
00000a  9000              STR      r0,[sp,#0]
00000c  2300              MOVS     r3,#0
00000e  4611              MOV      r1,r2
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;657      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ79600_FAULT_RST1, 2, d_payload, delays);
000016  ad02              ADD      r5,sp,#8
000018  e9cd5400          STRD     r5,r4,[sp,#0]
00001c  2302              MOVS     r3,#2
00001e  f2403231          MOV      r2,#0x331
000022  2100              MOVS     r1,#0
000024  20b0              MOVS     r0,#0xb0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;658      drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_FAULT_RST, 1, d_payload, delays);
00002a  e9cd5400          STRD     r5,r4,[sp,#0]
00002e  2301              MOVS     r3,#1
000030  f2420230          MOV      r2,#0x2030
000034  2100              MOVS     r1,#0
000036  2090              MOVS     r0,#0x90
000038  f7fffffe          BL       drv_bq796xx_command_framing
;;;659    	
;;;660    	bq796xx_afe_fault_rst1= 0xFF;
00003c  4902              LDR      r1,|L9.72|
00003e  20ff              MOVS     r0,#0xff
000040  7088              STRB     r0,[r1,#2]
;;;661    
;;;662      return 0;
000042  2000              MOVS     r0,#0
;;;663    }
000044  bd3e              POP      {r1-r5,pc}
;;;664    
                          ENDP

000046  0000              DCW      0x0000
                  |L9.72|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Clear_Mask_Fault_OTUT||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Clear_Mask_Fault_OTUT PROC
;;;600    
;;;601    uint8_t drv_bq796xx_Clear_Mask_Fault_OTUT(bq796xx_AFE_GPIO_stack is_stack, uint8_t dev_id, uint32_t delays){
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;602      static uint8_t    d_payload[4] = {0};
;;;603      
;;;604    	bq796xx_afe_fault_msk1 &= ~(BQ79616_MSK_OT|BQ79616_MSK_UT);
000008  4a11              LDR      r2,|L10.80|
00000a  7811              LDRB     r1,[r2,#0]  ; bq796xx_afe_fault_msk1
00000c  f0210160          BIC      r1,r1,#0x60
000010  7011              STRB     r1,[r2,#0]
;;;605    	
;;;606      fill_data4_payload(d_payload,bq796xx_afe_fault_msk1,0,0,0); //MSK_OT=0, MSK_UT=0
000012  2000              MOVS     r0,#0
000014  4603              MOV      r3,r0
000016  4602              MOV      r2,r0
000018  9000              STR      r0,[sp,#0]
00001a  480d              LDR      r0,|L10.80|
00001c  303c              ADDS     r0,r0,#0x3c
00001e  f7fffffe          BL       fill_data4_payload
000022  480b              LDR      r0,|L10.80|
000024  303c              ADDS     r0,r0,#0x3c
;;;607    	
;;;608    	if(is_stack == STACK){
000026  2d01              CMP      r5,#1
000028  d009              BEQ      |L10.62|
;;;609          drv_bq796xx_command_framing(STACK_WRITE, dev_id, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;610    	}else{
;;;611          drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
00002a  e9cd0400          STRD     r0,r4,[sp,#0]
00002e  2301              MOVS     r3,#1
000030  2216              MOVS     r2,#0x16
000032  4631              MOV      r1,r6
000034  2090              MOVS     r0,#0x90
000036  f7fffffe          BL       drv_bq796xx_command_framing
                  |L10.58|
;;;612    	}
;;;613    	
;;;614      //BROAD CAST READ t to check
;;;615    	//fill_data4_payload(d_payload,1,0,0,0);
;;;616    	//drv_bq796xx_command_framing(BROAD_READ, 0x00, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;617    	//drv_bq796xx_delay_ms(500);	
;;;618    	
;;;619      return 0;
00003a  2000              MOVS     r0,#0
;;;620    }
00003c  bd7c              POP      {r2-r6,pc}
                  |L10.62|
00003e  e9cd0400          STRD     r0,r4,[sp,#0]         ;609
000042  2301              MOVS     r3,#1                 ;609
000044  2216              MOVS     r2,#0x16              ;609
000046  4631              MOV      r1,r6                 ;609
000048  20b0              MOVS     r0,#0xb0              ;609
00004a  f7fffffe          BL       drv_bq796xx_command_framing
00004e  e7f4              B        |L10.58|
;;;621    
                          ENDP

                  |L10.80|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Clear_Mask_Fault_OVUV||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Clear_Mask_Fault_OVUV PROC
;;;578    
;;;579    uint8_t drv_bq796xx_Clear_Mask_Fault_OVUV(bq796xx_AFE_GPIO_stack is_stack, uint8_t dev_id, uint32_t delays){
000000  b57c              PUSH     {r2-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;580      static uint8_t    d_payload[4] = {0};
;;;581      
;;;582    	bq796xx_afe_fault_msk1 &= ~(BQ79616_MSK_OV|BQ79616_MSK_UV);
000008  4a11              LDR      r2,|L11.80|
00000a  7811              LDRB     r1,[r2,#0]  ; bq796xx_afe_fault_msk1
00000c  f0210118          BIC      r1,r1,#0x18
000010  7011              STRB     r1,[r2,#0]
;;;583    	
;;;584      fill_data4_payload(d_payload,bq796xx_afe_fault_msk1,0,0,0); //MSK_OV=0, MSK_UV=0
000012  2000              MOVS     r0,#0
000014  4603              MOV      r3,r0
000016  4602              MOV      r2,r0
000018  9000              STR      r0,[sp,#0]
00001a  480d              LDR      r0,|L11.80|
00001c  3038              ADDS     r0,r0,#0x38
00001e  f7fffffe          BL       fill_data4_payload
000022  480b              LDR      r0,|L11.80|
000024  3038              ADDS     r0,r0,#0x38
;;;585      
;;;586    	if(is_stack == STACK){
000026  2d01              CMP      r5,#1
000028  d009              BEQ      |L11.62|
;;;587    	    drv_bq796xx_command_framing(STACK_WRITE, 0, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;588    		  
;;;589    	}else{
;;;590    	    drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
00002a  e9cd0400          STRD     r0,r4,[sp,#0]
00002e  2301              MOVS     r3,#1
000030  2216              MOVS     r2,#0x16
000032  4631              MOV      r1,r6
000034  2090              MOVS     r0,#0x90
000036  f7fffffe          BL       drv_bq796xx_command_framing
                  |L11.58|
;;;591    	}
;;;592    	
;;;593      //BROAD CAST READ t to check
;;;594    	//fill_data4_payload(d_payload,1,0,0,0);
;;;595    	//drv_bq796xx_command_framing(BROAD_READ, 0x00, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;596    	//drv_bq796xx_delay_ms(500);	
;;;597    	
;;;598      return 0;
00003a  2000              MOVS     r0,#0
;;;599    }
00003c  bd7c              POP      {r2-r6,pc}
                  |L11.62|
00003e  e9cd0400          STRD     r0,r4,[sp,#0]         ;587
000042  2301              MOVS     r3,#1                 ;587
000044  2216              MOVS     r2,#0x16              ;587
000046  2100              MOVS     r1,#0                 ;587
000048  20b0              MOVS     r0,#0xb0              ;587
00004a  f7fffffe          BL       drv_bq796xx_command_framing
00004e  e7f4              B        |L11.58|
;;;600    
                          ENDP

                  |L11.80|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Goto_ShutDownMode||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Goto_ShutDownMode PROC
;;;523    
;;;524    uint8_t drv_bq796xx_Goto_ShutDownMode(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;525      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;526      
;;;527      fill_data4_payload(d_payload,BQ79616_GOTO_SHUTDOWN,0,0,0); //[GOTO_SHUTDOWN]=1
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2108              MOVS     r1,#8
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;528      drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f2403209          MOV      r2,#0x309
000022  2100              MOVS     r1,#0
000024  20d0              MOVS     r0,#0xd0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;529      
;;;530      return 0;
00002a  2000              MOVS     r0,#0
;;;531    }
00002c  bd3e              POP      {r1-r5,pc}
;;;532    
                          ENDP


                          AREA ||i.drv_bq796xx_Goto_SleepMode||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Goto_SleepMode PROC
;;;532    
;;;533    uint8_t drv_bq796xx_Goto_SleepMode(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;534      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;535      
;;;536      fill_data4_payload(d_payload,BQ79616_GOTO_SLEEP,0,0,0); //[BQ79616_GOTO_SLEEP]=1
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2104              MOVS     r1,#4
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;537      drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f2403209          MOV      r2,#0x309
000022  2100              MOVS     r1,#0
000024  2090              MOVS     r0,#0x90
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;538      
;;;539      return 0;
00002a  2000              MOVS     r0,#0
;;;540    }
00002c  bd3e              POP      {r1-r5,pc}
;;;541    
                          ENDP


                          AREA ||i.drv_bq796xx_HwTimerHanlder||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_HwTimerHanlder PROC
;;;87     //uint16_t smp_time_count = 0;
;;;88     void drv_bq796xx_HwTimerHanlder(__far void *dest, uint16_t evt, void *vDataPtr)
000000  4802              LDR      r0,|L14.12|
;;;89     {
;;;90     	smp_time_count++;
000002  8c01              LDRH     r1,[r0,#0x20]  ; smp_time_count
000004  1c49              ADDS     r1,r1,#1
000006  8401              STRH     r1,[r0,#0x20]
;;;91     }
000008  4770              BX       lr
;;;92     
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Init_Steps||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Init_Steps PROC
;;;1074   
;;;1075   uint8_t drv_bq796xx_Init_Steps(bq796xx_wake_tone_switch wake_tone_sw, bq796xx_init_steps_enum *afe_phase,uint8_t maxcnt, uint8_t dir, uint8_t *step_complete_f, uint8_t *before_delay_ms){
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  469a              MOV      r10,r3
000008  e9dd5416          LDRD     r5,r4,[sp,#0x58]
;;;1076       uint8_t    d_payload[4] = {0};
00000c  2600              MOVS     r6,#0
00000e  9604              STR      r6,[sp,#0x10]
;;;1077       uint8_t    null_payload[4] = {0};
000010  2000              MOVS     r0,#0
000012  9003              STR      r0,[sp,#0xc]
;;;1078       
;;;1079   		static uint8_t    bmu_cnt = 0, dir_sel;
;;;1080       static uint16_t   dir_addr;
;;;1081       static uint8_t    top_no = 0;
;;;1082       static uint8_t    sub_step=0;
;;;1083   		static uint8_t    rcv_check_step = 0;
;;;1084   		static uint8_t    is_ring = 0;
;;;1085   			
;;;1086       uint8_t res=0;		
;;;1087   		static uint8_t wait_index=0;
;;;1088   		static uint8_t cell_cnt=0;
;;;1089   		static uint8_t set_val;
;;;1090   		static uint8_t retry_cnt = 0;
;;;1091   			
;;;1092   		*step_complete_f = 0;
000014  7028              STRB     r0,[r5,#0]
;;;1093   		*before_delay_ms = 0;
000016  7020              STRB     r0,[r4,#0]
;;;1094   		
;;;1095   		top_no = maxcnt;
000018  48fa              LDR      r0,|L15.1028|
00001a  72c2              STRB     r2,[r0,#0xb]
;;;1096   		is_ring = 0;
00001c  4bf9              LDR      r3,|L15.1028|
00001e  2000              MOVS     r0,#0
000020  7398              STRB     r0,[r3,#0xe]
;;;1097   		
;;;1098       switch(*afe_phase){
;;;1099           case AFE_INIT_IDLE:
;;;1100   				    if(wake_tone_sw == WAKE_TONE_ENABLE){
;;;1101   		            drv_bq796xx_switch_rx_pin_type_setting(BQ_GPIO);
;;;1102   							  sub_step = 0;
;;;1103   		        }else{	
;;;1104   							  sub_step = 3;
;;;1105   						}
;;;1106   					  *before_delay_ms = 0;
;;;1107   					  *step_complete_f = 1;
;;;1108               break;
;;;1109           case AFE_INIT_WAKE_UP:                                              // send reset pulse(~2.5ms)
;;;1110               switch(sub_step){
;;;1111   				    case 0:
;;;1112   						    bq796xx_gpio_rx_state = GPIO_ACTIVE_HIGH;
;;;1113                   smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
;;;1114   					      *before_delay_ms = 20;
;;;1115   								++sub_step;
;;;1116                   break;
;;;1117   						case 1:
;;;1118                   bq796xx_gpio_rx_state = GPIO_ACTIVE_LOW;
;;;1119                   smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
;;;1120                   *before_delay_ms = 2;   //keep low for wake base device(base on Spec. for BQ79600 wakeup timing is 2.5ms ~ 3ms) 
;;;1121   								++sub_step;
;;;1122                   break;
;;;1123   						case 2:
;;;1124                   bq796xx_gpio_rx_state = GPIO_ACTIVE_HIGH;
;;;1125                   smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
;;;1126   								*before_delay_ms = 20;
;;;1127   								++sub_step;
;;;1128   								break;								
;;;1129   						case 3:
;;;1130   							  if(wake_tone_sw == WAKE_TONE_ENABLE){
;;;1131   						        drv_bq796xx_switch_rx_pin_type_setting(BQ_UART);                //MCU pin switch to UART function, wait 30ms UART Ready
;;;1132                       //drv_bq796xx_delay_ms(2); 
;;;1133   								}
;;;1134   						 
;;;1135      				      if ( dir == DIR_NORTH ){
;;;1136                       dir_addr = BQ79600_DIR0_ADDR;
;;;1137                       dir_sel  = DIR_NORTH;							  
;;;1138                   }else{                                                          // need not to wakeup, just jump to wakeup device(Setting SOUTH direction)
;;;1139                       dir_addr = BQ79600_DIR1_ADDR;
;;;1140                       dir_sel = (DIR_SOUTH*BQ79616_DIR_SEL);
;;;1141                   }
;;;1142   							  wait_index = 0;
;;;1143   								++sub_step;
;;;1144   						    break;
;;;1145   					  }
;;;1146   						
;;;1147   					  if(sub_step>=4){
;;;1148   							  sub_step = 0;
;;;1149   							  *before_delay_ms = 0;
;;;1150   						    *step_complete_f = 1;
;;;1151   						}
;;;1152               break;
;;;1153           case AFE_INIT_WAKE_UP_WAIT:                                                                                    // wait for all devices wake up
;;;1154   						*before_delay_ms = (AFE_WAKE_WAIT_TIME_BASE * maxcnt);
000022  eb020082          ADD      r0,r2,r2,LSL #2
000026  0640              LSLS     r0,r0,#25
000028  f891b000          LDRB     r11,[r1,#0]           ;1098
00002c  0e00              LSRS     r0,r0,#24
00002e  9008              STR      r0,[sp,#0x20]         ;1095
000030  7bd9              LDRB     r1,[r3,#0xf]          ;1095
000032  7a98              LDRB     r0,[r3,#0xa]          ;1095
;;;1155   						*step_complete_f = 1;						
;;;1156               break;
;;;1157           case AFE_INIT_BRORAD_SET_BMU_STACK1:                                                                           // Before use "Broadcast Write Revese" cmd, you must be have to clear TOP stack role device BMU.
;;;1158   				    fill_data4_payload(d_payload, BQ79600_STACK,0,0,0);
;;;1159               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_COMM_CTRL, 1, d_payload, 0);                        // Set everything as a stack device first.
;;;1160               *before_delay_ms = 1;
;;;1161               *step_complete_f = 1;
;;;1162               break;		
;;;1163           case AFE_INIT_SET_BASE1:
;;;1164               fill_data4_payload(d_payload,BQ79600_BASE,0,0,0);
;;;1165               drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_CTRL, 1, d_payload, 0); 
;;;1166   				
;;;1167   						*before_delay_ms = 1;
;;;1168   						*step_complete_f = 1;	
;;;1169   				    
;;;1170   				    retry_cnt = 0;
;;;1171               break;	
;;;1172           case AFE_INIT_WAKE_DEV:                                             																					 // wake up base 				
;;;1173   				    if(wake_tone_sw == WAKE_TONE_ENABLE){
;;;1174   				         fill_data4_payload(d_payload, WAKEUP | dir_sel,0,0,0);
;;;1175   							   *before_delay_ms = 10 * maxcnt;
;;;1176   						}else{
;;;1177   						     fill_data4_payload(d_payload, dir_sel,0,0,0);
;;;1178   							   *before_delay_ms = 1;
;;;1179   							   retry_cnt=3;
;;;1180   						}
;;;1181   				
;;;1182               drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, 0);
;;;1183               
;;;1184   						++retry_cnt;
;;;1185   						if(retry_cnt>=1){
;;;1186   							  retry_cnt = 0;
;;;1187   						    *step_complete_f = 1;
;;;1188   						}							
;;;1189               break;	
;;;1190           case AFE_INIT_FAULT_DET_ENABLE:
;;;1191               fill_data4_payload(d_payload,FCOMM_EN | NFAULT_EN,0,0,0);
;;;1192               drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_DEV_CONF1, 1, d_payload, 0);                       //bq79600 only, Device config1 => enable fault detection and NFault function
;;;1193   
;;;1194   						*before_delay_ms = 1;
;;;1195   						*step_complete_f = 1;					
;;;1196       				break;
;;;1197           case AFE_INIT_WAIT_LONG:
;;;1198               wait_index++;
000034  1c49              ADDS     r1,r1,#1
000036  f0010cff          AND      r12,r1,#0xff
00003a  7b19              LDRB     r1,[r3,#0xc]          ;1095
00003c  f10d090c          ADD      r9,sp,#0xc            ;1077
;;;1199               if (wait_index >= (maxcnt*AFE_WAKE_WAIT_TIME_BASE) ){
;;;1200                   wait_index = 0;
;;;1201               }
;;;1202   						
;;;1203   						*before_delay_ms = 0;
;;;1204   						*step_complete_f = 1;	
;;;1205               break;
;;;1206           case AFE_INIT_OTP_ECC_TEST_DISABLE_BASE:
;;;1207               drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_OTP_ECC_TEST, 1, null_payload,   0); 
;;;1208   				
;;;1209   						*before_delay_ms = 1;
;;;1210   						*step_complete_f = 1;
;;;1211               break;
;;;1212           case AFE_INIT_SET_DIR:
;;;1213               fill_data4_payload(d_payload, dir_sel,0,0,0);                                                //Must to do this North direction=BWR 0x00, South direction=BWR 0x80 
;;;1214               drv_bq796xx_command_framing(BROAD_WRITE_REVERSE, 0, BQ79600_CONTROL1, 1, d_payload, 0);      //If a device receives communication frame opposite to the [DIR_SEL] setting, change direction for all devices	
;;;1215   		
;;;1216   						bq796xx_data.comm_dir = dir;
;;;1217   											
;;;1218               *before_delay_ms = 2;
;;;1219               *step_complete_f = 1;
;;;1220               break;
;;;1221           case AFE_INIT_OTP_ECC_TEST_DISABLE_BROAD:
;;;1222               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_OTP_ECC_TEST, 1, null_payload, 0); 
;;;1223   				
;;;1224   						*before_delay_ms = 1;
;;;1225   						*step_complete_f = 1;
;;;1226               break;
;;;1227           case AFE_INIT_DUMMY_WRITE:					
;;;1228               drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_OTP_ECC_DATAIN1+sub_step, 1, null_payload, 0);                // 8 is fixed value according to Spec. 
000040  f2013743          ADD      r7,r1,#0x343
;;;1229               ++sub_step;
;;;1230   						
;;;1231   						*before_delay_ms = 1;
;;;1232   						
;;;1233   						if(sub_step>=8){
;;;1234   							  sub_step = 0; 
;;;1235   						    *step_complete_f = 1;
;;;1236   						}
;;;1237               break;
;;;1238           case AFE_INIT_AUTO_ADDR:
;;;1239               fill_data4_payload(d_payload,ADDR_WR | dir_sel,0,0,0);                                                            // Auto addressing enable
;;;1240               drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_CONTROL1, 1, d_payload, 0);
;;;1241               
;;;1242   						*before_delay_ms = 1;
;;;1243   						*step_complete_f = 1;
;;;1244   				    sub_step = 0;
;;;1245   				    break;
;;;1246           case AFE_INIT_SET_ID:
;;;1247                                                                                                           
;;;1248               fill_data4_payload(d_payload,sub_step,0,0,0);                                                                     // 6 bits for address ID
;;;1249               drv_bq796xx_command_framing(BROAD_WRITE, 0, dir_addr, 1, d_payload, 0);                                           // 3000 is base on TI's log file
;;;1250               ++sub_step;				
;;;1251   						*before_delay_ms = 1;
;;;1252   						
;;;1253   						if(sub_step > top_no){
;;;1254   							  sub_step = 0; 
;;;1255   						    *step_complete_f = 1;
;;;1256   						}						
;;;1257               break;
;;;1258           case AFE_INIT_SET_ID_WAIT:
;;;1259               wait_index++;
;;;1260               if(wait_index >= AFE_READ_WAIT_TIME ){
;;;1261                   wait_index = 0;
;;;1262               }
;;;1263   						
;;;1264   						*before_delay_ms = 0;
;;;1265   						*step_complete_f = 1;
;;;1266               break;
;;;1267           case AFE_INIT_DUMMY_READ:         
;;;1268               drv_bq796xx_command_framing(BROAD_READ, 0, BQ79600_OTP_ECC_DATAIN1+sub_step, 1, null_payload, 0);                  // 8 is fixed value according to Spec.
;;;1269               ++sub_step;
;;;1270               
;;;1271   						*before_delay_ms = 1;
;;;1272   						
;;;1273   						if(sub_step>=8){
;;;1274   							  sub_step = 0; 
;;;1275   						    *step_complete_f = 1;
;;;1276   						}
;;;1277               break;
;;;1278           case AFE_INIT_WAIT_ID_RESPONSE:
;;;1279   					  sub_step = 1;
;;;1280   						*before_delay_ms = 0;
;;;1281   						*step_complete_f = 1;
;;;1282               break;
;;;1283           case AFE_INIT_BRORAD_SET_BMU_STACK2:
;;;1284   					  fill_data4_payload(d_payload, BQ79600_STACK,0,0,0);
;;;1285               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_COMM_CTRL, 1, d_payload, 0);                   // Set everything as a stack device first.
;;;1286               *before_delay_ms = 1;
;;;1287               *step_complete_f = 1;			
;;;1288   
;;;1289               retry_cnt = 0;				
;;;1290               break;		
;;;1291   				case AFE_INIT_CHECK_ID_RESPONSE:			
;;;1292               //--------------------------------------------------------------	
;;;1293               *before_delay_ms = 1;                                                                                 //Msut have, avoid device can not recv command.				
;;;1294   						if(rcv_check_step == 0){
000044  9707              STR      r7,[sp,#0x1c]
000046  7b5f              LDRB     r7,[r3,#0xd]
000048  9706              STR      r7,[sp,#0x18]         ;1095
00004a  7a5b              LDRB     r3,[r3,#9]            ;1095
;;;1295   						    bmu_cnt = sub_step;
;;;1296                   drv_bq796xx_clear_fifobuffer();
;;;1297   						    drv_bq796xx_command_framing(SINGLE_READ,  bmu_cnt, dir_addr, 1, null_payload, 0);                 // 10000 is base on TI's log file
;;;1298   							  rcv_check_step = 1;
;;;1299   						}else{
;;;1300   						    res = drv_bq796xx_check_respone_event2();
;;;1301   							  
;;;1302                   if (res == BQ796XX_RES_TIMEOUT){  								                                                // no return data => no this ID    							      
;;;1303   									  ++retry_cnt;
;;;1304   									  if(retry_cnt <= BQ796XX_CHECK_ID_CMD_RETRY){
;;;1305                           rcv_check_step = 0;                                                                       //Retry this ID is exist?											
;;;1306   										}else{
;;;1307   											  retry_cnt = 0;
;;;1308   									      sub_step = top_no + 1;                                                                    //When device no resopne, then break check device ID
;;;1309   									      if(bmu_cnt>0){ 
;;;1310   										        --bmu_cnt;
;;;1311   									      }
;;;1312   									}
;;;1313                   }else if(res == BQ796XX_RES_RCV_DAT){
;;;1314   								    rcv_check_step = 0;     
;;;1315   									  ++sub_step;             //Next device check
;;;1316   								}
;;;1317   						}
;;;1318   						//--------------------------------------------------------------
;;;1319   						
;;;1320   						if(sub_step > top_no){
;;;1321   							  rcv_check_step = 0;
;;;1322   							  sub_step = 0;
;;;1323   						    *before_delay_ms = 1;
;;;1324   						    *step_complete_f = 1;
;;;1325   						}
;;;1326   				    break;
;;;1327           case AFE_INIT_SET_STACK:
;;;1328               fill_data4_payload(d_payload,BQ79600_STACK,0,0,0);
;;;1329               drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_COMM_CTRL, 1, d_payload, 0);
;;;1330   
;;;1331   						*before_delay_ms = 1;
;;;1332   						*step_complete_f = 1;				
;;;1333               break;
;;;1334           case AFE_INIT_SET_BASE:
;;;1335               fill_data4_payload(d_payload,BQ79600_BASE,0,0,0);
;;;1336               drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_CTRL, 1, d_payload, 0); 
;;;1337   				
;;;1338   						*before_delay_ms = 1;
;;;1339   						*step_complete_f = 1;	
;;;1340               break;
;;;1341           case AFE_INIT_SET_TOP:
;;;1342               if (bmu_cnt > maxcnt ){
;;;1343                   bmu_cnt = maxcnt;
;;;1344               }
;;;1345   						
;;;1346   						if(bmu_cnt>=1){
;;;1347   						    fill_data4_payload(d_payload,BQ79600_TOP,0,0,0);
;;;1348                   drv_bq796xx_command_framing(SINGLE_WRITE,  bmu_cnt, BQ79600_COMM_CTRL, 1, d_payload, 0); 
;;;1349   						}
;;;1350   						*before_delay_ms = 1;
;;;1351   						*step_complete_f = 1;
;;;1352               rcv_check_step = 0;						
;;;1353   						sub_step = 0;
;;;1354               break;
;;;1355   				case AFE_INIT_CHECK_IS_RING:			
;;;1356               //--------------------------------------------------------------	
;;;1357               *before_delay_ms = 1;                                                                                   //Msut have, avoid device can not recv command.				
;;;1358   						if(rcv_check_step == 0){
;;;1359      			        fill_data4_payload(d_payload,0,0,0,0);
;;;1360                   drv_bq796xx_command_framing(SINGLE_READ,  bmu_cnt, BQ79600_ACTIVE_CELL, 1, d_payload, 0);            // 10000 is base on TI's log file
;;;1361   							  rcv_check_step = 1;
;;;1362   						}else{
;;;1363   						    res = drv_bq796xx_data_frame_parser();
;;;1364   							  
;;;1365                   ++sub_step;							                   		  
;;;1366                   if(res == BQ796XX_RES_OK){
;;;1367   								    ++sub_step;
;;;1368   									  if ( dir == DIR_NORTH ){
;;;1369   										   if(bq796xx_data.ns_flag == 0x40){    //South dir
;;;1370   											     is_ring = 0x80;
;;;1371   											 }
;;;1372   										}else{
;;;1373   										   if(bq796xx_data.ns_flag == 0x80){    //North dir
;;;1374   											     is_ring = 0x80;
;;;1375   											 }											
;;;1376   										}
;;;1377   										
;;;1378   										bmu_cnt |= is_ring;
;;;1379   								}
;;;1380   						}
;;;1381   						//--------------------------------------------------------------
;;;1382   						
;;;1383   						if(sub_step > 0){
;;;1384   							  rcv_check_step = 0;
;;;1385   							  sub_step = 0;
;;;1386   						    *before_delay_ms = 1;
;;;1387   						    *step_complete_f = 1;
;;;1388   						}
;;;1389   				    break;			
;;;1390           case AFE_INIT_SET_DIRECTION_FLAG_ACTIVE_CELL:						
;;;1391   						if(bmu_cnt>= 0x01){
;;;1392   							  if(dir == DIR_NORTH )
;;;1393   								    fill_data4_payload(d_payload,(BMU_CELL_SERIES-6) | 0x80,0,0,0);
;;;1394   								else
;;;1395   									  fill_data4_payload(d_payload,(BMU_CELL_SERIES-6) | 0x40,0,0,0);
;;;1396   								drv_bq796xx_command_framing(STACK_WRITE, 0 , BQ79600_ACTIVE_CELL, 1, d_payload, 0);
;;;1397   						}
;;;1398   						
;;;1399   						*before_delay_ms = 1;
;;;1400   						*step_complete_f = 1;
;;;1401   						rcv_check_step = 0;
;;;1402   						sub_step = 0;
;;;1403               break;	
;;;1404           case AFE_INIT_FAULT_RESET_1:
;;;1405               fill_data4_payload(d_payload,0xFF,0,0,0);
;;;1406               drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_FAULT_RST1, 1, d_payload, 0); 
;;;1407   						*before_delay_ms = 1;
;;;1408   						*step_complete_f = 1;	
;;;1409               break;
;;;1410           case AFE_INIT_FAULT_RESET_2:
;;;1411               fill_data4_payload(d_payload,0xFF,0,0,0);
;;;1412   				    drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_FAULT_RST2, 1, d_payload, 0); 
;;;1413   						*before_delay_ms = 1;
;;;1414   						*step_complete_f = 1;
;;;1415               break;
;;;1416           case AFE_INIT_FAULT_RESET:
;;;1417               fill_data4_payload(d_payload,BQ79600_RST_FCOMM_DET | BQ79600_RST_SYS,0,0,0);
;;;1418   				    drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_FAULT_RST, 1,d_payload , 0);
;;;1419   						*before_delay_ms = 1;
;;;1420   						*step_complete_f = 1;
;;;1421               break;
;;;1422           case AFE_INIT_OTP_SPARE:
;;;1423               drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_OTP_SPARE13, 1, null_payload, 0);
;;;1424   						*before_delay_ms = 1;
;;;1425   						*step_complete_f = 1;
;;;1426               break;
;;;1427           case AFE_INIT_BQ79600_TIMEOUT:
;;;1428               drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_TIMEOUT, 1, null_payload, 0);
;;;1429   						*before_delay_ms = 1;
;;;1430   						*step_complete_f = 1;
;;;1431               break;
;;;1432           case AFE_INIT_SWITCH_GPIO:
;;;1433   						*before_delay_ms = 1;
;;;1434   						*step_complete_f = 1;
;;;1435               break;
;;;1436           case AFE_INIT_TSREF_ENABLE:
;;;1437               fill_data4_payload(d_payload,BQ79600_TSREF_EN,0,0,0);
;;;1438               drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_CONTROL2, 1, d_payload, 0);
;;;1439   						*before_delay_ms = 1;
;;;1440   						*step_complete_f = 1;
;;;1441        				break;
;;;1442           case AFE_INIT_ADC_CONF1:
;;;1443               fill_data4_payload(d_payload,0x03,0,0,0);
;;;1444               drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_ADC_CONF1, 1, d_payload, 0);
;;;1445   						*before_delay_ms = 1;
;;;1446   						*step_complete_f = 1;
;;;1447               break;
;;;1448           case AFE_INIT_ADC_CTRL1:
;;;1449               fill_data4_payload(d_payload,0x1E,0,0,0);
;;;1450               drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_ADC_CTRL1, 1, d_payload, 0);                                // [LPF BB EN]=1, Cell filter([3]=1), start ADC([2]=1), continue run([1:0]=2)
;;;1451   
;;;1452   						*before_delay_ms = 38+5*bmu_cnt;
;;;1453   						*step_complete_f = 1;				
;;;1454   				    break;
;;;1455           case AFE_INIT_BQ796XX_TIMEOUT:               //BMU deivice CTL_ACT =1 is sends the device to SHUTDOWN. FAULT_SYS[CTL] bit will not be set, CTL_TIME = 101 (10 mintues long communcation) 
;;;1456               fill_data4_payload(d_payload,0x0D,0,0,0);   
;;;1457   				    drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_COMM_TIMEOUT_CONF, 1, d_payload, 0);
;;;1458   						*before_delay_ms = 1;
;;;1459   						*step_complete_f = 1;				
;;;1460               break;
;;;1461          case AFE_INIT_MASK_FAULT_ALL:      //Broad cast Mask Fault all + Clear fault rst all
;;;1462               drv_bq796xx_Set_BroadCast_Mask_FaultAll(0);
;;;1463   			      
;;;1464   			      *before_delay_ms = 20;
;;;1465   						*step_complete_f = 1;				 
;;;1466   			      sub_step=0;
;;;1467               break;
;;;1468   			 case AFE_INIT_BRIDGE_FAULT_MSK:
;;;1469     					fill_data4_payload(d_payload, (BQ79600_MSK_SYS | BQ79600_MSK_REG| BQ79600_MSK_FTONE_DET | BQ79600_MSK_UART_SPI | BQ79600_MSK_COML_H | BQ79600_MSK_HB | BQ79600_MSK_PWR), 0, 0, 0);
;;;1470   						drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_FAULT_MSK, 1, d_payload, 0);
;;;1471   
;;;1472   				    *before_delay_ms = 1;
;;;1473   				    *step_complete_f = 1;		
;;;1474               sub_step=0;			 
;;;1475          case AFE_INIT_CLEAR_RST_ALL:
;;;1476   			       *before_delay_ms = 20; 
;;;1477   			 
;;;1478   			      fill_data4_payload(d_payload,0xFF,0xFF,0,0); //Clear all=x0FF
;;;1479   	          switch(sub_step){
;;;1480   						    case 0:
;;;1481   			              drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ79600_FAULT_RST1, 2, d_payload, 0);
;;;1482                       break;
;;;1483   								case 1:
;;;1484   									  drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_FAULT_RST, 1, d_payload, 0);
;;;1485   								    break;
;;;1486   						}
;;;1487   			      
;;;1488   	          bq796xx_afe_fault_rst1= 0xFF;
;;;1489   	          
;;;1490   			      ++sub_step;
;;;1491   						
;;;1492   						if(sub_step>=2){
;;;1493   						    *before_delay_ms = 1;
;;;1494   						    *step_complete_f = 1;		
;;;1495                   sub_step=0;			 
;;;1496   						}
;;;1497               break;			
;;;1498          case AFE_INIT_SET_RUN_OVUV_FUNC:   //STACK Write, first set mask fault all=> clear mask fault OVUV(enable)=> use OVUV thresh + start OVUV function
;;;1499   				    *before_delay_ms = 1; 
;;;1500   			 
;;;1501   	          switch(sub_step){
;;;1502   						    case 0:
;;;1503   								    drv_bq796xx_Set_Mask_FaultAll(STACK, 0, 0);
;;;1504   							      break;
;;;1505   								case 1:
;;;1506                       drv_bq796xx_Clear_Mask_Fault_OVUV(STACK, 0,0);
;;;1507                       break;
;;;1508   								case 2:
;;;1509   								    drv_bq796xx_Set_Stack_OV(bq796xx_default.ov_threshold, bq796xx_default.ov_step_threshold,0);
00004c  9305              STR      r3,[sp,#0x14]
00004e  4bed              LDR      r3,|L15.1028|
000050  2701              MOVS     r7,#1                 ;1098
000052  3380              ADDS     r3,r3,#0x80
000054  f10d0810          ADD      r8,sp,#0x10           ;1076
000058  f1bb0f2b          CMP      r11,#0x2b             ;1098
00005c  d21f              BCS      |L15.158|
00005e  e8dff00b          TBB      [pc,r11]              ;1098
000062  1625              DCB      0x16,0x25
000064  828699ae          DCB      0x82,0x86,0x99,0xae
000068  f5f4f3f2          DCB      0xf5,0xf4,0xf3,0xf2
00006c  f1f0efee          DCB      0xf1,0xf0,0xef,0xee
000070  edecebea          DCB      0xed,0xec,0xeb,0xea
000074  e9e8e7e6          DCB      0xe9,0xe8,0xe7,0xe6
000078  e5e4e3e2          DCB      0xe5,0xe4,0xe3,0xe2
00007c  e1e0dfde          DCB      0xe1,0xe0,0xdf,0xde
000080  dddcdbda          DCB      0xdd,0xdc,0xdb,0xda
000084  d9d8d7d6          DCB      0xd9,0xd8,0xd7,0xd6
000088  d5d4d3d2          DCB      0xd5,0xd4,0xd3,0xd2
00008c  d100              DCB      0xd1,0x00
00008e  9809              LDR      r0,[sp,#0x24]         ;1100
000090  2801              CMP      r0,#1                 ;1100
000092  d005              BEQ      |L15.160|
000094  49db              LDR      r1,|L15.1028|
000096  2003              MOVS     r0,#3                 ;1104
000098  7308              STRB     r0,[r1,#0xc]          ;1104
                  |L15.154|
00009a  7026              STRB     r6,[r4,#0]            ;1106
00009c  702f              STRB     r7,[r5,#0]            ;1107
                  |L15.158|
00009e  e1ff              B        |L15.1184|
                  |L15.160|
0000a0  2000              MOVS     r0,#0                 ;1101
0000a2  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
0000a6  48d7              LDR      r0,|L15.1028|
0000a8  7306              STRB     r6,[r0,#0xc]          ;1102
0000aa  e7f6              B        |L15.154|
0000ac  f8df8354          LDR      r8,|L15.1028|
0000b0  b131              CBZ      r1,|L15.192|
0000b2  2901              CMP      r1,#1                 ;1110
0000b4  d013              BEQ      |L15.222|
0000b6  2902              CMP      r1,#2                 ;1110
0000b8  d020              BEQ      |L15.252|
0000ba  2903              CMP      r1,#3                 ;1110
0000bc  d143              BNE      |L15.326|
0000be  e02c              B        |L15.282|
                  |L15.192|
0000c0  4639              MOV      r1,r7                 ;1112
0000c2  f888701c          STRB     r7,[r8,#0x1c]         ;1112
0000c6  48cf              LDR      r0,|L15.1028|
0000c8  3058              ADDS     r0,r0,#0x58           ;1113
0000ca  f7fffffe          BL       smp_gpio_set_state
0000ce  2014              MOVS     r0,#0x14              ;1114
0000d0  7020              STRB     r0,[r4,#0]            ;1114
0000d2  f898000c          LDRB     r0,[r8,#0xc]          ;1115  ; sub_step
0000d6  1c40              ADDS     r0,r0,#1              ;1115
0000d8  f888000c          STRB     r0,[r8,#0xc]          ;1115
0000dc  e033              B        |L15.326|
                  |L15.222|
0000de  4631              MOV      r1,r6                 ;1118
0000e0  f888601c          STRB     r6,[r8,#0x1c]         ;1118
0000e4  48c7              LDR      r0,|L15.1028|
0000e6  3058              ADDS     r0,r0,#0x58           ;1119
0000e8  f7fffffe          BL       smp_gpio_set_state
0000ec  2002              MOVS     r0,#2                 ;1120
0000ee  7020              STRB     r0,[r4,#0]            ;1120
0000f0  f898000c          LDRB     r0,[r8,#0xc]          ;1121  ; sub_step
0000f4  1c40              ADDS     r0,r0,#1              ;1121
0000f6  f888000c          STRB     r0,[r8,#0xc]          ;1121
0000fa  e024              B        |L15.326|
                  |L15.252|
0000fc  4639              MOV      r1,r7                 ;1124
0000fe  f888701c          STRB     r7,[r8,#0x1c]         ;1124
000102  48c0              LDR      r0,|L15.1028|
000104  3058              ADDS     r0,r0,#0x58           ;1125
000106  f7fffffe          BL       smp_gpio_set_state
00010a  2014              MOVS     r0,#0x14              ;1126
00010c  7020              STRB     r0,[r4,#0]            ;1126
00010e  f898000c          LDRB     r0,[r8,#0xc]          ;1127  ; sub_step
000112  1c40              ADDS     r0,r0,#1              ;1127
000114  f888000c          STRB     r0,[r8,#0xc]          ;1127
000118  e015              B        |L15.326|
                  |L15.282|
00011a  9809              LDR      r0,[sp,#0x24]         ;1130
00011c  2801              CMP      r0,#1                 ;1130
00011e  d101              BNE      |L15.292|
000120  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
                  |L15.292|
000124  f1ba0f00          CMP      r10,#0                ;1135
000128  d016              BEQ      |L15.344|
00012a  f2403007          MOV      r0,#0x307             ;1139
00012e  f8a8002c          STRH     r0,[r8,#0x2c]         ;1139
000132  2080              MOVS     r0,#0x80              ;1140
000134  f888000a          STRB     r0,[r8,#0xa]          ;1140
                  |L15.312|
000138  f888600f          STRB     r6,[r8,#0xf]          ;1142
00013c  f898000c          LDRB     r0,[r8,#0xc]          ;1143  ; sub_step
000140  1c40              ADDS     r0,r0,#1              ;1143
000142  f888000c          STRB     r0,[r8,#0xc]          ;1143
                  |L15.326|
000146  f898000c          LDRB     r0,[r8,#0xc]          ;1147  ; sub_step
00014a  2804              CMP      r0,#4                 ;1147
00014c  d3a7              BCC      |L15.158|
00014e  f888600c          STRB     r6,[r8,#0xc]          ;1148
000152  7026              STRB     r6,[r4,#0]            ;1149
000154  702f              STRB     r7,[r5,#0]            ;1150
                  |L15.342|
000156  e1a3              B        |L15.1184|
                  |L15.344|
000158  f2403006          MOV      r0,#0x306             ;1136
00015c  f8a8002c          STRH     r0,[r8,#0x2c]         ;1136
000160  f888600a          STRB     r6,[r8,#0xa]          ;1137
000164  e7e8              B        |L15.312|
000166  9808              LDR      r0,[sp,#0x20]         ;1154
000168  7020              STRB     r0,[r4,#0]            ;1154
00016a  702f              STRB     r7,[r5,#0]            ;1155
00016c  e198              B        |L15.1184|
00016e  2300              MOVS     r3,#0                 ;1158
000170  461a              MOV      r2,r3                 ;1158
000172  2102              MOVS     r1,#2                 ;1158
000174  a804              ADD      r0,sp,#0x10           ;1158
000176  9600              STR      r6,[sp,#0]            ;1158
000178  f7fffffe          BL       fill_data4_payload
00017c  e9cd8600          STRD     r8,r6,[sp,#0]         ;1159
000180  2301              MOVS     r3,#1                 ;1159
000182  f44f7242          MOV      r2,#0x308             ;1159
000186  2100              MOVS     r1,#0                 ;1159
000188  20d0              MOVS     r0,#0xd0              ;1159
00018a  f7fffffe          BL       drv_bq796xx_command_framing
00018e  7027              STRB     r7,[r4,#0]            ;1160
000190  702f              STRB     r7,[r5,#0]            ;1161
000192  e185              B        |L15.1184|
000194  2300              MOVS     r3,#0                 ;1164
000196  461a              MOV      r2,r3                 ;1164
000198  4619              MOV      r1,r3                 ;1164
00019a  a804              ADD      r0,sp,#0x10           ;1164
00019c  9600              STR      r6,[sp,#0]            ;1164
00019e  f7fffffe          BL       fill_data4_payload
0001a2  e9cd8600          STRD     r8,r6,[sp,#0]         ;1165
0001a6  2301              MOVS     r3,#1                 ;1165
0001a8  f44f7242          MOV      r2,#0x308             ;1165
0001ac  2100              MOVS     r1,#0                 ;1165
0001ae  2090              MOVS     r0,#0x90              ;1165
0001b0  f7fffffe          BL       drv_bq796xx_command_framing
0001b4  7027              STRB     r7,[r4,#0]            ;1167
0001b6  702f              STRB     r7,[r5,#0]            ;1168
0001b8  4892              LDR      r0,|L15.1028|
0001ba  7486              STRB     r6,[r0,#0x12]         ;1170
0001bc  e170              B        |L15.1184|
0001be  9909              LDR      r1,[sp,#0x24]         ;1173
0001c0  2901              CMP      r1,#1                 ;1173
0001c2  d044              BEQ      |L15.590|
0001c4  2300              MOVS     r3,#0                 ;1177
0001c6  4601              MOV      r1,r0                 ;1177
0001c8  461a              MOV      r2,r3                 ;1177
0001ca  f8df9238          LDR      r9,|L15.1028|
0001ce  a804              ADD      r0,sp,#0x10           ;1177
0001d0  9600              STR      r6,[sp,#0]            ;1177
0001d2  f7fffffe          BL       fill_data4_payload
0001d6  7027              STRB     r7,[r4,#0]            ;1178
0001d8  2003              MOVS     r0,#3                 ;1179
0001da  f8890012          STRB     r0,[r9,#0x12]         ;1179
                  |L15.478|
0001de  e9cd8600          STRD     r8,r6,[sp,#0]         ;1182
0001e2  2301              MOVS     r3,#1                 ;1182
0001e4  f2403209          MOV      r2,#0x309             ;1182
0001e8  2100              MOVS     r1,#0                 ;1182
0001ea  2090              MOVS     r0,#0x90              ;1182
0001ec  f7fffffe          BL       drv_bq796xx_command_framing
0001f0  4984              LDR      r1,|L15.1028|
0001f2  7c88              LDRB     r0,[r1,#0x12]         ;1184  ; retry_cnt
0001f4  1c40              ADDS     r0,r0,#1              ;1184
0001f6  b2c0              UXTB     r0,r0                 ;1184
0001f8  7488              STRB     r0,[r1,#0x12]         ;1184
0001fa  2800              CMP      r0,#0                 ;1185
0001fc  d0ab              BEQ      |L15.342|
0001fe  748e              STRB     r6,[r1,#0x12]         ;1186
000200  702f              STRB     r7,[r5,#0]            ;1187
000202  e14d              B        |L15.1184|
000204  e3fe              B        |L15.2564|
000206  e3de              B        |L15.2502|
000208  e387              B        |L15.2330|
00020a  e33e              B        |L15.2186|
00020c  e30f              B        |L15.2094|
00020e  e2d8              B        |L15.1986|
000210  e2a3              B        |L15.1882|
000212  e28e              B        |L15.1842|
000214  e284              B        |L15.1824|
000216  e271              B        |L15.1788|
000218  e258              B        |L15.1740|
00021a  e245              B        |L15.1704|
00021c  e231              B        |L15.1666|
00021e  e22d              B        |L15.1660|
000220  e220              B        |L15.1636|
000222  e214              B        |L15.1614|
000224  e200              B        |L15.1576|
000226  e1ec              B        |L15.1538|
000228  e1d8              B        |L15.1500|
00022a  e1b2              B        |L15.1426|
00022c  e16e              B        |L15.1292|
00022e  e14b              B        |L15.1224|
000230  e137              B        |L15.1186|
000232  e123              B        |L15.1148|
000234  e0ea              B        |L15.1036|
000236  e0d0              B        |L15.986|
000238  e0ca              B        |L15.976|
00023a  e0b4              B        |L15.934|
00023c  e0a9              B        |L15.914|
00023e  e08c              B        |L15.858|
000240  e073              B        |L15.810|
000242  e05d              B        |L15.768|
000244  e050              B        |L15.744|
000246  e038              B        |L15.698|
000248  e02b              B        |L15.674|
00024a  e01e              B        |L15.650|
00024c  e00a              B        |L15.612|
                  |L15.590|
00024e  f0400120          ORR      r1,r0,#0x20           ;1174
000252  2300              MOVS     r3,#0                 ;1174
000254  461a              MOV      r2,r3                 ;1174
000256  a804              ADD      r0,sp,#0x10           ;1174
000258  9600              STR      r6,[sp,#0]            ;1174
00025a  f7fffffe          BL       fill_data4_payload
00025e  9808              LDR      r0,[sp,#0x20]         ;1175
000260  7020              STRB     r0,[r4,#0]            ;1175
000262  e7bc              B        |L15.478|
                  |L15.612|
000264  2300              MOVS     r3,#0                 ;1191
000266  461a              MOV      r2,r3                 ;1191
000268  2114              MOVS     r1,#0x14              ;1191
00026a  a804              ADD      r0,sp,#0x10           ;1191
00026c  9600              STR      r6,[sp,#0]            ;1191
00026e  f7fffffe          BL       fill_data4_payload
000272  e9cd8600          STRD     r8,r6,[sp,#0]         ;1192
000276  2301              MOVS     r3,#1                 ;1192
000278  f2420201          MOV      r2,#0x2001            ;1192
00027c  2100              MOVS     r1,#0                 ;1192
00027e  2090              MOVS     r0,#0x90              ;1192
000280  f7fffffe          BL       drv_bq796xx_command_framing
000284  7027              STRB     r7,[r4,#0]            ;1194
000286  702f              STRB     r7,[r5,#0]            ;1195
                  |L15.648|
000288  e3d9              B        |L15.2622|
                  |L15.650|
00028a  485e              LDR      r0,|L15.1028|
00028c  f880c00f          STRB     r12,[r0,#0xf]         ;1198
000290  eb020182          ADD      r1,r2,r2,LSL #2       ;1199
000294  ebbc0f41          CMP      r12,r1,LSL #1         ;1199
000298  d300              BCC      |L15.668|
00029a  73c6              STRB     r6,[r0,#0xf]          ;1200
                  |L15.668|
00029c  7026              STRB     r6,[r4,#0]            ;1203
00029e  702f              STRB     r7,[r5,#0]            ;1204
                  |L15.672|
0002a0  e3cd              B        |L15.2622|
                  |L15.674|
0002a2  e9cd9600          STRD     r9,r6,[sp,#0]         ;1207
0002a6  2301              MOVS     r3,#1                 ;1207
0002a8  f44f7253          MOV      r2,#0x34c             ;1207
0002ac  2100              MOVS     r1,#0                 ;1207
0002ae  2090              MOVS     r0,#0x90              ;1207
0002b0  f7fffffe          BL       drv_bq796xx_command_framing
0002b4  7027              STRB     r7,[r4,#0]            ;1209
0002b6  702f              STRB     r7,[r5,#0]            ;1210
0002b8  e3c1              B        |L15.2622|
                  |L15.698|
0002ba  2300              MOVS     r3,#0                 ;1213
0002bc  4601              MOV      r1,r0                 ;1213
0002be  461a              MOV      r2,r3                 ;1213
0002c0  a804              ADD      r0,sp,#0x10           ;1213
0002c2  9600              STR      r6,[sp,#0]            ;1213
0002c4  f7fffffe          BL       fill_data4_payload
0002c8  e9cd8600          STRD     r8,r6,[sp,#0]         ;1214
0002cc  2301              MOVS     r3,#1                 ;1214
0002ce  f2403209          MOV      r2,#0x309             ;1214
0002d2  2100              MOVS     r1,#0                 ;1214
0002d4  20e0              MOVS     r0,#0xe0              ;1214
0002d6  f7fffffe          BL       drv_bq796xx_command_framing
0002da  484b              LDR      r0,|L15.1032|
0002dc  f880ad8b          STRB     r10,[r0,#0xd8b]       ;1216
0002e0  2002              MOVS     r0,#2                 ;1218
0002e2  7020              STRB     r0,[r4,#0]            ;1218
0002e4  702f              STRB     r7,[r5,#0]            ;1219
                  |L15.742|
0002e6  e3aa              B        |L15.2622|
                  |L15.744|
0002e8  e9cd9600          STRD     r9,r6,[sp,#0]         ;1222
0002ec  2301              MOVS     r3,#1                 ;1222
0002ee  f44f7253          MOV      r2,#0x34c             ;1222
0002f2  2100              MOVS     r1,#0                 ;1222
0002f4  20d0              MOVS     r0,#0xd0              ;1222
0002f6  f7fffffe          BL       drv_bq796xx_command_framing
0002fa  7027              STRB     r7,[r4,#0]            ;1224
0002fc  702f              STRB     r7,[r5,#0]            ;1225
0002fe  e39e              B        |L15.2622|
                  |L15.768|
000300  e9cd9600          STRD     r9,r6,[sp,#0]         ;1228
000304  46b0              MOV      r8,r6                 ;1228
000306  2301              MOVS     r3,#1                 ;1228
000308  4e3e              LDR      r6,|L15.1028|
00030a  2100              MOVS     r1,#0                 ;1228
00030c  20d0              MOVS     r0,#0xd0              ;1228
00030e  9a07              LDR      r2,[sp,#0x1c]         ;1228
000310  f7fffffe          BL       drv_bq796xx_command_framing
000314  7b30              LDRB     r0,[r6,#0xc]          ;1229  ; sub_step
000316  1c40              ADDS     r0,r0,#1              ;1229
000318  b2c0              UXTB     r0,r0                 ;1229
00031a  7330              STRB     r0,[r6,#0xc]          ;1229
00031c  7027              STRB     r7,[r4,#0]            ;1231
00031e  2808              CMP      r0,#8                 ;1233
000320  d3b2              BCC      |L15.648|
000322  f886800c          STRB     r8,[r6,#0xc]          ;1234
000326  702f              STRB     r7,[r5,#0]            ;1235
000328  e389              B        |L15.2622|
                  |L15.810|
00032a  f0400101          ORR      r1,r0,#1              ;1239
00032e  2300              MOVS     r3,#0                 ;1239
000330  f8df90d0          LDR      r9,|L15.1028|
000334  461a              MOV      r2,r3                 ;1239
000336  a804              ADD      r0,sp,#0x10           ;1239
000338  9600              STR      r6,[sp,#0]            ;1239
00033a  f7fffffe          BL       fill_data4_payload
00033e  e9cd8600          STRD     r8,r6,[sp,#0]         ;1240
000342  2301              MOVS     r3,#1                 ;1240
000344  f2403209          MOV      r2,#0x309             ;1240
000348  2100              MOVS     r1,#0                 ;1240
00034a  20d0              MOVS     r0,#0xd0              ;1240
00034c  f7fffffe          BL       drv_bq796xx_command_framing
000350  7027              STRB     r7,[r4,#0]            ;1242
000352  702f              STRB     r7,[r5,#0]            ;1243
000354  f889600c          STRB     r6,[r9,#0xc]          ;1244
000358  e371              B        |L15.2622|
                  |L15.858|
00035a  46b1              MOV      r9,r6                 ;1248
00035c  2300              MOVS     r3,#0                 ;1248
00035e  9600              STR      r6,[sp,#0]            ;1248
000360  461a              MOV      r2,r3                 ;1248
000362  4e28              LDR      r6,|L15.1028|
000364  a804              ADD      r0,sp,#0x10           ;1248
000366  f7fffffe          BL       fill_data4_payload
00036a  e9cd8900          STRD     r8,r9,[sp,#0]         ;1249
00036e  2301              MOVS     r3,#1                 ;1249
000370  8db2              LDRH     r2,[r6,#0x2c]         ;1249  ; dir_addr
000372  2100              MOVS     r1,#0                 ;1249
000374  20d0              MOVS     r0,#0xd0              ;1249
000376  f7fffffe          BL       drv_bq796xx_command_framing
00037a  7b30              LDRB     r0,[r6,#0xc]          ;1250  ; sub_step
00037c  1c40              ADDS     r0,r0,#1              ;1250
00037e  b2c0              UXTB     r0,r0                 ;1250
000380  7330              STRB     r0,[r6,#0xc]          ;1250
000382  7027              STRB     r7,[r4,#0]            ;1251
000384  7af1              LDRB     r1,[r6,#0xb]          ;1253  ; top_no
000386  4288              CMP      r0,r1                 ;1253
000388  d98a              BLS      |L15.672|
00038a  f886900c          STRB     r9,[r6,#0xc]          ;1254
00038e  702f              STRB     r7,[r5,#0]            ;1255
                  |L15.912|
000390  e355              B        |L15.2622|
                  |L15.914|
000392  481c              LDR      r0,|L15.1028|
000394  f880c00f          STRB     r12,[r0,#0xf]         ;1259
000398  f1bc0f0a          CMP      r12,#0xa              ;1260
00039c  d300              BCC      |L15.928|
00039e  73c6              STRB     r6,[r0,#0xf]          ;1261
                  |L15.928|
0003a0  7026              STRB     r6,[r4,#0]            ;1264
0003a2  702f              STRB     r7,[r5,#0]            ;1265
0003a4  e34b              B        |L15.2622|
                  |L15.934|
0003a6  e9cd9600          STRD     r9,r6,[sp,#0]         ;1268
0003aa  46b0              MOV      r8,r6                 ;1268
0003ac  2301              MOVS     r3,#1                 ;1268
0003ae  4e15              LDR      r6,|L15.1028|
0003b0  2100              MOVS     r1,#0                 ;1268
0003b2  20c0              MOVS     r0,#0xc0              ;1268
0003b4  9a07              LDR      r2,[sp,#0x1c]         ;1268
0003b6  f7fffffe          BL       drv_bq796xx_command_framing
0003ba  7b30              LDRB     r0,[r6,#0xc]          ;1269  ; sub_step
0003bc  1c40              ADDS     r0,r0,#1              ;1269
0003be  b2c0              UXTB     r0,r0                 ;1269
0003c0  7330              STRB     r0,[r6,#0xc]          ;1269
0003c2  7027              STRB     r7,[r4,#0]            ;1271
0003c4  2808              CMP      r0,#8                 ;1273
0003c6  d38e              BCC      |L15.742|
0003c8  f886800c          STRB     r8,[r6,#0xc]          ;1274
0003cc  702f              STRB     r7,[r5,#0]            ;1275
0003ce  e336              B        |L15.2622|
                  |L15.976|
0003d0  480c              LDR      r0,|L15.1028|
0003d2  7307              STRB     r7,[r0,#0xc]          ;1279
0003d4  7026              STRB     r6,[r4,#0]            ;1280
0003d6  702f              STRB     r7,[r5,#0]            ;1281
0003d8  e331              B        |L15.2622|
                  |L15.986|
0003da  2300              MOVS     r3,#0                 ;1284
0003dc  461a              MOV      r2,r3                 ;1284
0003de  2102              MOVS     r1,#2                 ;1284
0003e0  a804              ADD      r0,sp,#0x10           ;1284
0003e2  9600              STR      r6,[sp,#0]            ;1284
0003e4  f7fffffe          BL       fill_data4_payload
0003e8  e9cd8600          STRD     r8,r6,[sp,#0]         ;1285
0003ec  2301              MOVS     r3,#1                 ;1285
0003ee  f44f7242          MOV      r2,#0x308             ;1285
0003f2  2100              MOVS     r1,#0                 ;1285
0003f4  20d0              MOVS     r0,#0xd0              ;1285
0003f6  f7fffffe          BL       drv_bq796xx_command_framing
0003fa  7027              STRB     r7,[r4,#0]            ;1286
0003fc  702f              STRB     r7,[r5,#0]            ;1287
0003fe  4801              LDR      r0,|L15.1028|
000400  7486              STRB     r6,[r0,#0x12]         ;1289
000402  e31c              B        |L15.2622|
                  |L15.1028|
                          DCD      ||.data||
                  |L15.1032|
                          DCD      ||area_number.59||+0x86
                  |L15.1036|
00040c  46b8              MOV      r8,r7                 ;1293
00040e  7027              STRB     r7,[r4,#0]            ;1293
000410  4ff7              LDR      r7,|L15.2032|
000412  9806              LDR      r0,[sp,#0x18]         ;1294
000414  b128              CBZ      r0,|L15.1058|
000416  f7fffffe          BL       drv_bq796xx_check_respone_event2
00041a  b180              CBZ      r0,|L15.1086|
00041c  2801              CMP      r0,#1                 ;1313
00041e  d01e              BEQ      |L15.1118|
000420  e021              B        |L15.1126|
                  |L15.1058|
000422  7279              STRB     r1,[r7,#9]            ;1295
000424  f7fffffe          BL       drv_bq796xx_clear_fifobuffer
000428  e9cd9600          STRD     r9,r6,[sp,#0]         ;1297
00042c  2301              MOVS     r3,#1                 ;1297
00042e  8dba              LDRH     r2,[r7,#0x2c]         ;1297  ; dir_addr
000430  7a79              LDRB     r1,[r7,#9]            ;1297  ; bmu_cnt
000432  2080              MOVS     r0,#0x80              ;1297
000434  f7fffffe          BL       drv_bq796xx_command_framing
000438  f887800d          STRB     r8,[r7,#0xd]          ;1298
00043c  e013              B        |L15.1126|
                  |L15.1086|
00043e  7cb8              LDRB     r0,[r7,#0x12]         ;1303  ; retry_cnt
000440  1c40              ADDS     r0,r0,#1              ;1303
000442  b2c0              UXTB     r0,r0                 ;1303
000444  74b8              STRB     r0,[r7,#0x12]         ;1303
000446  b140              CBZ      r0,|L15.1114|
000448  74be              STRB     r6,[r7,#0x12]         ;1307
00044a  7af8              LDRB     r0,[r7,#0xb]          ;1308  ; top_no
00044c  1c40              ADDS     r0,r0,#1              ;1308
00044e  7338              STRB     r0,[r7,#0xc]          ;1308
000450  7a78              LDRB     r0,[r7,#9]            ;1309  ; bmu_cnt
000452  b140              CBZ      r0,|L15.1126|
000454  1e40              SUBS     r0,r0,#1              ;1310
000456  7278              STRB     r0,[r7,#9]            ;1310
000458  e005              B        |L15.1126|
                  |L15.1114|
00045a  737e              STRB     r6,[r7,#0xd]          ;1305
00045c  e003              B        |L15.1126|
                  |L15.1118|
00045e  737e              STRB     r6,[r7,#0xd]          ;1314
000460  7b38              LDRB     r0,[r7,#0xc]          ;1315  ; sub_step
000462  1c40              ADDS     r0,r0,#1              ;1315
000464  7338              STRB     r0,[r7,#0xc]          ;1315
                  |L15.1126|
000466  7b38              LDRB     r0,[r7,#0xc]          ;1320  ; sub_step
000468  7af9              LDRB     r1,[r7,#0xb]          ;1320  ; top_no
00046a  4288              CMP      r0,r1                 ;1320
00046c  d990              BLS      |L15.912|
00046e  737e              STRB     r6,[r7,#0xd]          ;1321
000470  733e              STRB     r6,[r7,#0xc]          ;1322
000472  f8848000          STRB     r8,[r4,#0]            ;1323
000476  f8858000          STRB     r8,[r5,#0]            ;1324
00047a  e2e0              B        |L15.2622|
                  |L15.1148|
00047c  2300              MOVS     r3,#0                 ;1328
00047e  461a              MOV      r2,r3                 ;1328
000480  2102              MOVS     r1,#2                 ;1328
000482  a804              ADD      r0,sp,#0x10           ;1328
000484  9600              STR      r6,[sp,#0]            ;1328
000486  f7fffffe          BL       fill_data4_payload
00048a  e9cd8600          STRD     r8,r6,[sp,#0]         ;1329
00048e  2301              MOVS     r3,#1                 ;1329
000490  f44f7242          MOV      r2,#0x308             ;1329
000494  2100              MOVS     r1,#0                 ;1329
000496  20d0              MOVS     r0,#0xd0              ;1329
000498  f7fffffe          BL       drv_bq796xx_command_framing
00049c  7027              STRB     r7,[r4,#0]            ;1331
00049e  702f              STRB     r7,[r5,#0]            ;1332
                  |L15.1184|
0004a0  e2cd              B        |L15.2622|
                  |L15.1186|
0004a2  2300              MOVS     r3,#0                 ;1335
0004a4  461a              MOV      r2,r3                 ;1335
0004a6  4619              MOV      r1,r3                 ;1335
0004a8  a804              ADD      r0,sp,#0x10           ;1335
0004aa  9600              STR      r6,[sp,#0]            ;1335
0004ac  f7fffffe          BL       fill_data4_payload
0004b0  e9cd8600          STRD     r8,r6,[sp,#0]         ;1336
0004b4  2301              MOVS     r3,#1                 ;1336
0004b6  f44f7242          MOV      r2,#0x308             ;1336
0004ba  2100              MOVS     r1,#0                 ;1336
0004bc  2090              MOVS     r0,#0x90              ;1336
0004be  f7fffffe          BL       drv_bq796xx_command_framing
0004c2  7027              STRB     r7,[r4,#0]            ;1338
0004c4  702f              STRB     r7,[r5,#0]            ;1339
0004c6  e2ba              B        |L15.2622|
                  |L15.1224|
0004c8  9805              LDR      r0,[sp,#0x14]         ;1342
0004ca  f8df9324          LDR      r9,|L15.2032|
0004ce  4290              CMP      r0,r2                 ;1342
0004d0  d901              BLS      |L15.1238|
0004d2  f8892009          STRB     r2,[r9,#9]            ;1343
                  |L15.1238|
0004d6  f8990009          LDRB     r0,[r9,#9]            ;1346  ; bmu_cnt
0004da  b180              CBZ      r0,|L15.1278|
0004dc  2300              MOVS     r3,#0                 ;1347
0004de  461a              MOV      r2,r3                 ;1347
0004e0  2103              MOVS     r1,#3                 ;1347
0004e2  a804              ADD      r0,sp,#0x10           ;1347
0004e4  9600              STR      r6,[sp,#0]            ;1347
0004e6  f7fffffe          BL       fill_data4_payload
0004ea  e9cd8600          STRD     r8,r6,[sp,#0]         ;1348
0004ee  2301              MOVS     r3,#1                 ;1348
0004f0  f44f7242          MOV      r2,#0x308             ;1348
0004f4  f8991009          LDRB     r1,[r9,#9]            ;1348  ; bmu_cnt
0004f8  2090              MOVS     r0,#0x90              ;1348
0004fa  f7fffffe          BL       drv_bq796xx_command_framing
                  |L15.1278|
0004fe  7027              STRB     r7,[r4,#0]            ;1350
000500  702f              STRB     r7,[r5,#0]            ;1351
000502  f889600d          STRB     r6,[r9,#0xd]          ;1352
000506  f889600c          STRB     r6,[r9,#0xc]          ;1353
00050a  e298              B        |L15.2622|
                  |L15.1292|
00050c  46b9              MOV      r9,r7                 ;1357
00050e  7027              STRB     r7,[r4,#0]            ;1357
000510  4fb7              LDR      r7,|L15.2032|
000512  9806              LDR      r0,[sp,#0x18]         ;1358
000514  b140              CBZ      r0,|L15.1320|
000516  f7fffffe          BL       drv_bq796xx_data_frame_parser
00051a  7b39              LDRB     r1,[r7,#0xc]          ;1365  ; sub_step
00051c  1c49              ADDS     r1,r1,#1              ;1365
00051e  b2c9              UXTB     r1,r1                 ;1365
000520  7339              STRB     r1,[r7,#0xc]          ;1365
000522  2801              CMP      r0,#1                 ;1366
000524  d012              BEQ      |L15.1356|
000526  e02a              B        |L15.1406|
                  |L15.1320|
000528  2300              MOVS     r3,#0                 ;1359
00052a  461a              MOV      r2,r3                 ;1359
00052c  4619              MOV      r1,r3                 ;1359
00052e  a804              ADD      r0,sp,#0x10           ;1359
000530  9600              STR      r6,[sp,#0]            ;1359
000532  f7fffffe          BL       fill_data4_payload
000536  e9cd8600          STRD     r8,r6,[sp,#0]         ;1360
00053a  2301              MOVS     r3,#1                 ;1360
00053c  2203              MOVS     r2,#3                 ;1360
00053e  7a79              LDRB     r1,[r7,#9]            ;1360  ; bmu_cnt
000540  2080              MOVS     r0,#0x80              ;1360
000542  f7fffffe          BL       drv_bq796xx_command_framing
000546  f887900d          STRB     r9,[r7,#0xd]          ;1361
00054a  e018              B        |L15.1406|
                  |L15.1356|
00054c  1c49              ADDS     r1,r1,#1              ;1367
00054e  7339              STRB     r1,[r7,#0xc]          ;1367
000550  f1ba0f00          CMP      r10,#0                ;1368
000554  d005              BEQ      |L15.1378|
000556  48a7              LDR      r0,|L15.2036|
000558  f8900d8e          LDRB     r0,[r0,#0xd8e]        ;1373  ; bq796xx_data
00055c  2880              CMP      r0,#0x80              ;1373
00055e  d008              BEQ      |L15.1394|
000560  e009              B        |L15.1398|
                  |L15.1378|
000562  48a4              LDR      r0,|L15.2036|
000564  f8900d8e          LDRB     r0,[r0,#0xd8e]        ;1369  ; bq796xx_data
000568  2840              CMP      r0,#0x40              ;1369
00056a  d104              BNE      |L15.1398|
00056c  2080              MOVS     r0,#0x80              ;1370
00056e  73b8              STRB     r0,[r7,#0xe]          ;1370
000570  e001              B        |L15.1398|
                  |L15.1394|
000572  2080              MOVS     r0,#0x80              ;1374
000574  73b8              STRB     r0,[r7,#0xe]          ;1374
                  |L15.1398|
000576  7a78              LDRB     r0,[r7,#9]            ;1378  ; bmu_cnt
000578  7bb9              LDRB     r1,[r7,#0xe]          ;1378  ; is_ring
00057a  4308              ORRS     r0,r0,r1              ;1378
00057c  7278              STRB     r0,[r7,#9]            ;1378
                  |L15.1406|
00057e  7b38              LDRB     r0,[r7,#0xc]          ;1383  ; sub_step
000580  2800              CMP      r0,#0                 ;1383
000582  d08d              BEQ      |L15.1184|
000584  737e              STRB     r6,[r7,#0xd]          ;1384
000586  733e              STRB     r6,[r7,#0xc]          ;1385
000588  f8849000          STRB     r9,[r4,#0]            ;1386
00058c  f8859000          STRB     r9,[r5,#0]            ;1387
000590  e255              B        |L15.2622|
                  |L15.1426|
000592  f8df925c          LDR      r9,|L15.2032|
000596  9805              LDR      r0,[sp,#0x14]         ;1391
000598  b188              CBZ      r0,|L15.1470|
00059a  f1ba0f00          CMP      r10,#0                ;1392
00059e  d015              BEQ      |L15.1484|
0005a0  2300              MOVS     r3,#0                 ;1395
0005a2  461a              MOV      r2,r3                 ;1395
0005a4  214a              MOVS     r1,#0x4a              ;1395
0005a6  a804              ADD      r0,sp,#0x10           ;1395
0005a8  9600              STR      r6,[sp,#0]            ;1395
0005aa  f7fffffe          BL       fill_data4_payload
                  |L15.1454|
0005ae  e9cd8600          STRD     r8,r6,[sp,#0]         ;1396
0005b2  2301              MOVS     r3,#1                 ;1396
0005b4  2203              MOVS     r2,#3                 ;1396
0005b6  2100              MOVS     r1,#0                 ;1396
0005b8  20b0              MOVS     r0,#0xb0              ;1396
0005ba  f7fffffe          BL       drv_bq796xx_command_framing
                  |L15.1470|
0005be  7027              STRB     r7,[r4,#0]            ;1399
0005c0  702f              STRB     r7,[r5,#0]            ;1400
0005c2  f889600d          STRB     r6,[r9,#0xd]          ;1401
0005c6  f889600c          STRB     r6,[r9,#0xc]          ;1402
0005ca  e238              B        |L15.2622|
                  |L15.1484|
0005cc  2300              MOVS     r3,#0                 ;1393
0005ce  461a              MOV      r2,r3                 ;1393
0005d0  218a              MOVS     r1,#0x8a              ;1393
0005d2  a804              ADD      r0,sp,#0x10           ;1393
0005d4  9600              STR      r6,[sp,#0]            ;1393
0005d6  f7fffffe          BL       fill_data4_payload
0005da  e7e8              B        |L15.1454|
                  |L15.1500|
0005dc  2300              MOVS     r3,#0                 ;1405
0005de  461a              MOV      r2,r3                 ;1405
0005e0  21ff              MOVS     r1,#0xff              ;1405
0005e2  a804              ADD      r0,sp,#0x10           ;1405
0005e4  9600              STR      r6,[sp,#0]            ;1405
0005e6  f7fffffe          BL       fill_data4_payload
0005ea  e9cd8600          STRD     r8,r6,[sp,#0]         ;1406
0005ee  2301              MOVS     r3,#1                 ;1406
0005f0  f2403231          MOV      r2,#0x331             ;1406
0005f4  2100              MOVS     r1,#0                 ;1406
0005f6  20d0              MOVS     r0,#0xd0              ;1406
0005f8  f7fffffe          BL       drv_bq796xx_command_framing
0005fc  7027              STRB     r7,[r4,#0]            ;1407
0005fe  702f              STRB     r7,[r5,#0]            ;1408
000600  e21d              B        |L15.2622|
                  |L15.1538|
000602  2300              MOVS     r3,#0                 ;1411
000604  461a              MOV      r2,r3                 ;1411
000606  21ff              MOVS     r1,#0xff              ;1411
000608  a804              ADD      r0,sp,#0x10           ;1411
00060a  9600              STR      r6,[sp,#0]            ;1411
00060c  f7fffffe          BL       fill_data4_payload
000610  e9cd8600          STRD     r8,r6,[sp,#0]         ;1412
000614  2301              MOVS     r3,#1                 ;1412
000616  f2403232          MOV      r2,#0x332             ;1412
00061a  2100              MOVS     r1,#0                 ;1412
00061c  20d0              MOVS     r0,#0xd0              ;1412
00061e  f7fffffe          BL       drv_bq796xx_command_framing
000622  7027              STRB     r7,[r4,#0]            ;1413
000624  702f              STRB     r7,[r5,#0]            ;1414
000626  e20a              B        |L15.2622|
                  |L15.1576|
000628  2300              MOVS     r3,#0                 ;1417
00062a  461a              MOV      r2,r3                 ;1417
00062c  2122              MOVS     r1,#0x22              ;1417
00062e  a804              ADD      r0,sp,#0x10           ;1417
000630  9600              STR      r6,[sp,#0]            ;1417
000632  f7fffffe          BL       fill_data4_payload
000636  e9cd8600          STRD     r8,r6,[sp,#0]         ;1418
00063a  2301              MOVS     r3,#1                 ;1418
00063c  f2420230          MOV      r2,#0x2030            ;1418
000640  2100              MOVS     r1,#0                 ;1418
000642  2090              MOVS     r0,#0x90              ;1418
000644  f7fffffe          BL       drv_bq796xx_command_framing
000648  7027              STRB     r7,[r4,#0]            ;1419
00064a  702f              STRB     r7,[r5,#0]            ;1420
00064c  e1f7              B        |L15.2622|
                  |L15.1614|
00064e  e9cd9600          STRD     r9,r6,[sp,#0]         ;1423
000652  2301              MOVS     r3,#1                 ;1423
000654  2213              MOVS     r2,#0x13              ;1423
000656  2100              MOVS     r1,#0                 ;1423
000658  20b0              MOVS     r0,#0xb0              ;1423
00065a  f7fffffe          BL       drv_bq796xx_command_framing
00065e  7027              STRB     r7,[r4,#0]            ;1424
000660  702f              STRB     r7,[r5,#0]            ;1425
000662  e1ec              B        |L15.2622|
                  |L15.1636|
000664  e9cd9600          STRD     r9,r6,[sp,#0]         ;1428
000668  2301              MOVS     r3,#1                 ;1428
00066a  f2420205          MOV      r2,#0x2005            ;1428
00066e  2100              MOVS     r1,#0                 ;1428
000670  2090              MOVS     r0,#0x90              ;1428
000672  f7fffffe          BL       drv_bq796xx_command_framing
000676  7027              STRB     r7,[r4,#0]            ;1429
000678  702f              STRB     r7,[r5,#0]            ;1430
00067a  e1e0              B        |L15.2622|
                  |L15.1660|
00067c  7027              STRB     r7,[r4,#0]            ;1433
00067e  702f              STRB     r7,[r5,#0]            ;1434
000680  e1dd              B        |L15.2622|
                  |L15.1666|
000682  2300              MOVS     r3,#0                 ;1437
000684  461a              MOV      r2,r3                 ;1437
000686  2101              MOVS     r1,#1                 ;1437
000688  a804              ADD      r0,sp,#0x10           ;1437
00068a  9600              STR      r6,[sp,#0]            ;1437
00068c  f7fffffe          BL       fill_data4_payload
000690  e9cd8600          STRD     r8,r6,[sp,#0]         ;1438
000694  2301              MOVS     r3,#1                 ;1438
000696  f240320a          MOV      r2,#0x30a             ;1438
00069a  2100              MOVS     r1,#0                 ;1438
00069c  20b0              MOVS     r0,#0xb0              ;1438
00069e  f7fffffe          BL       drv_bq796xx_command_framing
0006a2  7027              STRB     r7,[r4,#0]            ;1439
0006a4  702f              STRB     r7,[r5,#0]            ;1440
0006a6  e1ca              B        |L15.2622|
                  |L15.1704|
0006a8  2300              MOVS     r3,#0                 ;1443
0006aa  461a              MOV      r2,r3                 ;1443
0006ac  2103              MOVS     r1,#3                 ;1443
0006ae  a804              ADD      r0,sp,#0x10           ;1443
0006b0  9600              STR      r6,[sp,#0]            ;1443
0006b2  f7fffffe          BL       fill_data4_payload
0006b6  e9cd8600          STRD     r8,r6,[sp,#0]         ;1444
0006ba  2301              MOVS     r3,#1                 ;1444
0006bc  2207              MOVS     r2,#7                 ;1444
0006be  2100              MOVS     r1,#0                 ;1444
0006c0  20d0              MOVS     r0,#0xd0              ;1444
0006c2  f7fffffe          BL       drv_bq796xx_command_framing
0006c6  7027              STRB     r7,[r4,#0]            ;1445
0006c8  702f              STRB     r7,[r5,#0]            ;1446
                  |L15.1738|
0006ca  e1b8              B        |L15.2622|
                  |L15.1740|
0006cc  2300              MOVS     r3,#0                 ;1449
0006ce  461a              MOV      r2,r3                 ;1449
0006d0  211e              MOVS     r1,#0x1e              ;1449
0006d2  a804              ADD      r0,sp,#0x10           ;1449
0006d4  9600              STR      r6,[sp,#0]            ;1449
0006d6  f7fffffe          BL       fill_data4_payload
0006da  e9cd8600          STRD     r8,r6,[sp,#0]         ;1450
0006de  2301              MOVS     r3,#1                 ;1450
0006e0  f240320d          MOV      r2,#0x30d             ;1450
0006e4  2100              MOVS     r1,#0                 ;1450
0006e6  20b0              MOVS     r0,#0xb0              ;1450
0006e8  f7fffffe          BL       drv_bq796xx_command_framing
0006ec  4840              LDR      r0,|L15.2032|
0006ee  7a40              LDRB     r0,[r0,#9]            ;1452  ; bmu_cnt
0006f0  eb000080          ADD      r0,r0,r0,LSL #2       ;1452
0006f4  3026              ADDS     r0,r0,#0x26           ;1452
0006f6  7020              STRB     r0,[r4,#0]            ;1452
0006f8  702f              STRB     r7,[r5,#0]            ;1453
0006fa  e1a0              B        |L15.2622|
                  |L15.1788|
0006fc  2300              MOVS     r3,#0                 ;1456
0006fe  461a              MOV      r2,r3                 ;1456
000700  210d              MOVS     r1,#0xd               ;1456
000702  a804              ADD      r0,sp,#0x10           ;1456
000704  9600              STR      r6,[sp,#0]            ;1456
000706  f7fffffe          BL       fill_data4_payload
00070a  e9cd8600          STRD     r8,r6,[sp,#0]         ;1457
00070e  2301              MOVS     r3,#1                 ;1457
000710  2219              MOVS     r2,#0x19              ;1457
000712  2100              MOVS     r1,#0                 ;1457
000714  20b0              MOVS     r0,#0xb0              ;1457
000716  f7fffffe          BL       drv_bq796xx_command_framing
00071a  7027              STRB     r7,[r4,#0]            ;1458
00071c  702f              STRB     r7,[r5,#0]            ;1459
00071e  e18e              B        |L15.2622|
                  |L15.1824|
000720  2000              MOVS     r0,#0                 ;1462
000722  f7fffffe          BL       drv_bq796xx_Set_BroadCast_Mask_FaultAll
000726  2014              MOVS     r0,#0x14              ;1464
000728  7020              STRB     r0,[r4,#0]            ;1464
00072a  702f              STRB     r7,[r5,#0]            ;1465
00072c  4830              LDR      r0,|L15.2032|
00072e  7306              STRB     r6,[r0,#0xc]          ;1466
000730  e185              B        |L15.2622|
                  |L15.1842|
000732  2300              MOVS     r3,#0                 ;1469
000734  461a              MOV      r2,r3                 ;1469
000736  21df              MOVS     r1,#0xdf              ;1469
000738  a804              ADD      r0,sp,#0x10           ;1469
00073a  9600              STR      r6,[sp,#0]            ;1469
00073c  f7fffffe          BL       fill_data4_payload
000740  e9cd8600          STRD     r8,r6,[sp,#0]         ;1470
000744  2301              MOVS     r3,#1                 ;1470
000746  f2420220          MOV      r2,#0x2020            ;1470
00074a  2100              MOVS     r1,#0                 ;1470
00074c  2090              MOVS     r0,#0x90              ;1470
00074e  f7fffffe          BL       drv_bq796xx_command_framing
000752  7027              STRB     r7,[r4,#0]            ;1472
000754  702f              STRB     r7,[r5,#0]            ;1473
000756  4826              LDR      r0,|L15.2032|
000758  7306              STRB     r6,[r0,#0xc]          ;1474
                  |L15.1882|
00075a  2014              MOVS     r0,#0x14              ;1476
00075c  7020              STRB     r0,[r4,#0]            ;1476
00075e  22ff              MOVS     r2,#0xff              ;1478
000760  2300              MOVS     r3,#0                 ;1478
000762  4611              MOV      r1,r2                 ;1478
000764  a804              ADD      r0,sp,#0x10           ;1478
000766  9600              STR      r6,[sp,#0]            ;1478
000768  f7fffffe          BL       fill_data4_payload
00076c  f8df9080          LDR      r9,|L15.2032|
000770  f899000c          LDRB     r0,[r9,#0xc]          ;1479  ; sub_step
000774  b110              CBZ      r0,|L15.1916|
000776  2801              CMP      r0,#1                 ;1479
000778  d113              BNE      |L15.1954|
00077a  e009              B        |L15.1936|
                  |L15.1916|
00077c  e9cd8600          STRD     r8,r6,[sp,#0]         ;1481
000780  2302              MOVS     r3,#2                 ;1481
000782  f2403231          MOV      r2,#0x331             ;1481
000786  2100              MOVS     r1,#0                 ;1481
000788  20b0              MOVS     r0,#0xb0              ;1481
00078a  f7fffffe          BL       drv_bq796xx_command_framing
00078e  e008              B        |L15.1954|
                  |L15.1936|
000790  e9cd8600          STRD     r8,r6,[sp,#0]         ;1484
000794  2301              MOVS     r3,#1                 ;1484
000796  f2420230          MOV      r2,#0x2030            ;1484
00079a  2100              MOVS     r1,#0                 ;1484
00079c  2090              MOVS     r0,#0x90              ;1484
00079e  f7fffffe          BL       drv_bq796xx_command_framing
                  |L15.1954|
0007a2  20ff              MOVS     r0,#0xff              ;1488
0007a4  f8890002          STRB     r0,[r9,#2]            ;1488
0007a8  f899000c          LDRB     r0,[r9,#0xc]          ;1490  ; sub_step
0007ac  1c40              ADDS     r0,r0,#1              ;1490
0007ae  b2c0              UXTB     r0,r0                 ;1490
0007b0  f889000c          STRB     r0,[r9,#0xc]          ;1490
0007b4  2802              CMP      r0,#2                 ;1492
0007b6  d388              BCC      |L15.1738|
0007b8  7027              STRB     r7,[r4,#0]            ;1493
0007ba  702f              STRB     r7,[r5,#0]            ;1494
0007bc  f889600c          STRB     r6,[r9,#0xc]          ;1495
0007c0  e13d              B        |L15.2622|
                  |L15.1986|
0007c2  7027              STRB     r7,[r4,#0]            ;1499
0007c4  f8df8028          LDR      r8,|L15.2032|
0007c8  2905              CMP      r1,#5                 ;1501
0007ca  d223              BCS      |L15.2068|
0007cc  e8dff001          TBB      [pc,r1]               ;1501
0007d0  0309141a          DCB      0x03,0x09,0x14,0x1a
0007d4  1f00              DCB      0x1f,0x00
0007d6  2200              MOVS     r2,#0                 ;1503
0007d8  4611              MOV      r1,r2                 ;1503
0007da  2001              MOVS     r0,#1                 ;1503
0007dc  f7fffffe          BL       drv_bq796xx_Set_Mask_FaultAll
0007e0  e018              B        |L15.2068|
0007e2  2200              MOVS     r2,#0                 ;1506
0007e4  4611              MOV      r1,r2                 ;1506
0007e6  2001              MOVS     r0,#1                 ;1506
0007e8  f7fffffe          BL       drv_bq796xx_Clear_Mask_Fault_OVUV
0007ec  e012              B        |L15.2068|
0007ee  0000              DCW      0x0000
                  |L15.2032|
                          DCD      ||.data||
                  |L15.2036|
                          DCD      ||area_number.59||+0x86
0007f8  7859              LDRB     r1,[r3,#1]  ; bq796xx_default
0007fa  7818              LDRB     r0,[r3,#0]  ; bq796xx_default
0007fc  2200              MOVS     r2,#0
0007fe  f7fffffe          BL       drv_bq796xx_Set_Stack_OV
;;;1510                       break;
000802  e007              B        |L15.2068|
;;;1511   								case 3:
;;;1512   								    drv_bq796xx_Set_Stack_UV(bq796xx_default.uv_threshold,0);	
000804  7898              LDRB     r0,[r3,#2]  ; bq796xx_default
000806  2100              MOVS     r1,#0
000808  f7fffffe          BL       drv_bq796xx_Set_Stack_UV
;;;1513                       break;
00080c  e002              B        |L15.2068|
;;;1514   								case 4:								
;;;1515   						    		drv_bq796xx_Run_OVUV(0);
00080e  2000              MOVS     r0,#0
000810  f7fffffe          BL       drv_bq796xx_Run_OVUV
                  |L15.2068|
;;;1516   								    break;
;;;1517   						}
;;;1518   						
;;;1519   						++sub_step;
000814  f898000c          LDRB     r0,[r8,#0xc]  ; sub_step
000818  1c40              ADDS     r0,r0,#1
00081a  b2c0              UXTB     r0,r0
00081c  f888000c          STRB     r0,[r8,#0xc]
;;;1520   						
;;;1521   						if(sub_step>=5){
000820  2805              CMP      r0,#5
000822  d303              BCC      |L15.2092|
;;;1522   						    sub_step = 0;
000824  f888600c          STRB     r6,[r8,#0xc]
;;;1523   						    *before_delay_ms = 1;
000828  7027              STRB     r7,[r4,#0]
;;;1524   						    *step_complete_f = 1;
00082a  702f              STRB     r7,[r5,#0]
                  |L15.2092|
00082c  e107              B        |L15.2622|
                  |L15.2094|
;;;1525   						}				 
;;;1526               break;			 
;;;1527          case AFE_INIT_SET_RUN_OTUT_FUNC:	//STACK Write, use OTUT thresh + start OTUT
;;;1528   				    *before_delay_ms = 1; 
00082e  7027              STRB     r7,[r4,#0]
;;;1529   			 
;;;1530   	          switch(sub_step){				 
000830  f8df8214          LDR      r8,|L15.2632|
000834  b131              CBZ      r1,|L15.2116|
000836  2901              CMP      r1,#1
000838  d00a              BEQ      |L15.2128|
00083a  2902              CMP      r1,#2
00083c  d00e              BEQ      |L15.2140|
00083e  2903              CMP      r1,#3
000840  d114              BNE      |L15.2156|
000842  e010              B        |L15.2150|
                  |L15.2116|
;;;1531   							case 0:
;;;1532   							    drv_bq796xx_Clear_Mask_Fault_OTUT(STACK, 0,0);
000844  2200              MOVS     r2,#0
000846  4611              MOV      r1,r2
000848  2001              MOVS     r0,#1
00084a  f7fffffe          BL       drv_bq796xx_Clear_Mask_Fault_OTUT
;;;1533   	                break;
00084e  e00d              B        |L15.2156|
                  |L15.2128|
;;;1534   							case 1:
;;;1535   							    drv_bq796xx_Set_Stack_OTUT(bq796xx_default.ot_threshold, bq796xx_default.ut_threshold,0);
000850  7919              LDRB     r1,[r3,#4]  ; bq796xx_default
000852  78d8              LDRB     r0,[r3,#3]  ; bq796xx_default
000854  2200              MOVS     r2,#0
000856  f7fffffe          BL       drv_bq796xx_Set_Stack_OTUT
;;;1536   	                break;
00085a  e007              B        |L15.2156|
                  |L15.2140|
;;;1537   							case 2:
;;;1538   							    drv_bq796xx_Set_Stack_OTUT_Associate(AFE_GPIO1,0);
00085c  2100              MOVS     r1,#0
00085e  4608              MOV      r0,r1
000860  f7fffffe          BL       drv_bq796xx_Set_Stack_OTUT_Associate
;;;1539   	                break;
000864  e002              B        |L15.2156|
                  |L15.2150|
;;;1540   							case 3:
;;;1541   							    drv_bq796xx_Run_OTUT(0);
000866  2000              MOVS     r0,#0
000868  f7fffffe          BL       drv_bq796xx_Run_OTUT
                  |L15.2156|
;;;1542   							    break;
;;;1543   						}
;;;1544   
;;;1545   						++sub_step;
00086c  f898000c          LDRB     r0,[r8,#0xc]  ; sub_step
000870  1c40              ADDS     r0,r0,#1
000872  b2c0              UXTB     r0,r0
000874  f888000c          STRB     r0,[r8,#0xc]
;;;1546   						
;;;1547   					  if(sub_step>=4){
000878  2804              CMP      r0,#4
00087a  d305              BCC      |L15.2184|
;;;1548   						    sub_step = 0;
00087c  f888600c          STRB     r6,[r8,#0xc]
;;;1549   						    *before_delay_ms = 1;
000880  7027              STRB     r7,[r4,#0]
;;;1550   						    *step_complete_f = 1;
000882  702f              STRB     r7,[r5,#0]
;;;1551   							  cell_cnt = 0;
000884  f8886010          STRB     r6,[r8,#0x10]
                  |L15.2184|
000888  e0d9              B        |L15.2622|
                  |L15.2186|
;;;1552   					 }						
;;;1553   		       break;				
;;;1554   			case AFE_INIT_SET_CELL_BALANCE_FUNC_DISABLE:  //Disable Cell balance
;;;1555   				    *before_delay_ms = 1; 
00088a  46b9              MOV      r9,r7
00088c  7027              STRB     r7,[r4,#0]
;;;1556   			 
;;;1557   	          switch(sub_step){				 
00088e  4f6e              LDR      r7,|L15.2632|
000890  b121              CBZ      r1,|L15.2204|
000892  2901              CMP      r1,#1
000894  d01e              BEQ      |L15.2260|
000896  2902              CMP      r1,#2
000898  d136              BNE      |L15.2312|
00089a  e023              B        |L15.2276|
                  |L15.2204|
;;;1558   						    case 0:				
;;;1559                       fill_data4_payload(d_payload, 0,0,0,0); 
00089c  2300              MOVS     r3,#0
00089e  461a              MOV      r2,r3
0008a0  4619              MOV      r1,r3
0008a2  a804              ADD      r0,sp,#0x10
0008a4  9600              STR      r6,[sp,#0]
0008a6  f7fffffe          BL       fill_data4_payload
;;;1560                       drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_CB_CELL01_CTRL-cell_cnt,1, d_payload, 0);
0008aa  e9cd8600          STRD     r8,r6,[sp,#0]
0008ae  7c38              LDRB     r0,[r7,#0x10]  ; cell_cnt
0008b0  2301              MOVS     r3,#1
0008b2  f2a03027          SUB      r0,r0,#0x327
0008b6  4242              RSBS     r2,r0,#0
0008b8  2100              MOVS     r1,#0
0008ba  20b0              MOVS     r0,#0xb0
0008bc  f7fffffe          BL       drv_bq796xx_command_framing
;;;1561   							      ++cell_cnt;
0008c0  7c38              LDRB     r0,[r7,#0x10]  ; cell_cnt
0008c2  1c40              ADDS     r0,r0,#1
0008c4  b2c0              UXTB     r0,r0
0008c6  7438              STRB     r0,[r7,#0x10]
;;;1562     
;;;1563   								    if(cell_cnt >= BMU_CELL_SERIES){
0008c8  2810              CMP      r0,#0x10
0008ca  d31d              BCC      |L15.2312|
;;;1564   								        ++sub_step;   
0008cc  7b38              LDRB     r0,[r7,#0xc]  ; sub_step
0008ce  1c40              ADDS     r0,r0,#1
0008d0  7338              STRB     r0,[r7,#0xc]
0008d2  e019              B        |L15.2312|
                  |L15.2260|
;;;1565   								    }
;;;1566   							
;;;1567   							      break;
;;;1568   							case 1:
;;;1569   	                  drv_bq796xx_Set_Stack_CellBalanceCycleTime(bq796xx_default.cb_cycle_time, 0);
0008d4  7a58              LDRB     r0,[r3,#9]  ; bq796xx_default
0008d6  2100              MOVS     r1,#0
0008d8  f7fffffe          BL       drv_bq796xx_Set_Stack_CellBalanceCycleTime
;;;1570   							      ++sub_step;
0008dc  7b38              LDRB     r0,[r7,#0xc]  ; sub_step
0008de  1c40              ADDS     r0,r0,#1
0008e0  7338              STRB     r0,[r7,#0xc]
;;;1571   							      break;
0008e2  e011              B        |L15.2312|
                  |L15.2276|
;;;1572   							case 2:
;;;1573                       fill_data4_payload(d_payload,((FCOMM_EN | NFAULT_EN) &(~(NO_ADJ_CB))), 0, 0, 0);   //All BMU Device will allow two adjacent CB FETs to be enabled
0008e4  2300              MOVS     r3,#0
0008e6  461a              MOV      r2,r3
0008e8  2114              MOVS     r1,#0x14
0008ea  a804              ADD      r0,sp,#0x10
0008ec  9600              STR      r6,[sp,#0]
0008ee  f7fffffe          BL       fill_data4_payload
;;;1574                       drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_DEV_CONF,1, d_payload, 0);							      
0008f2  e9cd8600          STRD     r8,r6,[sp,#0]
0008f6  2301              MOVS     r3,#1
0008f8  2202              MOVS     r2,#2
0008fa  2100              MOVS     r1,#0
0008fc  20b0              MOVS     r0,#0xb0
0008fe  f7fffffe          BL       drv_bq796xx_command_framing
;;;1575   							      ++sub_step;
000902  7b38              LDRB     r0,[r7,#0xc]  ; sub_step
000904  1c40              ADDS     r0,r0,#1
000906  7338              STRB     r0,[r7,#0xc]
                  |L15.2312|
;;;1576   							      break;				 
;;;1577   						}
;;;1578   						
;;;1579   					  if(sub_step>=3){
000908  7b38              LDRB     r0,[r7,#0xc]  ; sub_step
00090a  2803              CMP      r0,#3
00090c  d304              BCC      |L15.2328|
;;;1580   						    sub_step = 0;
00090e  733e              STRB     r6,[r7,#0xc]
;;;1581   						    *before_delay_ms = 1;
000910  f8849000          STRB     r9,[r4,#0]
;;;1582   						    *step_complete_f = 1;
000914  f8859000          STRB     r9,[r5,#0]
                  |L15.2328|
000918  e091              B        |L15.2622|
                  |L15.2330|
;;;1583   					   }						
;;;1584   					   break;
;;;1585   		  case AFE_INIT_SET_GPIO_FUNC:	//Setting ALL BMU ,GPIO1~GPIO3 ADC input.   GPIO4~GPIO8 Output Hi/Lo.	 
;;;1586   				    *before_delay_ms = 1; 
00091a  46b8              MOV      r8,r7
00091c  7027              STRB     r7,[r4,#0]
;;;1587   			 
;;;1588   	          switch(sub_step){				 
00091e  4f4a              LDR      r7,|L15.2632|
000920  2908              CMP      r1,#8
000922  d244              BCS      |L15.2478|
000924  e8dff001          TBB      [pc,r1]
000928  040c141c          DCB      0x04,0x0c,0x14,0x1c
00092c  242c343c          DCB      0x24,0x2c,0x34,0x3c
;;;1589   							case 0:	
;;;1590   				          drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_ADC_OTUT,AFE_GPIO1,0);
000930  2300              MOVS     r3,#0
000932  2201              MOVS     r2,#1
000934  4619              MOV      r1,r3
000936  4610              MOV      r0,r2
000938  9600              STR      r6,[sp,#0]
00093a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1591   	                break;
00093e  e036              B        |L15.2478|
;;;1592   							case 1:
;;;1593   								  drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_ADC_OTUT,AFE_GPIO2,0);
000940  2301              MOVS     r3,#1
000942  461a              MOV      r2,r3
000944  2100              MOVS     r1,#0
000946  4618              MOV      r0,r3
000948  9600              STR      r6,[sp,#0]
00094a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1594   	                break;
00094e  e02e              B        |L15.2478|
;;;1595   							case 2:
;;;1596   								  drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_L,AFE_GPIO3,0);	
000950  2302              MOVS     r3,#2
000952  2205              MOVS     r2,#5
000954  2100              MOVS     r1,#0
000956  2001              MOVS     r0,#1
000958  9600              STR      r6,[sp,#0]
00095a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1597   	                break;
00095e  e026              B        |L15.2478|
;;;1598   							case 3:
;;;1599   	                drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_L,AFE_GPIO4,0);
000960  2303              MOVS     r3,#3
000962  2205              MOVS     r2,#5
000964  2100              MOVS     r1,#0
000966  2001              MOVS     r0,#1
000968  9600              STR      r6,[sp,#0]
00096a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1600   	                break;
00096e  e01e              B        |L15.2478|
;;;1601   							case 4:
;;;1602   							    drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_L,AFE_GPIO5,0);
000970  2304              MOVS     r3,#4
000972  2205              MOVS     r2,#5
000974  2100              MOVS     r1,#0
000976  2001              MOVS     r0,#1
000978  9600              STR      r6,[sp,#0]
00097a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1603   	                break;
00097e  e016              B        |L15.2478|
;;;1604   							case 5:
;;;1605   							    drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_L,AFE_GPIO6,0);
000980  2305              MOVS     r3,#5
000982  461a              MOV      r2,r3
000984  2100              MOVS     r1,#0
000986  2001              MOVS     r0,#1
000988  9600              STR      r6,[sp,#0]
00098a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1606    	                break;
00098e  e00e              B        |L15.2478|
;;;1607   							case 6:
;;;1608   							    drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_L,AFE_GPIO7,0);
000990  2306              MOVS     r3,#6
000992  2205              MOVS     r2,#5
000994  2100              MOVS     r1,#0
000996  2001              MOVS     r0,#1
000998  9600              STR      r6,[sp,#0]
00099a  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;1609   	                break;
00099e  e006              B        |L15.2478|
;;;1610   							case 7:
;;;1611   							    drv_bq796xx_Set_AFE_GPIO_type(STACK,0,GPIO_OUT_H,AFE_GPIO8,0);
0009a0  2307              MOVS     r3,#7
0009a2  2204              MOVS     r2,#4
0009a4  2100              MOVS     r1,#0
0009a6  2001              MOVS     r0,#1
0009a8  9600              STR      r6,[sp,#0]
0009aa  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
                  |L15.2478|
;;;1612   							    break;
;;;1613   						}
;;;1614   						
;;;1615   						++sub_step;
0009ae  7b38              LDRB     r0,[r7,#0xc]  ; sub_step
0009b0  1c40              ADDS     r0,r0,#1
0009b2  b2c0              UXTB     r0,r0
0009b4  7338              STRB     r0,[r7,#0xc]
;;;1616   						
;;;1617   					  if(sub_step>=8){
0009b6  2808              CMP      r0,#8
0009b8  d341              BCC      |L15.2622|
;;;1618   						    sub_step = 0;
0009ba  733e              STRB     r6,[r7,#0xc]
;;;1619   						    *before_delay_ms = 1;
0009bc  f8848000          STRB     r8,[r4,#0]
;;;1620   						    *step_complete_f = 1;
0009c0  f8858000          STRB     r8,[r5,#0]
0009c4  e03b              B        |L15.2622|
                  |L15.2502|
;;;1621   					 }						
;;;1622   					 break;			
;;;1623   				case AFE_INIT_SET_BMU_FAULT_MSK:
;;;1624   					
;;;1625   				   set_val = 0xFF;
0009c6  f8df8080          LDR      r8,|L15.2632|
0009ca  20ff              MOVS     r0,#0xff
0009cc  f8880011          STRB     r0,[r8,#0x11]
;;;1626   				   if(bq796xx_default.ov_enable== 1){
0009d0  7958              LDRB     r0,[r3,#5]  ; bq796xx_default
0009d2  2801              CMP      r0,#1
0009d4  d102              BNE      |L15.2524|
;;;1627   				      set_val &= ~(BQ79616_MSK_OV);   
0009d6  20f7              MOVS     r0,#0xf7
0009d8  f8880011          STRB     r0,[r8,#0x11]
                  |L15.2524|
;;;1628   				   }
;;;1629   				   
;;;1630   					 if(bq796xx_default.uv_enable== 1){
0009dc  7998              LDRB     r0,[r3,#6]  ; bq796xx_default
0009de  2801              CMP      r0,#1
0009e0  d105              BNE      |L15.2542|
;;;1631   				      set_val &= ~(BQ79616_MSK_UV);   
0009e2  f8980011          LDRB     r0,[r8,#0x11]  ; set_val
0009e6  f0200010          BIC      r0,r0,#0x10
0009ea  f8880011          STRB     r0,[r8,#0x11]
                  |L15.2542|
;;;1632   				   }
;;;1633   					 
;;;1634   				   if(bq796xx_default.ot_enable== 1){
0009ee  79d8              LDRB     r0,[r3,#7]  ; bq796xx_default
0009f0  2801              CMP      r0,#1
0009f2  d105              BNE      |L15.2560|
;;;1635   				      set_val &= ~(BQ79616_MSK_OT);   
0009f4  f8980011          LDRB     r0,[r8,#0x11]  ; set_val
0009f8  f0200020          BIC      r0,r0,#0x20
0009fc  f8880011          STRB     r0,[r8,#0x11]
                  |L15.2560|
;;;1636   				   }				
;;;1637   					 
;;;1638   					 if(bq796xx_default.ut_enable== 1){
000a00  7a18              LDRB     r0,[r3,#8]  ; bq796xx_default
000a02  e000              B        |L15.2566|
                  |L15.2564|
000a04  e012              B        |L15.2604|
                  |L15.2566|
000a06  2801              CMP      r0,#1
000a08  d105              BNE      |L15.2582|
;;;1639   				      set_val &= ~(BQ79616_MSK_UT);   
000a0a  f8980011          LDRB     r0,[r8,#0x11]  ; set_val
000a0e  f0200040          BIC      r0,r0,#0x40
000a12  f8880011          STRB     r0,[r8,#0x11]
                  |L15.2582|
;;;1640   				   }
;;;1641   					 
;;;1642   					 drv_bq796xx_Set_BroadCast_Mask_FaultSel(set_val,0xFF,0);
000a16  2200              MOVS     r2,#0
000a18  21ff              MOVS     r1,#0xff
000a1a  f8980011          LDRB     r0,[r8,#0x11]  ; set_val
000a1e  f7fffffe          BL       drv_bq796xx_Set_BroadCast_Mask_FaultSel
;;;1643   				   sub_step = 0;
000a22  f888600c          STRB     r6,[r8,#0xc]
;;;1644   					 *before_delay_ms = 1;
000a26  7027              STRB     r7,[r4,#0]
;;;1645   					 *step_complete_f = 1;            
000a28  702f              STRB     r7,[r5,#0]
;;;1646   				   break;				
000a2a  e008              B        |L15.2622|
                  |L15.2604|
;;;1647   				case AFE_RUN_AUX_ADC:	 //Start Main and AUX ADC 
;;;1648   					 drv_bq796xx_Start_AFE_ADC(STACK,0,0);
000a2c  2200              MOVS     r2,#0
000a2e  4611              MOV      r1,r2
000a30  2001              MOVS     r0,#1
000a32  f7fffffe          BL       drv_bq796xx_Start_AFE_ADC
;;;1649   				
;;;1650       			 sub_step = 0;
000a36  4804              LDR      r0,|L15.2632|
000a38  7306              STRB     r6,[r0,#0xc]
;;;1651   					 *before_delay_ms = 1;
000a3a  7027              STRB     r7,[r4,#0]
;;;1652   					 *step_complete_f = 1;
000a3c  702f              STRB     r7,[r5,#0]
                  |L15.2622|
;;;1653   				   break;
;;;1654   		}
;;;1655   	  
;;;1656   		return bmu_cnt;
000a3e  4802              LDR      r0,|L15.2632|
000a40  7a40              LDRB     r0,[r0,#9]  ; bmu_cnt
;;;1657   }
000a42  b00d              ADD      sp,sp,#0x34
000a44  e8bd8ff0          POP      {r4-r11,pc}
;;;1658   
                          ENDP

                  |L15.2632|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Read_AFE_ALL_ADC||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_AFE_ALL_ADC PROC
;;;510    
;;;511    uint8_t drv_bq796xx_Read_AFE_ALL_ADC(bq796xx_AFE_GPIO_stack is_stack,uint8_t dev_id,uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;512      uint8_t    d_payload[4] = {0};
000008  2200              MOVS     r2,#0
00000a  9202              STR      r2,[sp,#8]
;;;513      
;;;514      fill_data4_payload(d_payload,(BQ79616_GPIO_NUM*2)-1,0,0,0); //read 16 bytes 
00000c  2300              MOVS     r3,#0
00000e  9200              STR      r2,[sp,#0]
000010  461a              MOV      r2,r3
000012  210f              MOVS     r1,#0xf
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       fill_data4_payload
00001a  a802              ADD      r0,sp,#8              ;512
;;;515      
;;;516      if(is_stack == STACK)  
;;;517          drv_bq796xx_command_framing(STACK_READ, 0, BQ79600_GPIO1_RES_H, 1, d_payload, delays);
00001c  f240528e          MOV      r2,#0x58e
000020  2d01              CMP      r5,#1                 ;516
000022  d008              BEQ      |L16.54|
;;;518      else
;;;519          drv_bq796xx_command_framing(SINGLE_READ, dev_id, BQ79600_GPIO1_RES_H, 1, d_payload, delays);
000024  e9cd0400          STRD     r0,r4,[sp,#0]
000028  2301              MOVS     r3,#1
00002a  4631              MOV      r1,r6
00002c  2080              MOVS     r0,#0x80
00002e  f7fffffe          BL       drv_bq796xx_command_framing
                  |L16.50|
;;;520      
;;;521      return 0;
000032  2000              MOVS     r0,#0
;;;522    }
000034  bdfe              POP      {r1-r7,pc}
                  |L16.54|
000036  e9cd0400          STRD     r0,r4,[sp,#0]         ;517
00003a  2301              MOVS     r3,#1                 ;517
00003c  2100              MOVS     r1,#0                 ;517
00003e  20a0              MOVS     r0,#0xa0              ;517
000040  f7fffffe          BL       drv_bq796xx_command_framing
000044  e7f5              B        |L16.50|
;;;523    
                          ENDP


                          AREA ||i.drv_bq796xx_Read_AFE_ALL_VCELL||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_AFE_ALL_VCELL PROC
;;;437    
;;;438    uint8_t drv_bq796xx_Read_AFE_ALL_VCELL(bq796xx_AFE_GPIO_stack is_stack,uint8_t dev_id,uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;439      uint8_t    d_payload[4] = {0};
000008  2200              MOVS     r2,#0
00000a  9202              STR      r2,[sp,#8]
;;;440      
;;;441      fill_data4_payload(d_payload,(BMU_CELL_SERIES*2)-1,0,0,0); //read 32 bytes 
00000c  2300              MOVS     r3,#0
00000e  9200              STR      r2,[sp,#0]
000010  461a              MOV      r2,r3
000012  211f              MOVS     r1,#0x1f
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       fill_data4_payload
00001a  a802              ADD      r0,sp,#8              ;439
;;;442      
;;;443      if(is_stack == STACK)  
;;;444          drv_bq796xx_command_framing(STACK_READ, 0, BQ79600_VCELL16_H, 1, d_payload, delays);
00001c  f44f62ad          MOV      r2,#0x568
000020  2d01              CMP      r5,#1                 ;443
000022  d008              BEQ      |L17.54|
;;;445      else
;;;446          drv_bq796xx_command_framing(SINGLE_READ, dev_id, BQ79600_VCELL16_H, 1, d_payload, delays);
000024  e9cd0400          STRD     r0,r4,[sp,#0]
000028  2301              MOVS     r3,#1
00002a  4631              MOV      r1,r6
00002c  2080              MOVS     r0,#0x80
00002e  f7fffffe          BL       drv_bq796xx_command_framing
                  |L17.50|
;;;447      
;;;448      return 0;
000032  2000              MOVS     r0,#0
;;;449    }
000034  bdfe              POP      {r1-r7,pc}
                  |L17.54|
000036  e9cd0400          STRD     r0,r4,[sp,#0]         ;444
00003a  2301              MOVS     r3,#1                 ;444
00003c  2100              MOVS     r1,#0                 ;444
00003e  20a0              MOVS     r0,#0xa0              ;444
000040  f7fffffe          BL       drv_bq796xx_command_framing
000044  e7f5              B        |L17.50|
;;;450    
                          ENDP


                          AREA ||i.drv_bq796xx_Read_Base_FaultSummary||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_Base_FaultSummary PROC
;;;673    
;;;674    uint8_t drv_bq796xx_Read_Base_FaultSummary(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;675      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;676      
;;;677      fill_data4_payload(d_payload,0,0,0,0);
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  4619              MOV      r1,r3
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;678      drv_bq796xx_command_framing(SINGLE_READ, 0x00, BQ79600_FAULT_SUMMARY,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f44f5204          MOV      r2,#0x2100
000022  2100              MOVS     r1,#0
000024  2080              MOVS     r0,#0x80
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;679     
;;;680      return 0;
00002a  2000              MOVS     r0,#0
;;;681    }
00002c  bd3e              POP      {r1-r5,pc}
;;;682    
                          ENDP


                          AREA ||i.drv_bq796xx_Read_Stack_FaultOTUT||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_Stack_FaultOTUT PROC
;;;746    
;;;747    uint8_t drv_bq796xx_Read_Stack_FaultOTUT(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;748      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;749      
;;;750      fill_data4_payload(d_payload,1,0,0,0);    //Read 2Bytes(Fault_OT,Fault_UT)
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2101              MOVS     r1,#1
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;751      drv_bq796xx_command_framing(STACK_READ, 0x00, BQ796XX_FAULT_OT,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f44f62a8          MOV      r2,#0x540
000022  2100              MOVS     r1,#0
000024  20a0              MOVS     r0,#0xa0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;752     
;;;753      return 0;
00002a  2000              MOVS     r0,#0
;;;754    }
00002c  bd3e              POP      {r1-r5,pc}
;;;755    //------------------------------------------------------------
                          ENDP


                          AREA ||i.drv_bq796xx_Read_Stack_FaultOVUV||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_Stack_FaultOVUV PROC
;;;711    
;;;712    uint8_t drv_bq796xx_Read_Stack_FaultOVUV(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;713      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;714      
;;;715      fill_data4_payload(d_payload,3,0,0,0);    //Read 4Bytes(Fault_OV1,Fault_OV2,Fault_UV1,Fault_OV2)
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2103              MOVS     r1,#3
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;716      drv_bq796xx_command_framing(STACK_READ, 0x00, BQ796XX_FAULT_OV1,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f240523c          MOV      r2,#0x53c
000022  2100              MOVS     r1,#0
000024  20a0              MOVS     r0,#0xa0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;717     
;;;718      return 0;
00002a  2000              MOVS     r0,#0
;;;719    }
00002c  bd3e              POP      {r1-r5,pc}
;;;720    //------------------------------------------------------------
                          ENDP


                          AREA ||i.drv_bq796xx_Read_Stack_FaultSummary||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Read_Stack_FaultSummary PROC
;;;664    
;;;665    uint8_t drv_bq796xx_Read_Stack_FaultSummary(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;666      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;667      
;;;668      fill_data4_payload(d_payload,0,0,0,0);
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  4619              MOV      r1,r3
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;669      drv_bq796xx_command_framing(STACK_READ, 0x00, BQ796XX_FAULT_SUMMARY,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f240522d          MOV      r2,#0x52d
000022  2100              MOVS     r1,#0
000024  20a0              MOVS     r0,#0xa0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;670     
;;;671      return 0;
00002a  2000              MOVS     r0,#0
;;;672    }
00002c  bd3e              POP      {r1-r5,pc}
;;;673    
                          ENDP


                          AREA ||i.drv_bq796xx_Run_OTUT||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Run_OTUT PROC
;;;737    
;;;738    uint8_t drv_bq796xx_Run_OTUT(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;739      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;740        
;;;741      fill_data4_payload(d_payload,BQ79616_OTUT_GO | BQ79616_OTUT_MODE_B0,0,0,0);   //Start OT_UT + OTUT_MODE=0x01: Run the OT and UT round robin with all active cells.
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2105              MOVS     r1,#5
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;742      drv_bq796xx_command_framing(STACK_WRITE, 0x00, B796XX_OTUT_CTRL,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f240322d          MOV      r2,#0x32d
000022  2100              MOVS     r1,#0
000024  20b0              MOVS     r0,#0xb0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;743     
;;;744      return 0;
00002a  2000              MOVS     r0,#0
;;;745    }
00002c  bd3e              POP      {r1-r5,pc}
;;;746    
                          ENDP


                          AREA ||i.drv_bq796xx_Run_OVUV||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Run_OVUV PROC
;;;702    
;;;703    uint8_t drv_bq796xx_Run_OVUV(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;704      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;705        
;;;706      fill_data4_payload(d_payload,BQ79616_OVUV_GO | BQ79616_OVUV_MODE_B0,0,0,0);   //Start OV_UV + OVUV_MODE=0x01: Run the OV and UV round robin with all active cells.
000008  2300              MOVS     r3,#0
00000a  9100              STR      r1,[sp,#0]
00000c  461a              MOV      r2,r3
00000e  2105              MOVS     r1,#5
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;707      drv_bq796xx_command_framing(STACK_WRITE, 0x00, B796XX_OVUV_CTRL,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  f44f724b          MOV      r2,#0x32c
000022  2100              MOVS     r1,#0
000024  20b0              MOVS     r0,#0xb0
000026  f7fffffe          BL       drv_bq796xx_command_framing
;;;708     
;;;709      return 0;
00002a  2000              MOVS     r0,#0
;;;710    }
00002c  bd3e              POP      {r1-r5,pc}
;;;711    
                          ENDP


                          AREA ||i.drv_bq796xx_Send_WakeupAll||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Send_WakeupAll PROC
;;;541    
;;;542    uint8_t drv_bq796xx_Send_WakeupAll(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;543      uint8_t    d_payload[4] = {0};
000004  2500              MOVS     r5,#0
000006  9502              STR      r5,[sp,#8]
;;;544      
;;;545      drv_bq796xx_switch_rx_pin_type_setting(BQ_GPIO);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
;;;546      drv_bq796xx_rx_pin_wakeup();
00000e  f7fffffe          BL       drv_bq796xx_rx_pin_wakeup
;;;547      drv_bq796xx_delay_ms(10);
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       drv_bq796xx_delay_ms
;;;548      
;;;549      drv_bq796xx_switch_rx_pin_type_setting(BQ_UART);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
;;;550      drv_bq796xx_delay_ms(30);
00001e  201e              MOVS     r0,#0x1e
000020  f7fffffe          BL       drv_bq796xx_delay_ms
;;;551      fill_data4_payload(d_payload,BQ79616_SEND_WAKE,0,0,0); //[SEND_WAKE]=1
000024  2300              MOVS     r3,#0
000026  461a              MOV      r2,r3
000028  2120              MOVS     r1,#0x20
00002a  a802              ADD      r0,sp,#8
00002c  9500              STR      r5,[sp,#0]
00002e  f7fffffe          BL       fill_data4_payload
;;;552      drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, delays);
000032  a802              ADD      r0,sp,#8
000034  e9cd0400          STRD     r0,r4,[sp,#0]
000038  2301              MOVS     r3,#1
00003a  f2403209          MOV      r2,#0x309
00003e  2100              MOVS     r1,#0
000040  2090              MOVS     r0,#0x90
000042  f7fffffe          BL       drv_bq796xx_command_framing
;;;553      
;;;554      return 0;
000046  2000              MOVS     r0,#0
;;;555    }
000048  bd3e              POP      {r1-r5,pc}
;;;556    
                          ENDP


                          AREA ||i.drv_bq796xx_Set_AFE_GPIO_type||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_AFE_GPIO_type PROC
;;;450    
;;;451    uint8_t drv_bq796xx_Set_AFE_GPIO_type(bq796xx_AFE_GPIO_stack is_stack,uint8_t dev_id,bq796xx_AFE_GPIO_Type GPIO_type,bq796xx_AFE_GPIO GPIO_Num,uint32_t delays){
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4680              MOV      r8,r0
000006  9f0a              LDR      r7,[sp,#0x28]
000008  4689              MOV      r9,r1
;;;452      
;;;453      static uint8_t    d_payload[4] = {0};
;;;454      static uint8_t    set_gpio =0;
;;;455      static uint8_t    set_reg_addr =0;
;;;456      
;;;457      set_gpio = bq796xx_afe_gpio_conf[(GPIO_Num>>1)];
00000a  481d              LDR      r0,|L25.128|
00000c  eb000553          ADD      r5,r0,r3,LSR #1
000010  f1a00630          SUB      r6,r0,#0x30
000014  782c              LDRB     r4,[r5,#0]
000016  70f4              STRB     r4,[r6,#3]
;;;458      
;;;459      if((GPIO_Num %2)==0){
000018  07d8              LSLS     r0,r3,#31
00001a  d023              BEQ      |L25.100|
;;;460          set_gpio &= BQ796XX_GPIOCONF_BIT_MARK_1;
;;;461          set_gpio |= (GPIO_type);
;;;462      }else{
;;;463          set_gpio &= BQ796XX_GPIOCONF_BIT_MARK_2; 
00001c  f00400c7          AND      r0,r4,#0xc7
;;;464          set_gpio |= (GPIO_type<<3);
000020  ea4000c2          ORR      r0,r0,r2,LSL #3
000024  70f0              STRB     r0,[r6,#3]
                  |L25.38|
;;;465      }
;;;466        
;;;467      set_reg_addr = BQ79600_GPIO_CONF1+(GPIO_Num>>1);
000026  200e              MOVS     r0,#0xe
000028  eb000053          ADD      r0,r0,r3,LSR #1
00002c  7130              STRB     r0,[r6,#4]
;;;468      
;;;469      fill_data4_payload(d_payload,set_gpio,0,0,0);
00002e  2000              MOVS     r0,#0
000030  4603              MOV      r3,r0
000032  4602              MOV      r2,r0
000034  9000              STR      r0,[sp,#0]
000036  4812              LDR      r0,|L25.128|
000038  78f1              LDRB     r1,[r6,#3]  ; set_gpio
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       fill_data4_payload
000040  480f              LDR      r0,|L25.128|
000042  1d00              ADDS     r0,r0,#4
;;;470      
;;;471      if(is_stack == STACK)  
000044  f1b80f01          CMP      r8,#1
000048  d011              BEQ      |L25.110|
;;;472          drv_bq796xx_command_framing(STACK_WRITE, 0, set_reg_addr, 1, d_payload, delays);
;;;473      else
;;;474          drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, set_reg_addr, 1, d_payload, delays);
00004a  e9cd0700          STRD     r0,r7,[sp,#0]
00004e  2301              MOVS     r3,#1
000050  7932              LDRB     r2,[r6,#4]  ; set_reg_addr
000052  4649              MOV      r1,r9
000054  2090              MOVS     r0,#0x90
000056  f7fffffe          BL       drv_bq796xx_command_framing
                  |L25.90|
;;;475      
;;;476      bq796xx_afe_gpio_conf[(GPIO_Num>>1)] = set_gpio;
00005a  78f0              LDRB     r0,[r6,#3]  ; set_gpio
00005c  7028              STRB     r0,[r5,#0]
;;;477      
;;;478      return 0;
00005e  2000              MOVS     r0,#0
;;;479    }
000060  e8bd87fc          POP      {r2-r10,pc}
                  |L25.100|
000064  f00400f8          AND      r0,r4,#0xf8           ;460
000068  4310              ORRS     r0,r0,r2              ;461
00006a  70f0              STRB     r0,[r6,#3]            ;461
00006c  e7db              B        |L25.38|
                  |L25.110|
00006e  e9cd0700          STRD     r0,r7,[sp,#0]         ;472
000072  2301              MOVS     r3,#1                 ;472
000074  7932              LDRB     r2,[r6,#4]            ;472  ; set_reg_addr
000076  2100              MOVS     r1,#0                 ;472
000078  20b0              MOVS     r0,#0xb0              ;472
00007a  f7fffffe          BL       drv_bq796xx_command_framing
00007e  e7ec              B        |L25.90|
;;;480    
                          ENDP

                  |L25.128|
                          DCD      ||.data||+0x30

                          AREA ||i.drv_bq796xx_Set_BroadCast_Mask_FaultAll||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_BroadCast_Mask_FaultAll PROC
;;;621    
;;;622    uint8_t drv_bq796xx_Set_BroadCast_Mask_FaultAll(uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4604              MOV      r4,r0
;;;623      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;624      
;;;625      fill_data4_payload(d_payload,0xFF,0xFF,0,0); //Mask all=x0FF
000008  22ff              MOVS     r2,#0xff
00000a  9100              STR      r1,[sp,#0]
00000c  2300              MOVS     r3,#0
00000e  4611              MOV      r1,r2
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;626      drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_FAULT_MSK1, 2, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2302              MOVS     r3,#2
00001e  2216              MOVS     r2,#0x16
000020  2100              MOVS     r1,#0
000022  20d0              MOVS     r0,#0xd0
000024  f7fffffe          BL       drv_bq796xx_command_framing
;;;627      
;;;628    	bq796xx_afe_fault_msk1= 0xFF;
000028  4802              LDR      r0,|L26.52|
00002a  21ff              MOVS     r1,#0xff
00002c  7001              STRB     r1,[r0,#0]
;;;629    	bq796xx_afe_fault_msk2= 0xFF;
00002e  7041              STRB     r1,[r0,#1]
;;;630    	
;;;631    	//BROAD CAST READ t to check
;;;632    //	drv_bq796xx_delay_ms(1);
;;;633    //	fill_data4_payload(d_payload,2,0,0,0);
;;;634    //	drv_bq796xx_command_framing(BROAD_READ, 0x00, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;635    //	drv_bq796xx_delay_ms(5);
;;;636    	
;;;637      return 0;
000030  2000              MOVS     r0,#0
;;;638    }
000032  bd3e              POP      {r1-r5,pc}
;;;639    
                          ENDP

                  |L26.52|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Set_BroadCast_Mask_FaultSel||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_BroadCast_Mask_FaultSel PROC
;;;639    
;;;640    uint8_t drv_bq796xx_Set_BroadCast_Mask_FaultSel(uint8_t msk1,uint8_t msk2,uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;641      uint8_t    d_payload[4] = {0};
000008  2100              MOVS     r1,#0
00000a  9102              STR      r1,[sp,#8]
;;;642    
;;;643      fill_data4_payload(d_payload,msk1,msk2,0,0); //Mask all=x0FF
00000c  9100              STR      r1,[sp,#0]
00000e  2300              MOVS     r3,#0
000010  462a              MOV      r2,r5
000012  4621              MOV      r1,r4
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       fill_data4_payload
;;;644      drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_FAULT_MSK1, 2, d_payload, delays);
00001a  a902              ADD      r1,sp,#8
00001c  e9cd1600          STRD     r1,r6,[sp,#0]
000020  2302              MOVS     r3,#2
000022  2216              MOVS     r2,#0x16
000024  2100              MOVS     r1,#0
000026  20d0              MOVS     r0,#0xd0
000028  f7fffffe          BL       drv_bq796xx_command_framing
;;;645    	
;;;646    	bq796xx_afe_fault_msk1= msk1;
00002c  4802              LDR      r0,|L27.56|
00002e  7004              STRB     r4,[r0,#0]
;;;647    	bq796xx_afe_fault_msk2= msk2;  
000030  7045              STRB     r5,[r0,#1]
;;;648    		
;;;649      return 0;
000032  2000              MOVS     r0,#0
;;;650    }
000034  bdfe              POP      {r1-r7,pc}
;;;651    
                          ENDP

000036  0000              DCW      0x0000
                  |L27.56|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Set_Mask_FaultAll||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_Mask_FaultAll PROC
;;;556    
;;;557    uint8_t drv_bq796xx_Set_Mask_FaultAll(bq796xx_AFE_GPIO_stack is_stack, uint8_t dev_id, uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;558      uint8_t    d_payload[4] = {0};
000008  2200              MOVS     r2,#0
00000a  9202              STR      r2,[sp,#8]
;;;559      
;;;560      fill_data4_payload(d_payload,0xFF,0xFF,0,0); //Mask all=x0FF
00000c  9200              STR      r2,[sp,#0]
00000e  22ff              MOVS     r2,#0xff
000010  2300              MOVS     r3,#0
000012  4611              MOV      r1,r2
000014  a802              ADD      r0,sp,#8
000016  f7fffffe          BL       fill_data4_payload
00001a  a802              ADD      r0,sp,#8              ;558
;;;561    	
;;;562    	if(is_stack == STACK){
00001c  2d01              CMP      r5,#1
00001e  d009              BEQ      |L28.52|
;;;563          drv_bq796xx_command_framing(STACK_WRITE, 0, BQ796XX_FAULT_MSK1, 2, d_payload, delays);
;;;564    
;;;565    		  bq796xx_afe_fault_msk1=0xFF;
;;;566    		  bq796xx_afe_fault_msk2=0xFF;
;;;567      }else{
;;;568          drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ796XX_FAULT_MSK1, 2, d_payload, delays);
000020  e9cd0400          STRD     r0,r4,[sp,#0]
000024  2302              MOVS     r3,#2
000026  2216              MOVS     r2,#0x16
000028  4631              MOV      r1,r6
00002a  2090              MOVS     r0,#0x90
00002c  f7fffffe          BL       drv_bq796xx_command_framing
                  |L28.48|
;;;569    	}
;;;570    	
;;;571      //BROAD CAST READ t to check
;;;572    	//fill_data4_payload(d_payload,2,0,0,0);
;;;573    	//drv_bq796xx_command_framing(BROAD_READ, 0x00, BQ796XX_FAULT_MSK1, 1, d_payload, delays);
;;;574    	//drv_bq796xx_delay_ms(500);
;;;575    	
;;;576      return 0;
000030  2000              MOVS     r0,#0
;;;577    }
000032  bdfe              POP      {r1-r7,pc}
                  |L28.52|
000034  e9cd0400          STRD     r0,r4,[sp,#0]         ;563
000038  2302              MOVS     r3,#2                 ;563
00003a  2216              MOVS     r2,#0x16              ;563
00003c  2100              MOVS     r1,#0                 ;563
00003e  20b0              MOVS     r0,#0xb0              ;563
000040  f7fffffe          BL       drv_bq796xx_command_framing
000044  4902              LDR      r1,|L28.80|
000046  20ff              MOVS     r0,#0xff              ;565
000048  7008              STRB     r0,[r1,#0]            ;565
00004a  7048              STRB     r0,[r1,#1]            ;566
00004c  e7f0              B        |L28.48|
;;;578    
                          ENDP

00004e  0000              DCW      0x0000
                  |L28.80|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_Set_Stack_CellBalanceCycleTime||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_Stack_CellBalanceCycleTime PROC
;;;781    
;;;782    uint8_t drv_bq796xx_Set_Stack_CellBalanceCycleTime(bq796xx_cellbalance_cycle_time cb_cyc_time,uint32_t delays){
000000  b51c              PUSH     {r2-r4,lr}
000002  460c              MOV      r4,r1
;;;783      static uint8_t    d_payload[4] = {0};  
;;;784    
;;;785      fill_data4_payload(d_payload, cb_cyc_time,0,0,0);
000004  2100              MOVS     r1,#0
000006  460b              MOV      r3,r1
000008  460a              MOV      r2,r1
00000a  9100              STR      r1,[sp,#0]
00000c  4601              MOV      r1,r0
00000e  4807              LDR      r0,|L29.44|
000010  f7fffffe          BL       fill_data4_payload
;;;786      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_BAL_CTRL1,1, d_payload, delays);
000014  4805              LDR      r0,|L29.44|
000016  e9cd0400          STRD     r0,r4,[sp,#0]
00001a  2301              MOVS     r3,#1
00001c  f240322e          MOV      r2,#0x32e
000020  2100              MOVS     r1,#0
000022  20b0              MOVS     r0,#0xb0
000024  f7fffffe          BL       drv_bq796xx_command_framing
;;;787      return 0;
000028  2000              MOVS     r0,#0
;;;788    }
00002a  bd1c              POP      {r2-r4,pc}
;;;789    
                          ENDP

                  |L29.44|
                          DCD      ||.data||+0x44

                          AREA ||i.drv_bq796xx_Set_Stack_CellBalanceTime||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Set_Stack_CellBalanceTime PROC
;;;759    //------------------------------------------------------------
;;;760    uint8_t drv_bq796xx_Set_Stack_CellBalanceTime(bq796xx_cellbalance_time cb_time,uint32_t delays){
000000  e92d43fe          PUSH     {r1-r9,lr}
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
;;;761      uint8_t    d_payload[4] = {0};  
000008  2500              MOVS     r5,#0
00000a  9502              STR      r5,[sp,#8]
;;;762      uint8_t     cell_cnt=0;
00000c  2400              MOVS     r4,#0
;;;763    
;;;764      fill_data4_payload(d_payload, cb_time,0,0,0);
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4641              MOV      r1,r8
000014  a802              ADD      r0,sp,#8
000016  9500              STR      r5,[sp,#0]
000018  f7fffffe          BL       fill_data4_payload
00001c  af02              ADD      r7,sp,#8              ;761
                  |L30.30|
;;;765      
;;;766      cell_cnt = 0;
;;;767      
;;;768      while(cell_cnt < BMU_CELL_SERIES){
;;;769         if((cell_cnt%2)==0){
00001e  07e0              LSLS     r0,r4,#31
000020  d017              BEQ      |L30.82|
;;;770             fill_data4_payload(d_payload, cb_time,0,0,0);
;;;771         }else{
;;;772             fill_data4_payload(d_payload, 0,0,0,0); 
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  4619              MOV      r1,r3
000028  a802              ADD      r0,sp,#8
00002a  9500              STR      r5,[sp,#0]
00002c  f7fffffe          BL       fill_data4_payload
                  |L30.48|
;;;773         }
;;;774         
;;;775         drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_CB_CELL01_CTRL-cell_cnt,1, d_payload, delays);
000030  f2a43127          SUB      r1,r4,#0x327
000034  e9cd7600          STRD     r7,r6,[sp,#0]
000038  424a              RSBS     r2,r1,#0
00003a  2301              MOVS     r3,#1
00003c  2100              MOVS     r1,#0
00003e  20b0              MOVS     r0,#0xb0
000040  f7fffffe          BL       drv_bq796xx_command_framing
;;;776         ++cell_cnt;
000044  1c64              ADDS     r4,r4,#1
000046  b2e4              UXTB     r4,r4
000048  2c10              CMP      r4,#0x10              ;768
00004a  d3e8              BCC      |L30.30|
;;;777      }
;;;778      
;;;779      return 0;
00004c  2000              MOVS     r0,#0
;;;780    }
00004e  e8bd83fe          POP      {r1-r9,pc}
                  |L30.82|
000052  2300              MOVS     r3,#0                 ;770
000054  461a              MOV      r2,r3                 ;770
000056  4641              MOV      r1,r8                 ;770
000058  a802              ADD      r0,sp,#8              ;770
00005a  9500              STR      r5,[sp,#0]            ;770
00005c  f7fffffe          BL       fill_data4_payload
000060  e7e6              B        |L30.48|
;;;781    
                          ENDP


                          AREA ||i.drv_bq796xx_Set_Stack_OTUT||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Set_Stack_OTUT PROC
;;;723    //------------------------------------------------------------
;;;724    uint8_t drv_bq796xx_Set_Stack_OTUT(bq796xx_ot_threshold_p ot_th_pct,bq796xx_ut_threshold_p ut_th_pct,uint32_t delays){
000000  b51c              PUSH     {r2-r4,lr}
000002  4614              MOV      r4,r2
;;;725      static uint8_t    d_payload[4] = {0};
;;;726        
;;;727      fill_data4_payload(d_payload,ot_th_pct + (ut_th_pct<<5),0,0,0);
000004  2300              MOVS     r3,#0
000006  eb001041          ADD      r0,r0,r1,LSL #5
00000a  b2c1              UXTB     r1,r0
00000c  461a              MOV      r2,r3
00000e  4807              LDR      r0,|L31.44|
000010  9300              STR      r3,[sp,#0]
000012  f7fffffe          BL       fill_data4_payload
;;;728      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_OTUT_THRESH,1, d_payload, delays);
000016  4805              LDR      r0,|L31.44|
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  220b              MOVS     r2,#0xb
000020  2100              MOVS     r1,#0
000022  20b0              MOVS     r0,#0xb0
000024  f7fffffe          BL       drv_bq796xx_command_framing
;;;729     
;;;730      return 0;
000028  2000              MOVS     r0,#0
;;;731    }
00002a  bd1c              POP      {r2-r4,pc}
;;;732    
                          ENDP

                  |L31.44|
                          DCD      ||.data||+0x40

                          AREA ||i.drv_bq796xx_Set_Stack_OTUT_Associate||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Set_Stack_OTUT_Associate PROC
;;;732    
;;;733    uint8_t drv_bq796xx_Set_Stack_OTUT_Associate(bq796xx_AFE_GPIO afe_gpio,uint32_t delays){
000000  b508              PUSH     {r3,lr}
;;;734      drv_bq796xx_Set_AFE_GPIO_type(STACK,0x00,GPIO_ADC_OTUT,afe_gpio,delays); 
000002  4603              MOV      r3,r0
000004  2201              MOVS     r2,#1
000006  9100              STR      r1,[sp,#0]
000008  2100              MOVS     r1,#0
00000a  4610              MOV      r0,r2
00000c  f7fffffe          BL       drv_bq796xx_Set_AFE_GPIO_type
;;;735      return 0;
000010  2000              MOVS     r0,#0
;;;736    }
000012  bd08              POP      {r3,pc}
;;;737    
                          ENDP


                          AREA ||i.drv_bq796xx_Set_Stack_OV||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Set_Stack_OV PROC
;;;684    //------------------------------------------------------------
;;;685    uint8_t drv_bq796xx_Set_Stack_OV(bq796xx_ov_range ov_range_mv,bq796xx_ov_step ov_step_mv ,uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  4614              MOV      r4,r2
;;;686      uint8_t    d_payload[4] = {0};
000004  2300              MOVS     r3,#0
000006  9302              STR      r3,[sp,#8]
;;;687        
;;;688      fill_data4_payload(d_payload,ov_range_mv + ov_step_mv,0,0,0);
000008  4408              ADD      r0,r0,r1
00000a  b2c1              UXTB     r1,r0
00000c  461a              MOV      r2,r3
00000e  a802              ADD      r0,sp,#8
000010  9300              STR      r3,[sp,#0]
000012  f7fffffe          BL       fill_data4_payload
;;;689      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_OV_THRESH,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  2209              MOVS     r2,#9
000020  2100              MOVS     r1,#0
000022  20b0              MOVS     r0,#0xb0
000024  f7fffffe          BL       drv_bq796xx_command_framing
;;;690     
;;;691      return 0;
000028  2000              MOVS     r0,#0
;;;692    }
00002a  bd3e              POP      {r1-r5,pc}
;;;693    
                          ENDP


                          AREA ||i.drv_bq796xx_Set_Stack_UV||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Set_Stack_UV PROC
;;;693    
;;;694    uint8_t drv_bq796xx_Set_Stack_UV(bq796xx_uv_mv uv_mv,uint32_t delays){
000000  b53e              PUSH     {r1-r5,lr}
000002  460c              MOV      r4,r1
;;;695      uint8_t    d_payload[4] = {0};
000004  2100              MOVS     r1,#0
000006  9102              STR      r1,[sp,#8]
;;;696        
;;;697      fill_data4_payload(d_payload,uv_mv,0,0,0);
000008  9100              STR      r1,[sp,#0]
00000a  2300              MOVS     r3,#0
00000c  4601              MOV      r1,r0
00000e  461a              MOV      r2,r3
000010  a802              ADD      r0,sp,#8
000012  f7fffffe          BL       fill_data4_payload
;;;698      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_UV_THRESH,1, d_payload, delays);
000016  a802              ADD      r0,sp,#8
000018  e9cd0400          STRD     r0,r4,[sp,#0]
00001c  2301              MOVS     r3,#1
00001e  220a              MOVS     r2,#0xa
000020  2100              MOVS     r1,#0
000022  20b0              MOVS     r0,#0xb0
000024  f7fffffe          BL       drv_bq796xx_command_framing
;;;699     
;;;700      return 0;
000028  2000              MOVS     r0,#0
;;;701    }
00002a  bd3e              POP      {r1-r5,pc}
;;;702    
                          ENDP


                          AREA ||i.drv_bq796xx_Stack_CellBalanceStarting||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_Stack_CellBalanceStarting PROC
;;;789    
;;;790    uint8_t drv_bq796xx_Stack_CellBalanceStarting(bq796xx_cellbalance_control cb_ctrl, uint32_t delays){
000000  b51c              PUSH     {r2-r4,lr}
000002  460c              MOV      r4,r1
;;;791      static uint8_t    d_payload[4] = {0};  
;;;792    
;;;793    	if(cb_ctrl==CB_AUTO){
000004  2200              MOVS     r2,#0
000006  2801              CMP      r0,#1
000008  d012              BEQ      |L35.48|
;;;794          fill_data4_payload(d_payload, (BQ79616_BAL_GO | BQ79616_AUTO_BAL),0,0,0);
;;;795    	}else{
;;;796          fill_data4_payload(d_payload, (BQ79616_BAL_GO),0,0,0);	
00000a  2300              MOVS     r3,#0
00000c  9200              STR      r2,[sp,#0]
00000e  461a              MOV      r2,r3
000010  2102              MOVS     r1,#2
000012  480b              LDR      r0,|L35.64|
000014  f7fffffe          BL       fill_data4_payload
                  |L35.24|
;;;797    	}
;;;798    	
;;;799      drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_BAL_CTRL2,1, d_payload, delays);
000018  4809              LDR      r0,|L35.64|
00001a  e9cd0400          STRD     r0,r4,[sp,#0]
00001e  2301              MOVS     r3,#1
000020  f240322f          MOV      r2,#0x32f
000024  2100              MOVS     r1,#0
000026  20b0              MOVS     r0,#0xb0
000028  f7fffffe          BL       drv_bq796xx_command_framing
;;;800      
;;;801    	return 0;
00002c  2000              MOVS     r0,#0
;;;802    }
00002e  bd1c              POP      {r2-r4,pc}
                  |L35.48|
000030  2300              MOVS     r3,#0                 ;794
000032  9200              STR      r2,[sp,#0]            ;794
000034  461a              MOV      r2,r3                 ;794
000036  2103              MOVS     r1,#3                 ;794
000038  4801              LDR      r0,|L35.64|
00003a  f7fffffe          BL       fill_data4_payload
00003e  e7eb              B        |L35.24|
;;;803    //------------------------------------------------------------
                          ENDP

                  |L35.64|
                          DCD      ||.data||+0x48

                          AREA ||i.drv_bq796xx_Start_AFE_ADC||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Start_AFE_ADC PROC
;;;480    
;;;481    uint8_t drv_bq796xx_Start_AFE_ADC(bq796xx_AFE_GPIO_stack is_stack,uint8_t dev_id,uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;482      
;;;483      uint8_t   adc_ctrl_1_d[4] = {0};
000008  2200              MOVS     r2,#0
00000a  9202              STR      r2,[sp,#8]
;;;484    	
;;;485      fill_data4_payload(adc_ctrl_1_d,(BQ79616_LPF_BB_EN | BQ79616_LPF_VCELL_EN | BQ79616_MAIN_GO | BQ79616_MAIN_MODE_B1),0x00,(BQ79616_AUX_GO | BQ79616_AUX_MODE_B1),0);
00000c  2306              MOVS     r3,#6
00000e  211e              MOVS     r1,#0x1e
000010  a802              ADD      r0,sp,#8
000012  9200              STR      r2,[sp,#0]
000014  f7fffffe          BL       fill_data4_payload
000018  a802              ADD      r0,sp,#8              ;483
;;;486      
;;;487      if(is_stack == STACK){  
;;;488          drv_bq796xx_command_framing(STACK_WRITE, 0, BQ79600_ADC_CTRL1, 3, adc_ctrl_1_d, delays);
00001a  f240320d          MOV      r2,#0x30d
00001e  2d01              CMP      r5,#1                 ;487
000020  d008              BEQ      |L36.52|
;;;489      }else{
;;;490          drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ79600_ADC_CTRL1, 3, adc_ctrl_1_d, delays);
000022  e9cd0400          STRD     r0,r4,[sp,#0]
000026  2303              MOVS     r3,#3
000028  4631              MOV      r1,r6
00002a  2090              MOVS     r0,#0x90
00002c  f7fffffe          BL       drv_bq796xx_command_framing
                  |L36.48|
;;;491      }
;;;492    	
;;;493      return 0;
000030  2000              MOVS     r0,#0
;;;494    }
000032  bdfe              POP      {r1-r7,pc}
                  |L36.52|
000034  e9cd0400          STRD     r0,r4,[sp,#0]         ;488
000038  2303              MOVS     r3,#3                 ;488
00003a  2100              MOVS     r1,#0                 ;488
00003c  20b0              MOVS     r0,#0xb0              ;488
00003e  f7fffffe          BL       drv_bq796xx_command_framing
000042  e7f5              B        |L36.48|
;;;495    
                          ENDP


                          AREA ||i.drv_bq796xx_Stop_AFE_ADC||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_Stop_AFE_ADC PROC
;;;495    
;;;496    uint8_t drv_bq796xx_Stop_AFE_ADC(bq796xx_AFE_GPIO_stack is_stack,uint8_t dev_id,uint32_t delays){
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;497      
;;;498      uint8_t   adc_ctrl_1_d[4] = {0};
000008  2200              MOVS     r2,#0
00000a  9202              STR      r2,[sp,#8]
;;;499    	
;;;500      fill_data4_payload(adc_ctrl_1_d,(BQ79616_LPF_BB_EN | BQ79616_LPF_VCELL_EN | BQ79616_MAIN_MODE_B1), 0x00, (BQ79616_AUX_MODE_B1),0);
00000c  2302              MOVS     r3,#2
00000e  211a              MOVS     r1,#0x1a
000010  a802              ADD      r0,sp,#8
000012  9200              STR      r2,[sp,#0]
000014  f7fffffe          BL       fill_data4_payload
000018  a802              ADD      r0,sp,#8              ;498
;;;501      
;;;502      if(is_stack == STACK){  
;;;503          drv_bq796xx_command_framing(STACK_WRITE, 0, BQ79600_ADC_CTRL1, 3, adc_ctrl_1_d, delays);
00001a  f240320d          MOV      r2,#0x30d
00001e  2d01              CMP      r5,#1                 ;502
000020  d008              BEQ      |L37.52|
;;;504      }else{
;;;505          drv_bq796xx_command_framing(SINGLE_WRITE, dev_id, BQ79600_ADC_CTRL1, 3, adc_ctrl_1_d, delays);
000022  e9cd0400          STRD     r0,r4,[sp,#0]
000026  2303              MOVS     r3,#3
000028  4631              MOV      r1,r6
00002a  2090              MOVS     r0,#0x90
00002c  f7fffffe          BL       drv_bq796xx_command_framing
                  |L37.48|
;;;506      }
;;;507      
;;;508      return 0;
000030  2000              MOVS     r0,#0
;;;509    }
000032  bdfe              POP      {r1-r7,pc}
                  |L37.52|
000034  e9cd0400          STRD     r0,r4,[sp,#0]         ;503
000038  2303              MOVS     r3,#3                 ;503
00003a  2100              MOVS     r1,#0                 ;503
00003c  20b0              MOVS     r0,#0xb0              ;503
00003e  f7fffffe          BL       drv_bq796xx_command_framing
000042  e7f5              B        |L37.48|
;;;510    
                          ENDP


                          AREA ||i.drv_bq796xx_check_respone_event||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_check_respone_event PROC
;;;804    
;;;805    uint8_t drv_bq796xx_check_respone_event(void){
000000  b510              PUSH     {r4,lr}
;;;806      static uint16_t rcv_temp_cnt=0;
;;;807      
;;;808      smp_time_count_set(0);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       smp_time_count_set
;;;809      do{
;;;810      
;;;811        if(bq796xx_res_buf_c >= BQ796XX_DATAFRAME_MIN_LEN){ 
000008  4a10              LDR      r2,|L38.76|
                  |L38.10|
00000a  8bd0              LDRH     r0,[r2,#0x1e]  ; bq796xx_res_buf_c
00000c  2805              CMP      r0,#5
00000e  d305              BCC      |L38.28|
;;;812            rcv_temp_cnt = bq796xx_res_buf_c;
000010  8bd0              LDRH     r0,[r2,#0x1e]  ; bq796xx_res_buf_c
000012  8450              STRH     r0,[r2,#0x22]
;;;813            break;
;;;814        }   
;;;815        if(smp_time_count_get() >= BQ796XX_TIMEOUT_10MS) return(BQ796XX_RES_TIMEOUT);      
;;;816      }while(1);
;;;817      
;;;818      smp_time_count_set(0);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       smp_time_count_set
00001a  e005              B        |L38.40|
                  |L38.28|
00001c  f7fffffe          BL       smp_time_count_get
000020  2805              CMP      r0,#5                 ;815
000022  d3f2              BCC      |L38.10|
000024  2000              MOVS     r0,#0                 ;815
;;;819      do{  
;;;820        if(bq796xx_res_buf_c > rcv_temp_cnt){ //keep waiting RX data
;;;821            smp_time_count_set(0);
;;;822        }else{
;;;823    				rcv_temp_cnt = bq796xx_res_buf_c;
;;;824    		}   
;;;825    		
;;;826        if(smp_time_count_get()>=1) break;      
;;;827      }while(1);
;;;828      
;;;829      drv_bq796xx_clear_fifobuffer();
;;;830      
;;;831      return(BQ796XX_RES_RCV_DAT);
;;;832    }
000026  bd10              POP      {r4,pc}
                  |L38.40|
000028  8bd0              LDRH     r0,[r2,#0x1e]         ;820  ; bq796xx_res_buf_c
00002a  8c51              LDRH     r1,[r2,#0x22]         ;820  ; rcv_temp_cnt
00002c  4288              CMP      r0,r1                 ;820
00002e  d903              BLS      |L38.56|
000030  2000              MOVS     r0,#0                 ;821
000032  f7fffffe          BL       smp_time_count_set
000036  e000              B        |L38.58|
                  |L38.56|
000038  8450              STRH     r0,[r2,#0x22]         ;823
                  |L38.58|
00003a  f7fffffe          BL       smp_time_count_get
00003e  2800              CMP      r0,#0                 ;826
000040  d0f2              BEQ      |L38.40|
000042  f7fffffe          BL       drv_bq796xx_clear_fifobuffer
000046  2001              MOVS     r0,#1                 ;831
000048  bd10              POP      {r4,pc}
;;;833    
                          ENDP

00004a  0000              DCW      0x0000
                  |L38.76|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_check_respone_event2||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_check_respone_event2 PROC
;;;833    
;;;834    uint8_t drv_bq796xx_check_respone_event2(void){
000000  b570              PUSH     {r4-r6,lr}
;;;835      static uint16_t rcv_temp_cnt=0;
;;;836      static uint8_t steps=0;
;;;837    		
;;;838    	switch(steps){
000002  4c1e              LDR      r4,|L39.124|
000004  2500              MOVS     r5,#0
000006  4620              MOV      r0,r4
000008  7961              LDRB     r1,[r4,#5]  ; steps
;;;839    		case 0:
;;;840    			  smp_time_count_set(0);
;;;841    		    ++steps;
;;;842    	      break;
;;;843        case 1:
;;;844            if(bq796xx_res_buf_c >= BQ796XX_DATAFRAME_MIN_LEN){ 
00000a  8bc0              LDRH     r0,[r0,#0x1e]
00000c  2905              CMP      r1,#5                 ;838
00000e  d22d              BCS      |L39.108|
000010  e8dff001          TBB      [pc,r1]               ;838
000014  030a171e          DCB      0x03,0x0a,0x17,0x1e
000018  2e00              DCB      0x2e,0x00
00001a  2000              MOVS     r0,#0                 ;840
00001c  f7fffffe          BL       smp_time_count_set
000020  7960              LDRB     r0,[r4,#5]            ;841  ; steps
000022  1c40              ADDS     r0,r0,#1              ;841
000024  7160              STRB     r0,[r4,#5]            ;841
000026  e021              B        |L39.108|
000028  2805              CMP      r0,#5
00002a  d302              BCC      |L39.50|
;;;845                rcv_temp_cnt = bq796xx_res_buf_c;
00002c  84a0              STRH     r0,[r4,#0x24]
;;;846                ++steps;                                          //next step
00002e  2002              MOVS     r0,#2
000030  7160              STRB     r0,[r4,#5]
                  |L39.50|
;;;847            } 		
;;;848            if(smp_time_count_get() >= BQ796XX_TIMEOUT_10MS){ 
000032  f7fffffe          BL       smp_time_count_get
000036  2805              CMP      r0,#5
000038  d318              BCC      |L39.108|
;;;849    					steps =0;
00003a  7165              STRB     r5,[r4,#5]
;;;850    					rcv_temp_cnt = 0;
00003c  84a5              STRH     r5,[r4,#0x24]
;;;851    					return(BQ796XX_RES_TIMEOUT); 		
00003e  2000              MOVS     r0,#0
;;;852    				}
;;;853    			  break;
;;;854    	  case 2:
;;;855    			  smp_time_count_set(0);
;;;856    		    ++steps;
;;;857    		    break;
;;;858    	  case 3:
;;;859            if(bq796xx_res_buf_c > rcv_temp_cnt){ //keep waiting RX data
;;;860                smp_time_count_set(0);
;;;861            }
;;;862    				rcv_temp_cnt = bq796xx_res_buf_c;    
;;;863            
;;;864    				if(smp_time_count_get()>=1){
;;;865    					++steps;                                          //next step
;;;866    			  }
;;;867    				break;	
;;;868        case 4:
;;;869            drv_bq796xx_clear_fifobuffer();		
;;;870    				steps =0;
;;;871    				return(BQ796XX_RES_RCV_DAT);	
;;;872    	}
;;;873    	
;;;874    	return(BQ796XX_RES_WAITTING); 
;;;875    }
000040  bd70              POP      {r4-r6,pc}
000042  2000              MOVS     r0,#0                 ;855
000044  f7fffffe          BL       smp_time_count_set
000048  7960              LDRB     r0,[r4,#5]            ;856  ; steps
00004a  1c40              ADDS     r0,r0,#1              ;856
00004c  7160              STRB     r0,[r4,#5]            ;856
00004e  e00d              B        |L39.108|
000050  8ca1              LDRH     r1,[r4,#0x24]         ;859  ; rcv_temp_cnt
000052  4288              CMP      r0,r1                 ;859
000054  d902              BLS      |L39.92|
000056  2000              MOVS     r0,#0                 ;860
000058  f7fffffe          BL       smp_time_count_set
                  |L39.92|
00005c  8be0              LDRH     r0,[r4,#0x1e]         ;862  ; bq796xx_res_buf_c
00005e  84a0              STRH     r0,[r4,#0x24]         ;862
000060  f7fffffe          BL       smp_time_count_get
000064  b110              CBZ      r0,|L39.108|
000066  7960              LDRB     r0,[r4,#5]            ;865  ; steps
000068  1c40              ADDS     r0,r0,#1              ;865
00006a  7160              STRB     r0,[r4,#5]            ;865
                  |L39.108|
00006c  2002              MOVS     r0,#2                 ;874
00006e  bd70              POP      {r4-r6,pc}
000070  f7fffffe          BL       drv_bq796xx_clear_fifobuffer
000074  7165              STRB     r5,[r4,#5]            ;870
000076  2001              MOVS     r0,#1                 ;871
000078  bd70              POP      {r4-r6,pc}
;;;876    
                          ENDP

00007a  0000              DCW      0x0000
                  |L39.124|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_clean_fifo||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_clean_fifo PROC
;;;2081   
;;;2082   uint8_t drv_bq796xx_clean_fifo(void){
000000  b510              PUSH     {r4,lr}
;;;2083   
;;;2084   	drv_bq796xx_clear_fifobuffer();
000002  f7fffffe          BL       drv_bq796xx_clear_fifobuffer
;;;2085   	//smp_fifo_clean(&uart0_rx_fifo);
;;;2086   	//bq796xx_res_buf_c = 0;
;;;2087   }
000006  bd10              POP      {r4,pc}
;;;2088   
                          ENDP


                          AREA ||i.drv_bq796xx_clear_fifobuffer||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_clear_fifobuffer PROC
;;;139    
;;;140    void drv_bq796xx_clear_fifobuffer(void){
000000  b538              PUSH     {r3-r5,lr}
;;;141    	uint8_t rx_data = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;142    	
;;;143    	  GPIOD->ODR |= GPIO_PIN_14;
000006  4d0b              LDR      r5,|L41.52|
000008  6828              LDR      r0,[r5,#0]
00000a  f4404080          ORR      r0,r0,#0x4000
00000e  6028              STR      r0,[r5,#0]
;;;144        while(smp_uart_get(&bq796xx_uart, &rx_data)==SMP_SUCCESS){
;;;145            bq796xx_res_buf_c--;
000010  4c09              LDR      r4,|L41.56|
000012  e002              B        |L41.26|
                  |L41.20|
000014  8be0              LDRH     r0,[r4,#0x1e]  ; bq796xx_res_buf_c
000016  1e40              SUBS     r0,r0,#1
000018  83e0              STRH     r0,[r4,#0x1e]
                  |L41.26|
00001a  4807              LDR      r0,|L41.56|
00001c  4669              MOV      r1,sp                 ;144
00001e  308c              ADDS     r0,r0,#0x8c           ;144
000020  f7fffffe          BL       smp_uart_get
000024  2800              CMP      r0,#0                 ;144
000026  d0f5              BEQ      |L41.20|
;;;146        }
;;;147    		GPIOD->ODR &= ~GPIO_PIN_14;
000028  6828              LDR      r0,[r5,#0]
00002a  f4204080          BIC      r0,r0,#0x4000
00002e  6028              STR      r0,[r5,#0]
;;;148    }
000030  bd38              POP      {r3-r5,pc}
;;;149    
                          ENDP

000032  0000              DCW      0x0000
                  |L41.52|
                          DCD      0x48000c14
                  |L41.56|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_command_framing||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_command_framing PROC
;;;221    
;;;222    void drv_bq796xx_command_framing(uint8_t cmd_type, uint8_t dev_id, uint16_t reg_addr, uint8_t datalen, uint8_t *data_array, uint32_t delayms){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b085              SUB      sp,sp,#0x14
000006  4605              MOV      r5,r0
000008  e9dd890e          LDRD     r8,r9,[sp,#0x38]
00000c  468a              MOV      r10,r1
;;;223        uint8_t i, write[20], data_size, addr_h, addr_l, index = 1;
00000e  2601              MOVS     r6,#1
;;;224        uint16_t  crc;
;;;225      
;;;226        // ---------- reset RX buffer before send out command ----------
;;;227        data_size = 5 + datalen;                               // initial(1) + address(2) + CRC(2) + databytes(xu8DataLen)
000010  1d58              ADDS     r0,r3,#5
000012  b2c4              UXTB     r4,r0
;;;228        addr_h = Word2u8(reg_addr,HIGH_BYTE);
000014  2100              MOVS     r1,#0
000016  4610              MOV      r0,r2
000018  f7fffffe          BL       Word2u8
00001c  4683              MOV      r11,r0
;;;229        addr_l = Word2u8(reg_addr,LOW_BYTE);
00001e  2101              MOVS     r1,#1
000020  4610              MOV      r0,r2
000022  f7fffffe          BL       Word2u8
000026  466f              MOV      r7,sp                 ;223
;;;230    
;;;231        // ---------- reset check initial and ID byte for single R/W command ----------
;;;232        switch (cmd_type){
000028  2d80              CMP      r5,#0x80
00002a  d009              BEQ      |L42.64|
00002c  2d90              CMP      r5,#0x90
00002e  d004              BEQ      |L42.58|
000030  2db0              CMP      r5,#0xb0
000032  d00b              BEQ      |L42.76|
000034  2dd0              CMP      r5,#0xd0
000036  d10c              BNE      |L42.82|
000038  e008              B        |L42.76|
                  |L42.58|
;;;233            case SINGLE_WRITE:
;;;234                cmd_type = cmd_type + datalen-1;                // add length for write command
00003a  f103018f          ADD      r1,r3,#0x8f
00003e  b2cd              UXTB     r5,r1
                  |L42.64|
;;;235            case SINGLE_READ:
;;;236                data_size++;                                    // one more device ID byte for single R/W
000040  1c64              ADDS     r4,r4,#1
000042  b2e4              UXTB     r4,r4
;;;237                write[index++] = dev_id;
000044  2602              MOVS     r6,#2
000046  f88da001          STRB     r10,[sp,#1]
;;;238                break;
00004a  e002              B        |L42.82|
                  |L42.76|
;;;239            case STACK_WRITE:
;;;240            case BROAD_WRITE:
;;;241                cmd_type = cmd_type + datalen-1;               // add length for write command
00004c  18e9              ADDS     r1,r5,r3
00004e  1e49              SUBS     r1,r1,#1
000050  b2cd              UXTB     r5,r1
                  |L42.82|
;;;242                break;
;;;243        }
;;;244    
;;;245        // ---------- fill initial and address bytes ----------
;;;246        write[0] = cmd_type;
000052  f88d5000          STRB     r5,[sp,#0]
;;;247        write[index++] = addr_h;
000056  1c71              ADDS     r1,r6,#1
000058  b2c9              UXTB     r1,r1
00005a  f807b006          STRB     r11,[r7,r6]
;;;248        write[index++] = addr_l;
00005e  5478              STRB     r0,[r7,r1]
;;;249    
;;;250        // ---------- fill data bytes ----------
;;;251        for ( i = 0; i < datalen; i++ ){
000060  2000              MOVS     r0,#0
000062  e009              B        |L42.120|
                  |L42.100|
;;;252            write[data_size-3-i] = data_array[datalen-i-1];
000064  1a19              SUBS     r1,r3,r0
000066  4441              ADD      r1,r1,r8
000068  1a22              SUBS     r2,r4,r0
00006a  443a              ADD      r2,r2,r7
00006c  f8111c01          LDRB     r1,[r1,#-1]
000070  f8021c03          STRB     r1,[r2,#-3]
000074  1c40              ADDS     r0,r0,#1              ;251
000076  b2c0              UXTB     r0,r0                 ;251
                  |L42.120|
000078  4298              CMP      r0,r3                 ;251
00007a  d3f3              BCC      |L42.100|
;;;253        }
;;;254    
;;;255        // ---------- fill CRC bytes ----------
;;;256        crc = Func_Cal_ModbusCRC16(write,data_size-2);
00007c  1ea0              SUBS     r0,r4,#2
00007e  b2c1              UXTB     r1,r0
000080  4668              MOV      r0,sp
000082  f7fffffe          BL       Func_Cal_ModbusCRC16
;;;257            
;;;258        write[data_size-2] = (uint8_t)(crc&0xFF);
000086  1939              ADDS     r1,r7,r4
000088  f8010d02          STRB     r0,[r1,#-2]!
;;;259        write[data_size-1] = (uint8_t)((crc&0xFF00)>>8);
00008c  0a00              LSRS     r0,r0,#8
00008e  7048              STRB     r0,[r1,#1]
;;;260    
;;;261        // ---------- send out packet ----------
;;;262        drv_bq796xx_uart_puts(write, data_size);
000090  4621              MOV      r1,r4
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       drv_bq796xx_uart_puts
;;;263    
;;;264    		if(delayms!=0){
000098  f1b90f00          CMP      r9,#0
00009c  d002              BEQ      |L42.164|
;;;265            drv_bq796xx_delay_ms(delayms);
00009e  4648              MOV      r0,r9
0000a0  f7fffffe          BL       drv_bq796xx_delay_ms
                  |L42.164|
;;;266    		}
;;;267    }
0000a4  b005              ADD      sp,sp,#0x14
0000a6  e8bd8ff0          POP      {r4-r11,pc}
;;;268    
                          ENDP


                          AREA ||i.drv_bq796xx_data_frame_parser||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_data_frame_parser PROC
;;;880    
;;;881    uint8_t drv_bq796xx_data_frame_parser(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;882    {
;;;883      uint8_t rx_data = 0;
000002  2600              MOVS     r6,#0
000004  9600              STR      r6,[sp,#0]
;;;884      uint8_t i=0;
000006  2400              MOVS     r4,#0
;;;885      static uint16_t rcv_temp_cnt=0;
;;;886      static uint16_t read_reg_adr = 0;
;;;887      static uint8_t device_id = 0;
;;;888      static uint8_t data_len=0;
;;;889      static uint16_t  crc,rcv_crc;
;;;890    	static int8_t fifo_res;
;;;891      
;;;892      bq796xx_event_cb_type bq_event_type = BQ_EVENT_OTHER_ERR;
000008  2507              MOVS     r5,#7
;;;893      
;;;894      // Capture data and check data frame
;;;895      //----------------------------------------------------------------------------
;;;896      //Short data frame
;;;897      //----------------------------------------
;;;898    	#if 0
;;;899      smp_time_count_set(0);
;;;900      do{  
;;;901        if(bq796xx_res_buf_c >= BQ796XX_DATAFRAME_MIN_LEN){
;;;902            rcv_temp_cnt = bq796xx_res_buf_c;
;;;903            break;
;;;904        }    
;;;905        if(smp_time_count_get()>=BQ796XX_TIMEOUT_10MS) return(BQ796XX_RES_TIMEOUT);      
;;;906      }while(1);    
;;;907      //----------------------------------------
;;;908    
;;;909      smp_time_count_set(1);
;;;910      do{  
;;;911        if(bq796xx_res_buf_c> rcv_temp_cnt){ //keep waiting RX data
;;;912            smp_time_count_set(0);
;;;913        }    
;;;914        if(smp_time_count_get()>=1) break;      
;;;915      }while(1);
;;;916      //----------------------------------------
;;;917      #endif
;;;918    	
;;;919      if(smp_uart_get(&bq796xx_uart, &rx_data)==SMP_SUCCESS){
00000a  4669              MOV      r1,sp
00000c  4879              LDR      r0,|L43.500|
00000e  f7fffffe          BL       smp_uart_get
;;;920        --bq796xx_res_buf_c;
000012  4f78              LDR      r7,|L43.500|
000014  3f8c              SUBS     r7,r7,#0x8c
000016  b110              CBZ      r0,|L43.30|
;;;921        if(rx_data < BQ796XX_PAYLOAD_MAX_LEN){
;;;922            bq796xx_res_buf[BQ796XX_DF_RES_PAYLOAD_LEN] = rx_data;
;;;923            data_len=rx_data;        
;;;924          
;;;925            for(i=0;i <(data_len+6);i++){
;;;926              fifo_res = smp_uart_get(&bq796xx_uart, &rx_data);
;;;927    			if(fifo_res != 0)
;;;928    			{
;;;929    	//			appSerialUartSendMessage("empty ");
;;;930    			}
;;;931              bq796xx_res_buf[BQ796XX_DF_RES_PAYLOAD_LEN+1+i] = rx_data;
;;;932            }
;;;933            bq796xx_res_buf_c = bq796xx_res_buf_c - (data_len+6);
;;;934        }else{
;;;935            return(BQ796XX_RES_ERR);
;;;936        }        
;;;937      }else{
;;;938        bq796xx_res_buf_c = 0;
000018  83fe              STRH     r6,[r7,#0x1e]
;;;939        return(BQ796XX_RES_ERR);
00001a  2002              MOVS     r0,#2
;;;940      }
;;;941      
;;;942      //Check CRC
;;;943      //-----------------------------------------------------------------------------------------------------
;;;944      //DumpBuffer(bq796xx_res_buf, data_len+5);
;;;945      
;;;946      crc = bq796xx_res_buf[BQ796XX_DF_RES_PAYLOAD_LEN+data_len+5] + bq796xx_res_buf[BQ796XX_DF_RES_PAYLOAD_LEN+data_len+6]*256; 
;;;947      rcv_crc = Func_Cal_ModbusCRC16(bq796xx_res_buf,data_len+5);
;;;948      if(rcv_crc != crc) 	  
;;;949      {
;;;950    	//	GPIOD->ODR ^= GPIO_PIN_15;
;;;951    	//  appSerialUartSendMessage("Crc error");
;;;952    	  return(BQ796XX_RES_ERR_CRC);  
;;;953      }
;;;954      //-----------------------------------------------------------------------------------------------------
;;;955      
;;;956      //Paser data frame and stroage data
;;;957      //-----------------------------------------------------------------------------------------------------
;;;958      read_reg_adr = bq796xx_res_buf[BQ796XX_DF_REG_ADR_MSB]*256+ bq796xx_res_buf[BQ796XX_DF_REG_ADR_LSB];
;;;959      
;;;960    	device_id = bq796xx_res_buf[BQ796XX_DF_DEV_ADR];
;;;961    	
;;;962    	if(bq796xx_data.comm_dir == DIR_SOUTH){
;;;963    	    device_id = (bq796xx_default.bmu_total_num+1) - device_id;
;;;964    	}
;;;965    	
;;;966      switch(read_reg_adr){
;;;967        case BQ79600_VCELL16_H:
;;;968          for( i=0 ;i < (data_len+1)/2; i++){
;;;969              bq796xx_data.vcell_data[device_id-1][15-i]=bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+(i*2)] * 256.0f + bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+(i*2+1)];
;;;970          }
;;;971    			
;;;972    			bq_event_type = BQ_EVENT_VCELL;
;;;973    			
;;;974          break;
;;;975        case BQ79600_GPIO1_RES_H:  
;;;976          for( i=0 ;i < (data_len+1)/2; i++){
;;;977              bq796xx_data.gpio_data[device_id-1][i]=bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+(i*2)] * 256.0f + bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+(i*2+1)];
;;;978          }    
;;;979    			
;;;980    			bq_event_type = BQ_EVENT_GPIO_ADC;
;;;981    			
;;;982          break;
;;;983        case BQ796XX_FAULT_SUMMARY:  
;;;984          bq796xx_data.fault_summary[device_id-1] = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD];
;;;985    		  
;;;986    		  bq_event_type = BQ_EVENT_FAULT;
;;;987    		
;;;988          break;
;;;989        case BQ796XX_FAULT_OV1:  
;;;990          bq796xx_data.fault_ov[device_id-1] = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD]*256+ bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+1];
;;;991          bq796xx_data.fault_uv[device_id-1] = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+2]*256+ bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+3];
;;;992        
;;;993          bq_event_type = BQ_EVENT_FAULTOVUV;		
;;;994    		
;;;995    		  break;      
;;;996        case BQ796XX_FAULT_OT:  
;;;997          bq796xx_data.fault_ot[device_id-1] = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD];
;;;998          bq796xx_data.fault_ut[device_id-1] = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+1];
;;;999    		
;;;1000   		  bq_event_type = BQ_EVENT_FAULTOTUT;		
;;;1001         break;    
;;;1002       case BQ79600_DIR0_ADDR:  
;;;1003         bq796xx_data.top_stack_north_id = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD];
;;;1004         bq796xx_data.top_stack_south_id = bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD+1];
;;;1005   		
;;;1006   		  bq_event_type = BQ_EVENT_DIR_ADDR;		
;;;1007         break; 
;;;1008       case BQ79600_ACTIVE_CELL:  
;;;1009         bq796xx_data.ns_flag = (bq796xx_res_buf[BQ796XX_DF_REG_PAYLOAD] & 0xC0);
;;;1010         
;;;1011   		  bq_event_type = BQ_EVENT_ACTIVE_CELL;		
;;;1012         break; 		
;;;1013     }
;;;1014     //-----------------------------------------------------------------------------------------------------
;;;1015     
;;;1016   	bq796xx_data.paser_id = device_id;
;;;1017   	
;;;1018   	//Execution callback function
;;;1019   	if(bq796xx_event_cb != NULL){
;;;1020   	    bq796xx_event_cb(&bq796xx_data, bq_event_type);
;;;1021     }
;;;1022   	
;;;1023   	//bq796xx_uart.
;;;1024     //int8_t smp_fifo_clean(smp_fifo_t *p_fifo)
;;;1025     //smp_fifo_t 								uart0_rx_fifo = {0};
;;;1026     //uart0_rx_fifo.in =0;
;;;1027     //uart0_rx_fifo.out =0;
;;;1028   	
;;;1029   	return(BQ796XX_RES_OK);
;;;1030   }
00001c  bdf8              POP      {r3-r7,pc}
                  |L43.30|
00001e  8bf8              LDRH     r0,[r7,#0x1e]         ;920  ; bq796xx_res_buf_c
000020  1e40              SUBS     r0,r0,#1              ;920
000022  83f8              STRH     r0,[r7,#0x1e]         ;920
000024  f89d0000          LDRB     r0,[sp,#0]            ;921
000028  2880              CMP      r0,#0x80              ;921
00002a  d228              BCS      |L43.126|
00002c  4e72              LDR      r6,|L43.504|
00002e  7030              STRB     r0,[r6,#0]            ;922
000030  71f8              STRB     r0,[r7,#7]            ;923
000032  e00a              B        |L43.74|
                  |L43.52|
000034  4669              MOV      r1,sp                 ;926
000036  486f              LDR      r0,|L43.500|
000038  f7fffffe          BL       smp_uart_get
00003c  7238              STRB     r0,[r7,#8]            ;926
00003e  1931              ADDS     r1,r6,r4              ;931
000040  f89d0000          LDRB     r0,[sp,#0]            ;931
000044  7048              STRB     r0,[r1,#1]            ;931
000046  1c64              ADDS     r4,r4,#1              ;925
000048  b2e4              UXTB     r4,r4                 ;925
                  |L43.74|
00004a  79f8              LDRB     r0,[r7,#7]            ;925  ; data_len
00004c  1d80              ADDS     r0,r0,#6              ;925
00004e  4284              CMP      r4,r0                 ;925
000050  d3f0              BCC      |L43.52|
000052  8bf9              LDRH     r1,[r7,#0x1e]         ;933  ; bq796xx_res_buf_c
000054  79f8              LDRB     r0,[r7,#7]            ;933  ; data_len
000056  1a09              SUBS     r1,r1,r0              ;933
000058  1f89              SUBS     r1,r1,#6              ;933
00005a  83f9              STRH     r1,[r7,#0x1e]         ;933
00005c  1831              ADDS     r1,r6,r0              ;946
00005e  794a              LDRB     r2,[r1,#5]            ;946
000060  7989              LDRB     r1,[r1,#6]            ;946
000062  eb022101          ADD      r1,r2,r1,LSL #8       ;946
000066  8539              STRH     r1,[r7,#0x28]         ;946
000068  1d40              ADDS     r0,r0,#5              ;947
00006a  b2c1              UXTB     r1,r0                 ;947
00006c  4862              LDR      r0,|L43.504|
00006e  f7fffffe          BL       Func_Cal_ModbusCRC16
000072  8578              STRH     r0,[r7,#0x2a]         ;947
000074  8d39              LDRH     r1,[r7,#0x28]         ;948  ; crc
000076  4288              CMP      r0,r1                 ;948
000078  d003              BEQ      |L43.130|
00007a  20fe              MOVS     r0,#0xfe              ;952
00007c  bdf8              POP      {r3-r7,pc}
                  |L43.126|
00007e  2002              MOVS     r0,#2                 ;935
000080  bdf8              POP      {r3-r7,pc}
                  |L43.130|
000082  78f0              LDRB     r0,[r6,#3]            ;958  ; bq796xx_res_buf
000084  78b1              LDRB     r1,[r6,#2]            ;958  ; bq796xx_res_buf
000086  eb002001          ADD      r0,r0,r1,LSL #8       ;958
00008a  b280              UXTH     r0,r0                 ;958
00008c  84f8              STRH     r0,[r7,#0x26]         ;958
00008e  7871              LDRB     r1,[r6,#1]            ;960  ; bq796xx_res_buf
000090  71b9              STRB     r1,[r7,#6]            ;960
000092  4a59              LDR      r2,|L43.504|
000094  3286              ADDS     r2,r2,#0x86           ;962
000096  f8923d8b          LDRB     r3,[r2,#0xd8b]        ;962  ; bq796xx_data
00009a  2b01              CMP      r3,#1                 ;962
00009c  d105              BNE      |L43.170|
00009e  4b55              LDR      r3,|L43.500|
0000a0  3b0c              SUBS     r3,r3,#0xc            ;963
0000a2  7a9b              LDRB     r3,[r3,#0xa]          ;963  ; bq796xx_default
0000a4  1a59              SUBS     r1,r3,r1              ;963
0000a6  1c49              ADDS     r1,r1,#1              ;963
0000a8  71b9              STRB     r1,[r7,#6]            ;963
                  |L43.170|
0000aa  f240533c          MOV      r3,#0x53c             ;966
0000ae  f2a0513c          SUB      r1,r0,#0x53c          ;966
0000b2  4298              CMP      r0,r3                 ;966
0000b4  d065              BEQ      |L43.386|
0000b6  dc0a              BGT      |L43.206|
0000b8  2803              CMP      r0,#3                 ;966
0000ba  d074              BEQ      |L43.422|
0000bc  f5a07040          SUB      r0,r0,#0x300          ;966
0000c0  3806              SUBS     r0,#6                 ;966
0000c2  d07d              BEQ      |L43.448|
0000c4  f5a07000          SUB      r0,r0,#0x200          ;966
0000c8  3827              SUBS     r0,r0,#0x27           ;966
0000ca  d12d              BNE      |L43.296|
0000cc  e052              B        |L43.372|
                  |L43.206|
0000ce  2904              CMP      r1,#4                 ;966
0000d0  d06c              BEQ      |L43.428|
0000d2  ed9f0a4a          VLDR     s0,|L43.508|
0000d6  292c              CMP      r1,#0x2c              ;966
0000d8  d002              BEQ      |L43.224|
0000da  2952              CMP      r1,#0x52              ;966
0000dc  d17e              BNE      |L43.476|
0000de  e024              B        |L43.298|
                  |L43.224|
0000e0  2000              MOVS     r0,#0                 ;968
0000e2  79b9              LDRB     r1,[r7,#6]            ;920
0000e4  79fd              LDRB     r5,[r7,#7]            ;920
0000e6  1e49              SUBS     r1,r1,#1              ;969
0000e8  eb021341          ADD      r3,r2,r1,LSL #5       ;969
0000ec  1c6d              ADDS     r5,r5,#1              ;968
0000ee  e017              B        |L43.288|
                  |L43.240|
0000f0  eb060140          ADD      r1,r6,r0,LSL #1       ;969
0000f4  794c              LDRB     r4,[r1,#5]            ;969
0000f6  7909              LDRB     r1,[r1,#4]            ;969
0000f8  ee004a90          VMOV     s1,r4                 ;969
0000fc  ee011a10          VMOV     s2,r1                 ;969
000100  f1c0040f          RSB      r4,r0,#0xf            ;969
000104  eef80a60          VCVT.F32.U32 s1,s1                 ;969
000108  eeb81a41          VCVT.F32.U32 s2,s2                 ;969
00010c  ee410a00          VMLA.F32 s1,s2,s0              ;969
000110  eefc0ae0          VCVT.U32.F32 s1,s1                 ;969
000114  ee101a90          VMOV     r1,s1                 ;969
000118  f8231014          STRH     r1,[r3,r4,LSL #1]     ;969
00011c  1c40              ADDS     r0,r0,#1              ;968
00011e  b2c0              UXTB     r0,r0                 ;968
                  |L43.288|
000120  ebb00f55          CMP      r0,r5,LSR #1          ;968
000124  d3e4              BCC      |L43.240|
000126  2500              MOVS     r5,#0                 ;972
                  |L43.296|
000128  e058              B        |L43.476|
                  |L43.298|
00012a  2000              MOVS     r0,#0                 ;976
00012c  79b9              LDRB     r1,[r7,#6]            ;920
00012e  79fd              LDRB     r5,[r7,#7]            ;920
000130  1e49              SUBS     r1,r1,#1              ;969
000132  eb021401          ADD      r4,r2,r1,LSL #4       ;977
000136  1c6d              ADDS     r5,r5,#1              ;968
000138  e017              B        |L43.362|
                  |L43.314|
00013a  eb060140          ADD      r1,r6,r0,LSL #1       ;977
00013e  794b              LDRB     r3,[r1,#5]            ;977
000140  7909              LDRB     r1,[r1,#4]            ;977
000142  ee003a90          VMOV     s1,r3                 ;977
000146  ee011a10          VMOV     s2,r1                 ;977
00014a  eb040340          ADD      r3,r4,r0,LSL #1       ;977
00014e  eef80a60          VCVT.F32.U32 s1,s1                 ;977
000152  eeb81a41          VCVT.F32.U32 s2,s2                 ;977
000156  ee410a00          VMLA.F32 s1,s2,s0              ;977
00015a  eefc0ae0          VCVT.U32.F32 s1,s1                 ;977
00015e  ee101a90          VMOV     r1,s1                 ;977
000162  f8a317e0          STRH     r1,[r3,#0x7e0]        ;977
000166  1c40              ADDS     r0,r0,#1              ;976
000168  b2c0              UXTB     r0,r0                 ;976
                  |L43.362|
00016a  ebb00f55          CMP      r0,r5,LSR #1          ;976
00016e  d3e4              BCC      |L43.314|
000170  2501              MOVS     r5,#1                 ;980
000172  e033              B        |L43.476|
                  |L43.372|
000174  79b9              LDRB     r1,[r7,#6]            ;984  ; device_id
000176  7930              LDRB     r0,[r6,#4]            ;984  ; bq796xx_res_buf
000178  4411              ADD      r1,r1,r2              ;984
00017a  f8810bcf          STRB     r0,[r1,#0xbcf]        ;984
00017e  2502              MOVS     r5,#2                 ;986
000180  e02c              B        |L43.476|
                  |L43.386|
000182  7970              LDRB     r0,[r6,#5]            ;990  ; bq796xx_res_buf
000184  7931              LDRB     r1,[r6,#4]            ;990  ; bq796xx_res_buf
000186  eb002101          ADD      r1,r0,r1,LSL #8       ;990
00018a  79b8              LDRB     r0,[r7,#6]            ;990  ; device_id
00018c  1e40              SUBS     r0,r0,#1              ;990
00018e  eb020040          ADD      r0,r2,r0,LSL #1       ;990
000192  f8a01c10          STRH     r1,[r0,#0xc10]        ;990
000196  79f1              LDRB     r1,[r6,#7]            ;991  ; bq796xx_res_buf
000198  79b3              LDRB     r3,[r6,#6]            ;991  ; bq796xx_res_buf
00019a  eb012103          ADD      r1,r1,r3,LSL #8       ;991
00019e  f8a01c8e          STRH     r1,[r0,#0xc8e]        ;991
0001a2  2503              MOVS     r5,#3                 ;993
0001a4  e01a              B        |L43.476|
                  |L43.422|
0001a6  e013              B        |L43.464|
0001a8  e00a              B        |L43.448|
0001aa  e7ff              B        |L43.428|
                  |L43.428|
0001ac  79b8              LDRB     r0,[r7,#6]            ;997  ; device_id
0001ae  7931              LDRB     r1,[r6,#4]            ;997  ; bq796xx_res_buf
0001b0  4410              ADD      r0,r0,r2              ;997
0001b2  f8801d0b          STRB     r1,[r0,#0xd0b]        ;997
0001b6  7971              LDRB     r1,[r6,#5]            ;998  ; bq796xx_res_buf
0001b8  f8801d4a          STRB     r1,[r0,#0xd4a]        ;998
0001bc  2504              MOVS     r5,#4                 ;1000
0001be  e00d              B        |L43.476|
                  |L43.448|
0001c0  7930              LDRB     r0,[r6,#4]            ;1003  ; bq796xx_res_buf
0001c2  f8820d8c          STRB     r0,[r2,#0xd8c]        ;1003
0001c6  7970              LDRB     r0,[r6,#5]            ;1004  ; bq796xx_res_buf
0001c8  f8820d8d          STRB     r0,[r2,#0xd8d]        ;1004
0001cc  2505              MOVS     r5,#5                 ;1006
0001ce  e005              B        |L43.476|
                  |L43.464|
0001d0  7930              LDRB     r0,[r6,#4]            ;1009  ; bq796xx_res_buf
0001d2  f00000c0          AND      r0,r0,#0xc0           ;1009
0001d6  f8820d8e          STRB     r0,[r2,#0xd8e]        ;1009
0001da  2506              MOVS     r5,#6                 ;1011
                  |L43.476|
0001dc  79b8              LDRB     r0,[r7,#6]            ;1016  ; device_id
0001de  f8820d8a          STRB     r0,[r2,#0xd8a]        ;1016
0001e2  6cfa              LDR      r2,[r7,#0x4c]         ;974  ; bq796xx_event_cb
0001e4  b11a              CBZ      r2,|L43.494|
0001e6  4804              LDR      r0,|L43.504|
0001e8  4629              MOV      r1,r5                 ;1020
0001ea  3086              ADDS     r0,r0,#0x86           ;1020
0001ec  4790              BLX      r2                    ;1020
                  |L43.494|
0001ee  2001              MOVS     r0,#1                 ;1029
0001f0  bdf8              POP      {r3-r7,pc}
;;;1031   
                          ENDP

0001f2  0000              DCW      0x0000
                  |L43.500|
                          DCD      ||.data||+0x8c
                  |L43.504|
                          DCD      ||area_number.59||
                  |L43.508|
0001fc  43800000          DCFS     0x43800000 ; 256

                          AREA ||i.drv_bq796xx_delay_ms||, CODE, READONLY, ALIGN=1

                  drv_bq796xx_delay_ms PROC
;;;101    
;;;102    void drv_bq796xx_delay_ms(uint32_t ms_c){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;103      uint32_t nop_c=0;
;;;104      uint32_t time_out=0;
;;;105        
;;;106      time_out = HAL_GetTick()+ ms_c;
000004  f7fffffe          BL       HAL_GetTick
000008  4404              ADD      r4,r4,r0
                  |L44.10|
;;;107      while(HAL_GetTick()< time_out){
00000a  f7fffffe          BL       HAL_GetTick
00000e  42a0              CMP      r0,r4
000010  d3fb              BCC      |L44.10|
;;;108        nop_c++;
;;;109      }  
;;;110    }
000012  bd10              POP      {r4,pc}
;;;111                                                                                                
                          ENDP


                          AREA ||i.drv_bq796xx_direction_set_steps||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_direction_set_steps PROC
;;;1771   //------------------------------------------------------------------------------------------
;;;1772   uint8_t drv_bq796xx_direction_set_steps(uint8_t ns_dir_bmu_cnt,bq796xx_dir_set_steps_enum *afe_phase,uint8_t maxcnt, uint8_t dir, uint8_t *step_complete_f, uint8_t *before_delay_ms){
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b087              SUB      sp,sp,#0x1c
000006  4681              MOV      r9,r0
000008  e9dd5414          LDRD     r5,r4,[sp,#0x50]
00000c  469a              MOV      r10,r3
;;;1773       uint8_t    d_payload[4] = {0};		
00000e  f04f0b00          MOV      r11,#0
000012  f8cdb010          STR      r11,[sp,#0x10]
;;;1774       uint8_t    null_payload[4] = {0};
000016  f8cdb00c          STR      r11,[sp,#0xc]
;;;1775       
;;;1776   		static uint8_t    bmu_cnt = 0, dir_sel;
;;;1777       static uint16_t   dir_addr;
;;;1778       static uint8_t    top_no = 0;
;;;1779       static uint8_t    sub_step=0;
;;;1780   		static uint8_t    rcv_check_step = 0;
;;;1781   		static uint8_t    is_ring=0;
;;;1782   		
;;;1783   		#ifdef  TEST_BMU_AUTO_ID
;;;1784       static uint8_t    test_id_p_c=0;		
;;;1785   		#endif
;;;1786   		
;;;1787       uint8_t res=0;
;;;1788   		
;;;1789   		top_no = maxcnt;
00001a  4ffc              LDR      r7,|L45.1036|
00001c  75fa              STRB     r2,[r7,#0x17]
;;;1790   		
;;;1791   		*step_complete_f = 0;
00001e  f885b000          STRB     r11,[r5,#0]
;;;1792   		*before_delay_ms = 0;
000022  f884b000          STRB     r11,[r4,#0]
;;;1793       is_ring =0;
000026  f887b01a          STRB     r11,[r7,#0x1a]
;;;1794   		
;;;1795       switch(*afe_phase){
00002a  9808              LDR      r0,[sp,#0x20]
00002c  463b              MOV      r3,r7                 ;1789
00002e  2601              MOVS     r6,#1
000030  f890c000          LDRB     r12,[r0,#0]
000034  7e58              LDRB     r0,[r3,#0x19]         ;1789
000036  9006              STR      r0,[sp,#0x18]         ;1789
000038  7e18              LDRB     r0,[r3,#0x18]         ;1789
00003a  f10d0810          ADD      r8,sp,#0x10           ;1773
;;;1796           case SETDIR_BRORAD_SET_BMU_STACK1:                                                                             // Before use "Broadcast Write Revese" cmd, you must be have to clear TOP stack role device BMU.
;;;1797   				    fill_data4_payload(d_payload, BQ79600_STACK,0,0,0);
;;;1798               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_COMM_CTRL, 1, d_payload, 0);                        // Set everything as a stack device first.
;;;1799               *before_delay_ms = 1;
;;;1800               *step_complete_f = 1;
;;;1801   
;;;1802               break;		
;;;1803           case SETDIR_SET_BASE1:
;;;1804               fill_data4_payload(d_payload,BQ79600_BASE,0,0,0);
;;;1805               drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_CTRL, 1, d_payload, 0); 
;;;1806   				
;;;1807   						*before_delay_ms = 1;
;;;1808   						*step_complete_f = 1;	
;;;1809               break;				
;;;1810           case SETDIR_BASE_DIR_CHG:         
;;;1811      			    if ( dir == DIR_NORTH ){
;;;1812                   dir_addr = BQ79600_DIR0_ADDR;
;;;1813                   dir_sel  = DIR_NORTH;							  
;;;1814               }else{                                                                                               // Need not to wakeup, just jump to wakeup device(Setting SOUTH direction)
;;;1815                   dir_addr = BQ79600_DIR1_ADDR;
;;;1816                   dir_sel = (DIR_SOUTH*BQ79616_DIR_SEL);
;;;1817               }
;;;1818   
;;;1819               fill_data4_payload(d_payload, dir_sel,0,0,0);						
;;;1820   				    drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, 0);
;;;1821   
;;;1822               *before_delay_ms = 2;
;;;1823   						*step_complete_f = 1;						
;;;1824   						
;;;1825               break;
;;;1826           case SETDIR_BRORAD_REVERSE_DIRECTION:				
;;;1827               fill_data4_payload(d_payload, dir_sel,0,0,0);                                                //Must to do this North direction=BWR 0x00, South direction=BWR 0x80 
;;;1828               drv_bq796xx_command_framing(BROAD_WRITE_REVERSE, 0, BQ79600_CONTROL1, 1, d_payload, 0);      //If a device receives communication frame opposite to the [DIR_SEL] setting, change direction for all devices	
;;;1829   		
;;;1830   						bq796xx_data.comm_dir = dir;
;;;1831   											
;;;1832               *before_delay_ms = 2;
;;;1833               *step_complete_f = 1;
;;;1834   				
;;;1835               if(ns_dir_bmu_cnt > 0){
;;;1836   						    *afe_phase = SETDIR_INIT_DUMMY_READ;     //next phase jump to this.
;;;1837   							  rcv_check_step = 0;
;;;1838   							  sub_step = ns_dir_bmu_cnt;               //direct TOP stack is exist.
;;;1839   						}
;;;1840   				
;;;1841               break;		
;;;1842           case SETDIR_BRORAD_OTP_ECC_TEST_W:
;;;1843   					  fill_data4_payload(d_payload, 0x00,0,0,0);
;;;1844               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_OTP_ECC_TEST, 1, d_payload, 0);                 // Dummy write to snchronize all daisy chain device DLL.
;;;1845               *before_delay_ms = 2;
;;;1846               *step_complete_f = 1;			
;;;1847               sub_step = 0;				
;;;1848               break;		
;;;1849           case SETDIR_INIT_DUMMY_WRITE:					                                                                                                                        
;;;1850               drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_OTP_ECC_DATAIN1+sub_step, 1, null_payload, 0);     // 8 is fixed value according to Spec. 
00003e  f2003143          ADD      r1,r0,#0x343
000042  9105              STR      r1,[sp,#0x14]         ;1789
000044  7d99              LDRB     r1,[r3,#0x16]         ;1789
000046  7d5b              LDRB     r3,[r3,#0x15]         ;1789
000048  f1bc0f13          CMP      r12,#0x13             ;1795
00004c  d277              BCS      |L45.318|
00004e  e8dff00c          TBB      [pc,r12]              ;1795
000052  0a1e              DCB      0x0a,0x1e
000054  3255778e          DCB      0x32,0x55,0x77,0x8e
000058  a2b9d4f2          DCB      0xa2,0xb9,0xd4,0xf2
00005c  f0efeeed          DCB      0xf0,0xef,0xee,0xed
000060  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
000064  e800              DCB      0xe8,0x00
000066  2300              MOVS     r3,#0                 ;1797
000068  461a              MOV      r2,r3                 ;1797
00006a  2102              MOVS     r1,#2                 ;1797
00006c  a804              ADD      r0,sp,#0x10           ;1797
00006e  f8cdb000          STR      r11,[sp,#0]           ;1797
000072  f7fffffe          BL       fill_data4_payload
000076  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1798
00007a  2301              MOVS     r3,#1                 ;1798
00007c  f44f7242          MOV      r2,#0x308             ;1798
000080  2100              MOVS     r1,#0                 ;1798
000082  20d0              MOVS     r0,#0xd0              ;1798
000084  f7fffffe          BL       drv_bq796xx_command_framing
000088  7026              STRB     r6,[r4,#0]            ;1799
00008a  702e              STRB     r6,[r5,#0]            ;1800
                  |L45.140|
00008c  e217              B        |L45.1214|
00008e  2300              MOVS     r3,#0                 ;1804
000090  461a              MOV      r2,r3                 ;1804
000092  4619              MOV      r1,r3                 ;1804
000094  a804              ADD      r0,sp,#0x10           ;1804
000096  f8cdb000          STR      r11,[sp,#0]           ;1804
00009a  f7fffffe          BL       fill_data4_payload
00009e  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1805
0000a2  2301              MOVS     r3,#1                 ;1805
0000a4  f44f7242          MOV      r2,#0x308             ;1805
0000a8  2100              MOVS     r1,#0                 ;1805
0000aa  2090              MOVS     r0,#0x90              ;1805
0000ac  f7fffffe          BL       drv_bq796xx_command_framing
0000b0  7026              STRB     r6,[r4,#0]            ;1807
0000b2  702e              STRB     r6,[r5,#0]            ;1808
                  |L45.180|
0000b4  e203              B        |L45.1214|
0000b6  f1ba0f00          CMP      r10,#0                ;1811
0000ba  d019              BEQ      |L45.240|
0000bc  f2403007          MOV      r0,#0x307             ;1815
0000c0  85f8              STRH     r0,[r7,#0x2e]         ;1815
0000c2  2080              MOVS     r0,#0x80              ;1816
0000c4  75b8              STRB     r0,[r7,#0x16]         ;1816
                  |L45.198|
0000c6  2300              MOVS     r3,#0                 ;1819
0000c8  f8cdb000          STR      r11,[sp,#0]           ;1819
0000cc  461a              MOV      r2,r3                 ;1819
0000ce  7db9              LDRB     r1,[r7,#0x16]         ;1819  ; dir_sel
0000d0  a804              ADD      r0,sp,#0x10           ;1819
0000d2  f7fffffe          BL       fill_data4_payload
0000d6  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1820
0000da  2301              MOVS     r3,#1                 ;1820
0000dc  f2403209          MOV      r2,#0x309             ;1820
0000e0  2100              MOVS     r1,#0                 ;1820
0000e2  2090              MOVS     r0,#0x90              ;1820
0000e4  f7fffffe          BL       drv_bq796xx_command_framing
0000e8  2002              MOVS     r0,#2                 ;1822
0000ea  7020              STRB     r0,[r4,#0]            ;1822
0000ec  702e              STRB     r6,[r5,#0]            ;1823
0000ee  e1e6              B        |L45.1214|
                  |L45.240|
0000f0  f2403006          MOV      r0,#0x306             ;1812
0000f4  85f8              STRH     r0,[r7,#0x2e]         ;1812
0000f6  f887b016          STRB     r11,[r7,#0x16]        ;1813
0000fa  e7e4              B        |L45.198|
0000fc  2300              MOVS     r3,#0                 ;1827
0000fe  461a              MOV      r2,r3                 ;1827
000100  a804              ADD      r0,sp,#0x10           ;1827
000102  f8cdb000          STR      r11,[sp,#0]           ;1827
000106  f7fffffe          BL       fill_data4_payload
00010a  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1828
00010e  2301              MOVS     r3,#1                 ;1828
000110  f2403209          MOV      r2,#0x309             ;1828
000114  2100              MOVS     r1,#0                 ;1828
000116  20e0              MOVS     r0,#0xe0              ;1828
000118  f7fffffe          BL       drv_bq796xx_command_framing
00011c  48bc              LDR      r0,|L45.1040|
00011e  f880ad8b          STRB     r10,[r0,#0xd8b]       ;1830
000122  2002              MOVS     r0,#2                 ;1832
000124  7020              STRB     r0,[r4,#0]            ;1832
000126  702e              STRB     r6,[r5,#0]            ;1833
000128  f1b90f00          CMP      r9,#0                 ;1835
00012c  d0ae              BEQ      |L45.140|
00012e  9808              LDR      r0,[sp,#0x20]         ;1836
000130  2108              MOVS     r1,#8                 ;1836
000132  7001              STRB     r1,[r0,#0]            ;1836
000134  f887b019          STRB     r11,[r7,#0x19]        ;1837
000138  f8879018          STRB     r9,[r7,#0x18]         ;1838
                  |L45.316|
00013c  e1bf              B        |L45.1214|
                  |L45.318|
00013e  e1c2              B        |L45.1222|
000140  2300              MOVS     r3,#0                 ;1843
000142  461a              MOV      r2,r3                 ;1843
000144  4619              MOV      r1,r3                 ;1843
000146  a804              ADD      r0,sp,#0x10           ;1843
000148  f8cdb000          STR      r11,[sp,#0]           ;1843
00014c  f7fffffe          BL       fill_data4_payload
000150  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1844
000154  2301              MOVS     r3,#1                 ;1844
000156  f44f7253          MOV      r2,#0x34c             ;1844
00015a  2100              MOVS     r1,#0                 ;1844
00015c  20d0              MOVS     r0,#0xd0              ;1844
00015e  f7fffffe          BL       drv_bq796xx_command_framing
000162  2002              MOVS     r0,#2                 ;1845
000164  7020              STRB     r0,[r4,#0]            ;1845
000166  702e              STRB     r6,[r5,#0]            ;1846
000168  f887b018          STRB     r11,[r7,#0x18]        ;1847
00016c  e1a7              B        |L45.1214|
00016e  a803              ADD      r0,sp,#0xc
000170  e9cd0b00          STRD     r0,r11,[sp,#0]
000174  2301              MOVS     r3,#1
000176  2100              MOVS     r1,#0
000178  20d0              MOVS     r0,#0xd0
00017a  9a05              LDR      r2,[sp,#0x14]
00017c  f7fffffe          BL       drv_bq796xx_command_framing
;;;1851               ++sub_step;
000180  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
000182  1c40              ADDS     r0,r0,#1
000184  b2c0              UXTB     r0,r0
000186  7638              STRB     r0,[r7,#0x18]
;;;1852   						
;;;1853   						*before_delay_ms = 1;
000188  7026              STRB     r6,[r4,#0]
;;;1854   						
;;;1855   						if(sub_step>=8){
00018a  2808              CMP      r0,#8
00018c  d392              BCC      |L45.180|
;;;1856   							  sub_step = 0; 
00018e  f887b018          STRB     r11,[r7,#0x18]
;;;1857   						    *step_complete_f = 1;
000192  702e              STRB     r6,[r5,#0]
000194  e193              B        |L45.1214|
;;;1858   						}
;;;1859               break;				
;;;1860           case SETDIR_AUTO_ADDR:
;;;1861   		        fill_data4_payload(d_payload,dir_sel + ADDR_WR,0,0,0);						
000196  1c49              ADDS     r1,r1,#1
000198  2300              MOVS     r3,#0
00019a  b2c9              UXTB     r1,r1
00019c  461a              MOV      r2,r3
00019e  a804              ADD      r0,sp,#0x10
0001a0  f8cdb000          STR      r11,[sp,#0]
0001a4  f7fffffe          BL       fill_data4_payload
;;;1862   				    drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, 0);          // enable auto addressing(0x01)
0001a8  e9cd8b00          STRD     r8,r11,[sp,#0]
0001ac  2301              MOVS     r3,#1
0001ae  f2403209          MOV      r2,#0x309
0001b2  2100              MOVS     r1,#0
0001b4  20d0              MOVS     r0,#0xd0
0001b6  f7fffffe          BL       drv_bq796xx_command_framing
;;;1863               *before_delay_ms = 1;
0001ba  7026              STRB     r6,[r4,#0]
;;;1864               *step_complete_f = 1;
0001bc  702e              STRB     r6,[r5,#0]
;;;1865               sub_step = 0; 				
0001be  f887b018          STRB     r11,[r7,#0x18]
                  |L45.450|
;;;1866               break;
0001c2  e17c              B        |L45.1214|
;;;1867           case SETDIR_SET_ID:                                                                                                     
;;;1868               
;;;1869   				    #ifdef TEST_BMU_AUTO_ID
;;;1870   				    if((dir == DIR_NORTH) && (test_id_p_c>=2)){
;;;1871   				        if(sub_step<5)     
;;;1872   				            fill_data4_payload(d_payload,test_afe_auto_id[sub_step],0,0,0);
;;;1873   				        else
;;;1874   							      fill_data4_payload(d_payload, (8+sub_step), 0, 0, 0);
;;;1875   					  }else{
;;;1876        				    fill_data4_payload(d_payload,sub_step,0,0,0);                                 						// 6 bits for address ID
;;;1877   						}
;;;1878   				    #else
;;;1879   				    fill_data4_payload(d_payload,sub_step,0,0,0);                                 						// 6 bits for address ID
0001c4  2300              MOVS     r3,#0
0001c6  4601              MOV      r1,r0
0001c8  461a              MOV      r2,r3
0001ca  a804              ADD      r0,sp,#0x10
0001cc  f8cdb000          STR      r11,[sp,#0]
0001d0  f7fffffe          BL       fill_data4_payload
;;;1880   				    #endif
;;;1881   						drv_bq796xx_command_framing(BROAD_WRITE, 0, dir_addr, 1, d_payload, 0);                     // 3000 is base on TI's log file
0001d4  e9cd8b00          STRD     r8,r11,[sp,#0]
0001d8  2301              MOVS     r3,#1
0001da  8dfa              LDRH     r2,[r7,#0x2e]  ; dir_addr
0001dc  2100              MOVS     r1,#0
0001de  20d0              MOVS     r0,#0xd0
0001e0  f7fffffe          BL       drv_bq796xx_command_framing
;;;1882   								
;;;1883   				    ++sub_step;				
0001e4  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
0001e6  1c40              ADDS     r0,r0,#1
0001e8  b2c0              UXTB     r0,r0
0001ea  7638              STRB     r0,[r7,#0x18]
;;;1884   						*before_delay_ms = 1;
0001ec  7026              STRB     r6,[r4,#0]
;;;1885   						
;;;1886   						if(sub_step>top_no){
0001ee  7df9              LDRB     r1,[r7,#0x17]  ; top_no
0001f0  4288              CMP      r0,r1
0001f2  d9a3              BLS      |L45.316|
;;;1887   							  #ifdef TEST_BMU_AUTO_ID
;;;1888   							      test_id_p_c++;
;;;1889   							  #endif  
;;;1890   							
;;;1891   							  sub_step = 1; 
0001f4  763e              STRB     r6,[r7,#0x18]
;;;1892   						    *step_complete_f = 1;
0001f6  702e              STRB     r6,[r5,#0]
0001f8  e161              B        |L45.1214|
;;;1893   						}						
;;;1894               break;
;;;1895           case SETDIR_INIT_DUMMY_READ:                                                                                                    
;;;1896               drv_bq796xx_command_framing(BROAD_READ, 0, BQ79600_OTP_ECC_DATAIN1+sub_step, 1, null_payload, 0);                  // 8 is fixed value according to Spec.
0001fa  a803              ADD      r0,sp,#0xc
0001fc  e9cd0b00          STRD     r0,r11,[sp,#0]
000200  2301              MOVS     r3,#1
000202  2100              MOVS     r1,#0
000204  20c0              MOVS     r0,#0xc0
000206  9a05              LDR      r2,[sp,#0x14]
000208  f7fffffe          BL       drv_bq796xx_command_framing
;;;1897               ++sub_step;
00020c  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
00020e  1c40              ADDS     r0,r0,#1
000210  b2c0              UXTB     r0,r0
000212  7638              STRB     r0,[r7,#0x18]
;;;1898               
;;;1899   						*before_delay_ms = 2;
000214  2102              MOVS     r1,#2
000216  7021              STRB     r1,[r4,#0]
;;;1900   						
;;;1901   						if(sub_step>=8){
000218  2808              CMP      r0,#8
00021a  d38f              BCC      |L45.316|
;;;1902   							  sub_step = 1; 
00021c  763e              STRB     r6,[r7,#0x18]
;;;1903   						    *step_complete_f = 1;
00021e  702e              STRB     r6,[r5,#0]
000220  e14d              B        |L45.1214|
000222  e143              B        |L45.1196|
000224  e113              B        |L45.1102|
000226  e0fe              B        |L45.1062|
000228  e0d5              B        |L45.982|
00022a  e097              B        |L45.860|
00022c  e079              B        |L45.802|
00022e  e064              B        |L45.762|
000230  e04f              B        |L45.722|
000232  e014              B        |L45.606|
000234  e7ff              B        |L45.566|
                  |L45.566|
;;;1904   						}
;;;1905               break;
;;;1906           case SETDIR_BRORAD_SET_BMU_STACK2:
;;;1907   					  fill_data4_payload(d_payload, BQ79600_STACK,0,0,0);
000236  2300              MOVS     r3,#0
000238  461a              MOV      r2,r3
00023a  2102              MOVS     r1,#2
00023c  a804              ADD      r0,sp,#0x10
00023e  f8cdb000          STR      r11,[sp,#0]
000242  f7fffffe          BL       fill_data4_payload
;;;1908               drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ796XX_COMM_CTRL, 1, d_payload, 0);                   // Set everything as a stack device first.
000246  e9cd8b00          STRD     r8,r11,[sp,#0]
00024a  2301              MOVS     r3,#1
00024c  f44f7242          MOV      r2,#0x308
000250  2100              MOVS     r1,#0
000252  20d0              MOVS     r0,#0xd0
000254  f7fffffe          BL       drv_bq796xx_command_framing
;;;1909               *before_delay_ms = 1;
000258  7026              STRB     r6,[r4,#0]
;;;1910               *step_complete_f = 1;						
00025a  702e              STRB     r6,[r5,#0]
;;;1911               break;												
00025c  e12f              B        |L45.1214|
                  |L45.606|
;;;1912   				case SETDIR_CHECK_ID_RESPONSE:			
;;;1913               //--------------------------------------------------------------	
;;;1914               *before_delay_ms = 1;                                                                                   //Msut have, avoid device can not recv command.				
00025e  7026              STRB     r6,[r4,#0]
;;;1915   						if(rcv_check_step == 0){
000260  9906              LDR      r1,[sp,#0x18]
000262  b129              CBZ      r1,|L45.624|
;;;1916   						    bmu_cnt = sub_step; 
;;;1917   						    drv_bq796xx_command_framing(SINGLE_READ,  bmu_cnt, dir_addr, 1, null_payload, 0);                  // 10000 is base on TI's log file
;;;1918   							  rcv_check_step = 1;
;;;1919   						}else{
;;;1920   						    res = drv_bq796xx_check_respone_event2();
000264  f7fffffe          BL       drv_bq796xx_check_respone_event2
;;;1921   							  
;;;1922                   if (res == BQ796XX_RES_TIMEOUT){                                                                   // no return data => no this ID    
000268  b170              CBZ      r0,|L45.648|
;;;1923   							      sub_step = top_no + 1;  //When device no resopne, then break check device ID
;;;1924   									  
;;;1925   									  if(ns_dir_bmu_cnt > 0){
;;;1926   									      bmu_cnt = 0;
;;;1927   									  }else{
;;;1928   									      if(bmu_cnt>0){ 
;;;1929   											    --bmu_cnt;
;;;1930   									      }
;;;1931   									 }
;;;1932                   }else if(res == BQ796XX_RES_RCV_DAT){
00026a  2801              CMP      r0,#1
00026c  d01a              BEQ      |L45.676|
00026e  e01f              B        |L45.688|
                  |L45.624|
000270  7578              STRB     r0,[r7,#0x15]         ;1916
000272  a903              ADD      r1,sp,#0xc            ;1917
000274  e9cd1b00          STRD     r1,r11,[sp,#0]        ;1917
000278  4601              MOV      r1,r0                 ;1917
00027a  2301              MOVS     r3,#1                 ;1917
00027c  8dfa              LDRH     r2,[r7,#0x2e]         ;1917  ; dir_addr
00027e  2080              MOVS     r0,#0x80              ;1917
000280  f7fffffe          BL       drv_bq796xx_command_framing
000284  767e              STRB     r6,[r7,#0x19]         ;1918
000286  e013              B        |L45.688|
                  |L45.648|
000288  7df8              LDRB     r0,[r7,#0x17]         ;1923  ; top_no
00028a  1c40              ADDS     r0,r0,#1              ;1923
00028c  7638              STRB     r0,[r7,#0x18]         ;1923
00028e  f1b90f00          CMP      r9,#0                 ;1925
000292  d002              BEQ      |L45.666|
000294  f887b015          STRB     r11,[r7,#0x15]        ;1926
000298  e00a              B        |L45.688|
                  |L45.666|
00029a  7d78              LDRB     r0,[r7,#0x15]         ;1928  ; bmu_cnt
00029c  b140              CBZ      r0,|L45.688|
00029e  1e40              SUBS     r0,r0,#1              ;1929
0002a0  7578              STRB     r0,[r7,#0x15]         ;1929
0002a2  e005              B        |L45.688|
                  |L45.676|
;;;1933   									  if(ns_dir_bmu_cnt == 0){
0002a4  f1b90f00          CMP      r9,#0
0002a8  d00d              BEQ      |L45.710|
;;;1934   								        rcv_check_step = 0;     
;;;1935   									      ++sub_step;             //Next device check
;;;1936   										}else{
;;;1937   										    sub_step = top_no + 1;  //When device no resopne, then break check device ID
0002aa  7df8              LDRB     r0,[r7,#0x17]  ; top_no
0002ac  1c40              ADDS     r0,r0,#1
0002ae  7638              STRB     r0,[r7,#0x18]
                  |L45.688|
;;;1938   										}	
;;;1939   							}
;;;1940   						}
;;;1941   						//--------------------------------------------------------------
;;;1942   						
;;;1943   						if(sub_step > top_no){
0002b0  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
0002b2  7df9              LDRB     r1,[r7,#0x17]  ; top_no
0002b4  4288              CMP      r0,r1
0002b6  d984              BLS      |L45.450|
;;;1944   							  rcv_check_step = 0;
0002b8  f887b019          STRB     r11,[r7,#0x19]
;;;1945   							  sub_step = 0;
0002bc  f887b018          STRB     r11,[r7,#0x18]
;;;1946   						    *before_delay_ms = 1;
0002c0  7026              STRB     r6,[r4,#0]
;;;1947   						    *step_complete_f = 1;
0002c2  702e              STRB     r6,[r5,#0]
0002c4  e0fb              B        |L45.1214|
                  |L45.710|
0002c6  f887b019          STRB     r11,[r7,#0x19]        ;1934
0002ca  7e38              LDRB     r0,[r7,#0x18]         ;1935  ; sub_step
0002cc  1c40              ADDS     r0,r0,#1              ;1935
0002ce  7638              STRB     r0,[r7,#0x18]         ;1935
0002d0  e7ee              B        |L45.688|
                  |L45.722|
;;;1948   						}
;;;1949   				    break;							
;;;1950           case SETDIR_SET_STACK:
;;;1951   					  fill_data4_payload(d_payload,BQ79600_STACK,0,0,0);
0002d2  2300              MOVS     r3,#0
0002d4  461a              MOV      r2,r3
0002d6  2102              MOVS     r1,#2
0002d8  a804              ADD      r0,sp,#0x10
0002da  f8cdb000          STR      r11,[sp,#0]
0002de  f7fffffe          BL       fill_data4_payload
;;;1952   				    drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_COMM_CTRL, 1, d_payload, 0);  // write stack to BMUs
0002e2  e9cd8b00          STRD     r8,r11,[sp,#0]
0002e6  2301              MOVS     r3,#1
0002e8  f44f7242          MOV      r2,#0x308
0002ec  2100              MOVS     r1,#0
0002ee  20d0              MOVS     r0,#0xd0
0002f0  f7fffffe          BL       drv_bq796xx_command_framing
;;;1953   				
;;;1954   						*before_delay_ms = 1;
0002f4  7026              STRB     r6,[r4,#0]
;;;1955   						*step_complete_f = 1;
0002f6  702e              STRB     r6,[r5,#0]
;;;1956   				    break;
0002f8  e0e1              B        |L45.1214|
                  |L45.762|
;;;1957           case SETDIR_SET_BASE2:
;;;1958               fill_data4_payload(d_payload,BQ79600_BASE,0,0,0);
0002fa  2300              MOVS     r3,#0
0002fc  461a              MOV      r2,r3
0002fe  4619              MOV      r1,r3
000300  a804              ADD      r0,sp,#0x10
000302  f8cdb000          STR      r11,[sp,#0]
000306  f7fffffe          BL       fill_data4_payload
;;;1959               drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_CTRL, 1, d_payload, 0); 
00030a  e9cd8b00          STRD     r8,r11,[sp,#0]
00030e  2301              MOVS     r3,#1
000310  f44f7242          MOV      r2,#0x308
000314  2100              MOVS     r1,#0
000316  2090              MOVS     r0,#0x90
000318  f7fffffe          BL       drv_bq796xx_command_framing
;;;1960   				
;;;1961   						*before_delay_ms = 1;
00031c  7026              STRB     r6,[r4,#0]
;;;1962   						*step_complete_f = 1;	
00031e  702e              STRB     r6,[r5,#0]
;;;1963               break;				
000320  e0cd              B        |L45.1214|
                  |L45.802|
;;;1964           case SETDIR_SET_TOP:
;;;1965               if (bmu_cnt > maxcnt ){
000322  4293              CMP      r3,r2
000324  d900              BLS      |L45.808|
;;;1966                   bmu_cnt = maxcnt;
000326  757a              STRB     r2,[r7,#0x15]
                  |L45.808|
;;;1967               }
;;;1968   						
;;;1969   						if(bmu_cnt>= 0x01){
000328  7d78              LDRB     r0,[r7,#0x15]  ; bmu_cnt
00032a  b180              CBZ      r0,|L45.846|
;;;1970   								fill_data4_payload(d_payload,BQ79600_TOP,0,0,0);
00032c  2300              MOVS     r3,#0
00032e  461a              MOV      r2,r3
000330  2103              MOVS     r1,#3
000332  a804              ADD      r0,sp,#0x10
000334  f8cdb000          STR      r11,[sp,#0]
000338  f7fffffe          BL       fill_data4_payload
;;;1971   							  #ifdef TEST_BMU_AUTO_ID
;;;1972   							  if((dir == DIR_NORTH) && (test_id_p_c>=3)){
;;;1973   									  drv_bq796xx_command_framing(SINGLE_WRITE,  test_afe_auto_id[4], BQ79600_COMM_CTRL, 1, d_payload, 0);
;;;1974   								}else{
;;;1975                       drv_bq796xx_command_framing(SINGLE_WRITE,  bmu_cnt, BQ79600_COMM_CTRL, 1, d_payload, 0);
;;;1976   								}									
;;;1977   							  #else	
;;;1978   								drv_bq796xx_command_framing(SINGLE_WRITE,  bmu_cnt, BQ79600_COMM_CTRL, 1, d_payload, 0);
00033c  e9cd8b00          STRD     r8,r11,[sp,#0]
000340  2301              MOVS     r3,#1
000342  f44f7242          MOV      r2,#0x308
000346  7d79              LDRB     r1,[r7,#0x15]  ; bmu_cnt
000348  2090              MOVS     r0,#0x90
00034a  f7fffffe          BL       drv_bq796xx_command_framing
                  |L45.846|
;;;1979   								#endif
;;;1980   						}
;;;1981   						
;;;1982   						*before_delay_ms = 1;
00034e  7026              STRB     r6,[r4,#0]
;;;1983   						*step_complete_f = 1;
000350  702e              STRB     r6,[r5,#0]
;;;1984   						rcv_check_step = 0;
000352  f887b019          STRB     r11,[r7,#0x19]
;;;1985   						sub_step = 0;
000356  f887b018          STRB     r11,[r7,#0x18]
;;;1986               break;
00035a  e0b0              B        |L45.1214|
                  |L45.860|
;;;1987   				case SETDIR_CHECK_IS_RING:			
;;;1988               //--------------------------------------------------------------	
;;;1989               *before_delay_ms = 1;                                                                                   //Msut have, avoid device can not recv command.				
00035c  7026              STRB     r6,[r4,#0]
;;;1990   						if(rcv_check_step == 0){
00035e  9806              LDR      r0,[sp,#0x18]
000360  b138              CBZ      r0,|L45.882|
;;;1991      			        fill_data4_payload(d_payload,0,0,0,0);
;;;1992                   drv_bq796xx_command_framing(SINGLE_READ,  bmu_cnt, BQ79600_ACTIVE_CELL, 1, d_payload, 0);            // 10000 is base on TI's log file
;;;1993   							  rcv_check_step = 1;
;;;1994   						}else{
;;;1995   						    res = drv_bq796xx_data_frame_parser();
000362  f7fffffe          BL       drv_bq796xx_data_frame_parser
;;;1996   							
;;;1997                   ++sub_step;							
000366  7e39              LDRB     r1,[r7,#0x18]  ; sub_step
000368  1c49              ADDS     r1,r1,#1
00036a  7639              STRB     r1,[r7,#0x18]
;;;1998                   if(res == BQ796XX_RES_OK){
00036c  2801              CMP      r0,#1
00036e  d012              BEQ      |L45.918|
000370  e028              B        |L45.964|
                  |L45.882|
000372  2300              MOVS     r3,#0                 ;1991
000374  461a              MOV      r2,r3                 ;1991
000376  4619              MOV      r1,r3                 ;1991
000378  a804              ADD      r0,sp,#0x10           ;1991
00037a  f8cdb000          STR      r11,[sp,#0]           ;1991
00037e  f7fffffe          BL       fill_data4_payload
000382  e9cd8b00          STRD     r8,r11,[sp,#0]        ;1992
000386  2301              MOVS     r3,#1                 ;1992
000388  2203              MOVS     r2,#3                 ;1992
00038a  7d79              LDRB     r1,[r7,#0x15]         ;1992  ; bmu_cnt
00038c  2080              MOVS     r0,#0x80              ;1992
00038e  f7fffffe          BL       drv_bq796xx_command_framing
000392  767e              STRB     r6,[r7,#0x19]         ;1993
000394  e016              B        |L45.964|
                  |L45.918|
;;;1999   
;;;2000   									  if ( dir == DIR_NORTH ){
000396  f1ba0f00          CMP      r10,#0
00039a  d005              BEQ      |L45.936|
;;;2001   										   if(bq796xx_data.ns_flag == 0x40){    //South dir
;;;2002   											     is_ring = 0x80;
;;;2003   											 }
;;;2004   										}else{
;;;2005   										   if(bq796xx_data.ns_flag == 0x80){    //North dir
00039c  481c              LDR      r0,|L45.1040|
00039e  f8900d8e          LDRB     r0,[r0,#0xd8e]  ; bq796xx_data
0003a2  2880              CMP      r0,#0x80
0003a4  d008              BEQ      |L45.952|
0003a6  e009              B        |L45.956|
                  |L45.936|
0003a8  4819              LDR      r0,|L45.1040|
0003aa  f8900d8e          LDRB     r0,[r0,#0xd8e]        ;2001  ; bq796xx_data
0003ae  2840              CMP      r0,#0x40              ;2001
0003b0  d104              BNE      |L45.956|
0003b2  2080              MOVS     r0,#0x80              ;2002
0003b4  76b8              STRB     r0,[r7,#0x1a]         ;2002
0003b6  e001              B        |L45.956|
                  |L45.952|
;;;2006   											     is_ring = 0x80;
0003b8  2080              MOVS     r0,#0x80
0003ba  76b8              STRB     r0,[r7,#0x1a]
                  |L45.956|
;;;2007   											 }											
;;;2008   										}
;;;2009   										
;;;2010   										bmu_cnt |= is_ring;
0003bc  7d78              LDRB     r0,[r7,#0x15]  ; bmu_cnt
0003be  7eb9              LDRB     r1,[r7,#0x1a]  ; is_ring
0003c0  4308              ORRS     r0,r0,r1
0003c2  7578              STRB     r0,[r7,#0x15]
                  |L45.964|
;;;2011   								}
;;;2012   						}
;;;2013   						//--------------------------------------------------------------
;;;2014   						
;;;2015   						if(sub_step > 0){
0003c4  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
0003c6  b300              CBZ      r0,|L45.1034|
;;;2016   							  rcv_check_step = 0;
0003c8  f887b019          STRB     r11,[r7,#0x19]
;;;2017   							  sub_step = 0;
0003cc  f887b018          STRB     r11,[r7,#0x18]
;;;2018   						    *before_delay_ms = 1;
0003d0  7026              STRB     r6,[r4,#0]
;;;2019   						    *step_complete_f = 1;
0003d2  702e              STRB     r6,[r5,#0]
0003d4  e073              B        |L45.1214|
                  |L45.982|
;;;2020   						}
;;;2021   				    break;			
;;;2022           case SETDIR_SET_DIRECTION_FLAG_ACTIVE_CELL:						
;;;2023   						if(bmu_cnt>= 0x01){
0003d6  b193              CBZ      r3,|L45.1022|
;;;2024   							  if(dir == DIR_NORTH )
0003d8  f1ba0f00          CMP      r10,#0
0003dc  d01a              BEQ      |L45.1044|
;;;2025   								    fill_data4_payload(d_payload,(BMU_CELL_SERIES-6) | 0x80,0,0,0);
;;;2026   								else
;;;2027   									  fill_data4_payload(d_payload,(BMU_CELL_SERIES-6) | 0x40,0,0,0);
0003de  2300              MOVS     r3,#0
0003e0  461a              MOV      r2,r3
0003e2  214a              MOVS     r1,#0x4a
0003e4  a804              ADD      r0,sp,#0x10
0003e6  f8cdb000          STR      r11,[sp,#0]
0003ea  f7fffffe          BL       fill_data4_payload
                  |L45.1006|
;;;2028   								drv_bq796xx_command_framing(STACK_WRITE, 0 , BQ79600_ACTIVE_CELL, 1, d_payload, 0);
0003ee  e9cd8b00          STRD     r8,r11,[sp,#0]
0003f2  2301              MOVS     r3,#1
0003f4  2203              MOVS     r2,#3
0003f6  2100              MOVS     r1,#0
0003f8  20b0              MOVS     r0,#0xb0
0003fa  f7fffffe          BL       drv_bq796xx_command_framing
                  |L45.1022|
;;;2029   						}
;;;2030   						
;;;2031   						*before_delay_ms = 1;
0003fe  7026              STRB     r6,[r4,#0]
;;;2032   						*step_complete_f = 1;
000400  702e              STRB     r6,[r5,#0]
;;;2033   						rcv_check_step = 0;
000402  f887b019          STRB     r11,[r7,#0x19]
;;;2034   						sub_step = 0;
000406  f887b018          STRB     r11,[r7,#0x18]
                  |L45.1034|
;;;2035               break;						
00040a  e058              B        |L45.1214|
                  |L45.1036|
                          DCD      ||.data||
                  |L45.1040|
                          DCD      ||area_number.59||+0x86
                  |L45.1044|
000414  2300              MOVS     r3,#0                 ;2025
000416  461a              MOV      r2,r3                 ;2025
000418  218a              MOVS     r1,#0x8a              ;2025
00041a  a804              ADD      r0,sp,#0x10           ;2025
00041c  f8cdb000          STR      r11,[sp,#0]           ;2025
000420  f7fffffe          BL       fill_data4_payload
000424  e7e3              B        |L45.1006|
                  |L45.1062|
;;;2036           case SETDIR_FAULT_RESET_2:
;;;2037               fill_data4_payload(d_payload,0xFF,0,0,0);
000426  2300              MOVS     r3,#0
000428  461a              MOV      r2,r3
00042a  21ff              MOVS     r1,#0xff
00042c  a804              ADD      r0,sp,#0x10
00042e  f8cdb000          STR      r11,[sp,#0]
000432  f7fffffe          BL       fill_data4_payload
;;;2038   				    drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_FAULT_RST2, 1, d_payload, 0); 
000436  e9cd8b00          STRD     r8,r11,[sp,#0]
00043a  2301              MOVS     r3,#1
00043c  f2403232          MOV      r2,#0x332
000440  2100              MOVS     r1,#0
000442  20d0              MOVS     r0,#0xd0
000444  f7fffffe          BL       drv_bq796xx_command_framing
;;;2039   						*before_delay_ms = 1;
000448  7026              STRB     r6,[r4,#0]
;;;2040   						*step_complete_f = 1;
00044a  702e              STRB     r6,[r5,#0]
;;;2041               break;				
00044c  e037              B        |L45.1214|
                  |L45.1102|
;;;2042          case SETDIR_CLEAR_RST_ALL:
;;;2043   			       *before_delay_ms = 2; 
00044e  2002              MOVS     r0,#2
000450  7020              STRB     r0,[r4,#0]
;;;2044   			 
;;;2045   			      fill_data4_payload(d_payload,0xFF,0xFF,0,0); //Clear all=x0FF
000452  22ff              MOVS     r2,#0xff
000454  2300              MOVS     r3,#0
000456  4611              MOV      r1,r2
000458  a804              ADD      r0,sp,#0x10
00045a  f8cdb000          STR      r11,[sp,#0]
00045e  f7fffffe          BL       fill_data4_payload
;;;2046   	          switch(sub_step){
000462  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
000464  b110              CBZ      r0,|L45.1132|
000466  2801              CMP      r0,#1
000468  d113              BNE      |L45.1170|
00046a  e009              B        |L45.1152|
                  |L45.1132|
;;;2047   						    case 0:
;;;2048   			              drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ79600_FAULT_RST1, 2, d_payload, 0);
00046c  e9cd8b00          STRD     r8,r11,[sp,#0]
000470  2302              MOVS     r3,#2
000472  f2403231          MOV      r2,#0x331
000476  2100              MOVS     r1,#0
000478  20b0              MOVS     r0,#0xb0
00047a  f7fffffe          BL       drv_bq796xx_command_framing
;;;2049                       break;
00047e  e008              B        |L45.1170|
                  |L45.1152|
;;;2050   								case 1:
;;;2051   									  drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_FAULT_RST, 1, d_payload, 0);
000480  e9cd8b00          STRD     r8,r11,[sp,#0]
000484  2301              MOVS     r3,#1
000486  f2420230          MOV      r2,#0x2030
00048a  2100              MOVS     r1,#0
00048c  2090              MOVS     r0,#0x90
00048e  f7fffffe          BL       drv_bq796xx_command_framing
                  |L45.1170|
;;;2052   								    break;
;;;2053   						}
;;;2054   			      
;;;2055   	          bq796xx_afe_fault_rst1= 0xFF;
000492  20ff              MOVS     r0,#0xff
000494  70b8              STRB     r0,[r7,#2]
;;;2056   	          
;;;2057   			      ++sub_step;
000496  7e38              LDRB     r0,[r7,#0x18]  ; sub_step
000498  1c40              ADDS     r0,r0,#1
00049a  b2c0              UXTB     r0,r0
00049c  7638              STRB     r0,[r7,#0x18]
;;;2058   						
;;;2059   						if(sub_step>=2){
00049e  2802              CMP      r0,#2
0004a0  d30d              BCC      |L45.1214|
;;;2060   						    *before_delay_ms = 1;
0004a2  7026              STRB     r6,[r4,#0]
;;;2061   						    *step_complete_f = 1;		
0004a4  702e              STRB     r6,[r5,#0]
;;;2062                   sub_step=0;			 
0004a6  f887b018          STRB     r11,[r7,#0x18]
0004aa  e008              B        |L45.1214|
                  |L45.1196|
;;;2063   						}
;;;2064               break;
;;;2065   				case SETDIR_AFE_RUN_AUX_ADC:	 //Start Main and AUX ADC 
;;;2066   					 drv_bq796xx_Start_AFE_ADC(STACK,0,0);
0004ac  2200              MOVS     r2,#0
0004ae  4611              MOV      r1,r2
0004b0  2001              MOVS     r0,#1
0004b2  f7fffffe          BL       drv_bq796xx_Start_AFE_ADC
;;;2067   				
;;;2068       			 sub_step = 0;
0004b6  f887b018          STRB     r11,[r7,#0x18]
;;;2069   					 *before_delay_ms = 1;
0004ba  7026              STRB     r6,[r4,#0]
;;;2070   					 *step_complete_f = 1;
0004bc  702e              STRB     r6,[r5,#0]
                  |L45.1214|
;;;2071   				   break;											
;;;2072           default:
;;;2073   					  return(0);
;;;2074       }
;;;2075       return bmu_cnt;
0004be  7d78              LDRB     r0,[r7,#0x15]  ; bmu_cnt
                  |L45.1216|
;;;2076   	
;;;2077   }
0004c0  b00b              ADD      sp,sp,#0x2c
0004c2  e8bd8ff0          POP      {r4-r11,pc}
                  |L45.1222|
0004c6  2000              MOVS     r0,#0                 ;2073
0004c8  e7fa              B        |L45.1216|
;;;2078   
                          ENDP


                          AREA ||i.drv_bq796xx_init||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_init PROC
;;;163                                                                    
;;;164    uint8_t drv_bq796xx_init(void)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166      // BQ796XX nCS pin init and set pin to pull low.
;;;167      smp_gpio_init(&bq796xx_gpio_ncs);
000002  480c              LDR      r0,|L46.52|
000004  f7fffffe          BL       smp_gpio_init
;;;168      bq796xx_gpio_ncs_state = GPIO_ACTIVE_HIGH;
000008  4c0a              LDR      r4,|L46.52|
00000a  2101              MOVS     r1,#1
00000c  3c50              SUBS     r4,r4,#0x50
00000e  76e1              STRB     r1,[r4,#0x1b]
;;;169      smp_gpio_set_state(&bq796xx_gpio_ncs, bq796xx_gpio_ncs_state);
000010  4808              LDR      r0,|L46.52|
000012  f7fffffe          BL       smp_gpio_set_state
;;;170      //drv_bq796xx_delay_ms(10);
;;;171    	
;;;172      bq796xx_gpio_ncs_state = GPIO_ACTIVE_LOW;
000016  2100              MOVS     r1,#0
000018  76e1              STRB     r1,[r4,#0x1b]
;;;173      smp_gpio_set_state(&bq796xx_gpio_ncs, bq796xx_gpio_ncs_state);
00001a  4806              LDR      r0,|L46.52|
00001c  f7fffffe          BL       smp_gpio_set_state
;;;174     	
;;;175      drv_bq796xx_switch_rx_pin_type_setting(BQ_UART);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
;;;176      
;;;177    	
;;;178    	LibHwTimerOpen(drv_bq796xx_HwTimerHanlder, 0);
000026  2100              MOVS     r1,#0
000028  4803              LDR      r0,|L46.56|
00002a  f7fffffe          BL       LibHwTimerOpen
;;;179    
;;;180    //	#include "LibSwTimer.h"
;;;181    
;;;182    //	#define SMP_TIMER_SAMPLE_RATE                          100         // Unit : Hz
;;;183    
;;;184      //Setup timer 10ms
;;;185    //  smp_timer_handler(SMP_TIMER_SAMPLE_RATE);
;;;186    //  smp_time_count_set(0);
;;;187      
;;;188      return 0;
00002e  2000              MOVS     r0,#0
;;;189    }
000030  bd10              POP      {r4,pc}
;;;190    
                          ENDP

000032  0000              DCW      0x0000
                  |L46.52|
                          DCD      ||.data||+0x50
                  |L46.56|
                          DCD      drv_bq796xx_HwTimerHanlder

                          AREA ||i.drv_bq796xx_init_default_load||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_init_default_load PROC
;;;1658   
;;;1659   int8_t drv_bq796xx_init_default_load(bq796xx_init_default_t in_load_data){
000000  b507              PUSH     {r0-r2,lr}
;;;1660        
;;;1661   	   if(&(in_load_data)== 0) return SMP_ERROR_NULL;
;;;1662            
;;;1663   	   bq796xx_default = in_load_data;
000002  220b              MOVS     r2,#0xb
000004  4669              MOV      r1,sp
000006  4802              LDR      r0,|L47.16|
000008  f7fffffe          BL       __aeabi_memcpy4
;;;1664    return SMP_SUCCESS;
00000c  2000              MOVS     r0,#0
;;;1665   }
00000e  bd0e              POP      {r1-r3,pc}
;;;1666   
                          ENDP

                  |L47.16|
                          DCD      ||.data||+0x80

                          AREA ||i.drv_bq796xx_rx_pin_wakeup||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_rx_pin_wakeup PROC
;;;149    
;;;150    void drv_bq796xx_rx_pin_wakeup(void){
000000  b570              PUSH     {r4-r6,lr}
;;;151    
;;;152      bq796xx_gpio_rx_state = GPIO_ACTIVE_HIGH;
000002  4d0e              LDR      r5,|L48.60|
000004  2401              MOVS     r4,#1
000006  772c              STRB     r4,[r5,#0x1c]
;;;153      smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
000008  4621              MOV      r1,r4
00000a  f1050058          ADD      r0,r5,#0x58
00000e  f7fffffe          BL       smp_gpio_set_state
;;;154      drv_bq796xx_delay_ms(10);
000012  200a              MOVS     r0,#0xa
000014  f7fffffe          BL       drv_bq796xx_delay_ms
;;;155      
;;;156      bq796xx_gpio_rx_state = GPIO_ACTIVE_LOW;
000018  2100              MOVS     r1,#0
00001a  7729              STRB     r1,[r5,#0x1c]
;;;157      smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
00001c  f1050058          ADD      r0,r5,#0x58
000020  f7fffffe          BL       smp_gpio_set_state
;;;158      drv_bq796xx_delay_ms(3);   //keep low for wake base device(base on Spec. for BQ79600 wakeup timing is 2.5ms ~ 3ms) 
000024  2003              MOVS     r0,#3
000026  f7fffffe          BL       drv_bq796xx_delay_ms
;;;159      
;;;160      bq796xx_gpio_rx_state = GPIO_ACTIVE_HIGH;
00002a  772c              STRB     r4,[r5,#0x1c]
;;;161      smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
00002c  4621              MOV      r1,r4
00002e  f1050058          ADD      r0,r5,#0x58
000032  e8bd4070          POP      {r4-r6,lr}
000036  f7ffbffe          B.W      smp_gpio_set_state
;;;162    }    
;;;163                                                                    
                          ENDP

00003a  0000              DCW      0x0000
                  |L48.60|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_start_setting||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_start_setting PROC
;;;275    
;;;276    uint8_t drv_bq796xx_start_setting(uint8_t maxcnt, uint8_t dir){
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;277    
;;;278        uint8_t    d_payload[4] = {0};
000008  f04f0900          MOV      r9,#0
00000c  f8cd900c          STR      r9,[sp,#0xc]
;;;279        uint8_t    null_payload[4] = {0};
000010  f8cd9008          STR      r9,[sp,#8]
;;;280        uint8_t    i, bmu_cnt = 0, dir_sel;
;;;281        uint16_t   dir_addr;
;;;282        uint8_t    top_no;
;;;283        
;;;284        uint8_t res=0;
;;;285        
;;;286    		top_no = maxcnt;
;;;287    		
;;;288        fill_data4_payload(null_payload,0x00,0,0,0);
000014  2300              MOVS     r3,#0
000016  461a              MOV      r2,r3
000018  4619              MOV      r1,r3
00001a  a802              ADD      r0,sp,#8
00001c  f8cd9000          STR      r9,[sp,#0]
000020  f7fffffe          BL       fill_data4_payload
;;;289        
;;;290        if ( dir == DIR_NORTH ){
000024  b3f4              CBZ      r4,|L49.164|
;;;291            dir_addr = BQ79600_DIR0_ADDR;
;;;292            dir_sel  = DIR_NORTH;
;;;293        }else{
;;;294            dir_addr = BQ79600_DIR1_ADDR;
000026  f2403b07          MOV      r11,#0x307
;;;295            dir_sel = (DIR_SOUTH*BQ79616_DIR_SEL);
00002a  2580              MOVS     r5,#0x80
                  |L49.44|
;;;296        }
;;;297        
;;;298        //Step 1: bq79600 Wakeup 
;;;299        //--------------------------------------------------------------------------------------------------------
;;;300    		drv_bq796xx_switch_rx_pin_type_setting(BQ_GPIO);
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
;;;301        //if ( dir == DIR_NORTH ){
;;;302        drv_bq796xx_rx_pin_wakeup();
000032  f7fffffe          BL       drv_bq796xx_rx_pin_wakeup
;;;303        drv_bq796xx_delay_ms(10);                                                                                                           // v1.0.4Q2 reduce delay time for bq79600 from 100ms to 10ms(follow Spec.)    wait for 79600 wakeup(<10ms)
000036  200a              MOVS     r0,#0xa
000038  f7fffffe          BL       drv_bq796xx_delay_ms
;;;304        //}
;;;305        //--------------------------------------------------------------------------------------------------------  
;;;306      
;;;307        //MCU pin switch to UART function, wait 30ms UART Ready
;;;308        drv_bq796xx_switch_rx_pin_type_setting(BQ_UART);
00003c  2001              MOVS     r0,#1
00003e  f7fffffe          BL       drv_bq796xx_switch_rx_pin_type_setting
;;;309        drv_bq796xx_delay_ms(30); 
000042  201e              MOVS     r0,#0x1e
000044  f7fffffe          BL       drv_bq796xx_delay_ms
;;;310        
;;;311        //Step 2: Setting Wakeup, FCOMMNFAULT + OTP ECC TEST( to syn the DLL delay-locked loop)
;;;312        //--------------------------------------------------------------------------------------------------------
;;;313        fill_data4_payload(d_payload,WAKEUP | dir_sel,0,0,0);
000048  2300              MOVS     r3,#0
00004a  f0450120          ORR      r1,r5,#0x20
00004e  461a              MOV      r2,r3
000050  a803              ADD      r0,sp,#0xc
000052  f8cd9000          STR      r9,[sp,#0]
000056  f7fffffe          BL       fill_data4_payload
;;;314        drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_CONTROL1, 1, d_payload, BQ796XX_CMD_DELAY_MS);
00005a  f04f0801          MOV      r8,#1
00005e  f10d0a0c          ADD      r10,sp,#0xc
000062  e9cda800          STRD     r10,r8,[sp,#0]
000066  4643              MOV      r3,r8
000068  f2403209          MOV      r2,#0x309
00006c  2100              MOVS     r1,#0
00006e  2090              MOVS     r0,#0x90
000070  f7fffffe          BL       drv_bq796xx_command_framing
;;;315        drv_bq796xx_delay_ms(5*bq796xx_default.bmu_total_num);                                                                                            //Each device need Max 10ms for wakeup from reset
000074  48c3              LDR      r0,|L49.900|
000076  7a80              LDRB     r0,[r0,#0xa]  ; bq796xx_default
000078  eb000080          ADD      r0,r0,r0,LSL #2
00007c  f7fffffe          BL       drv_bq796xx_delay_ms
;;;316        
;;;317        fill_data4_payload(d_payload,FCOMM_EN+NFAULT_EN,0,0,0);
000080  2300              MOVS     r3,#0
000082  461a              MOV      r2,r3
000084  2114              MOVS     r1,#0x14
000086  a803              ADD      r0,sp,#0xc
000088  f8cd9000          STR      r9,[sp,#0]
00008c  f7fffffe          BL       fill_data4_payload
;;;318        drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_DEV_CONF1, 1, d_payload, BQ796XX_CMD_DELAY_MS);                               //bq79600 only, Device config1 => enable fault detection and NFault function
000090  e9cda800          STRD     r10,r8,[sp,#0]
000094  2301              MOVS     r3,#1
000096  f2420201          MOV      r2,#0x2001
00009a  2100              MOVS     r1,#0
00009c  2090              MOVS     r0,#0x90
00009e  f7fffffe          BL       drv_bq796xx_command_framing
;;;319        drv_bq796xx_command_framing(SINGLE_WRITE, 0x00, BQ79600_OTP_ECC_TEST, 1, null_payload,   BQ796XX_CMD_DELAY_MS);                       //OTP_ECC_TEST disable
0000a2  e000              B        |L49.166|
                  |L49.164|
0000a4  e00c              B        |L49.192|
                  |L49.166|
0000a6  ae02              ADD      r6,sp,#8
0000a8  e9cd6800          STRD     r6,r8,[sp,#0]
0000ac  2301              MOVS     r3,#1
0000ae  f44f7253          MOV      r2,#0x34c
0000b2  2100              MOVS     r1,#0
0000b4  2090              MOVS     r0,#0x90
0000b6  f7fffffe          BL       drv_bq796xx_command_framing
;;;320        //--------------------------------------------------------------------------------------------------------
;;;321    
;;;322        //Step 3: If direction set to SOUTH, then send BW Reverse (if direct is North(COMH), BQ79600 default: [DIR_SEL] bit=0 ,North, so it can't seting)
;;;323        //--------------------------------------------------------------------------------------------------------
;;;324        if ( dir == DIR_SOUTH ){
0000ba  2c01              CMP      r4,#1
0000bc  d004              BEQ      |L49.200|
0000be  e014              B        |L49.234|
                  |L49.192|
0000c0  f2403b06          MOV      r11,#0x306            ;291
0000c4  2500              MOVS     r5,#0                 ;292
0000c6  e7b1              B        |L49.44|
                  |L49.200|
;;;325             fill_data4_payload(d_payload,dir_sel,0,0,0);
0000c8  2300              MOVS     r3,#0
0000ca  461a              MOV      r2,r3
0000cc  4629              MOV      r1,r5
0000ce  a803              ADD      r0,sp,#0xc
0000d0  f8cd9000          STR      r9,[sp,#0]
0000d4  f7fffffe          BL       fill_data4_payload
;;;326             drv_bq796xx_command_framing(BROAD_WRITE_REVERSE, 0, BQ79600_CONTROL1, 1, d_payload, BQ796XX_CMD_DELAY_MS);     //South direction for all devices	
0000d8  e9cda800          STRD     r10,r8,[sp,#0]
0000dc  2301              MOVS     r3,#1
0000de  f2403209          MOV      r2,#0x309
0000e2  2100              MOVS     r1,#0
0000e4  20e0              MOVS     r0,#0xe0
0000e6  f7fffffe          BL       drv_bq796xx_command_framing
                  |L49.234|
;;;327        }else{
;;;328             //fill_data4_payload(d_payload,dir_sel,0,0,0);
;;;329            // drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_CONTROL1, 1, d_payload, BQ796XX_CMD_DELAY_MS);             //North direction for all devices						
;;;330    		}		
;;;331    		
;;;332    		bq796xx_data.comm_dir = dir;
0000ea  48a7              LDR      r0,|L49.904|
0000ec  f8804d8b          STRB     r4,[r0,#0xd8b]
;;;333    		
;;;334        drv_bq796xx_command_framing(BROAD_WRITE, 0x00, BQ79600_OTP_ECC_TEST, 1, null_payload, BQ796XX_CMD_DELAY_MS);                          // OTP_ECC_TEST disable
0000f0  e9cd6800          STRD     r6,r8,[sp,#0]
0000f4  2301              MOVS     r3,#1
0000f6  f44f7253          MOV      r2,#0x34c
0000fa  2100              MOVS     r1,#0
0000fc  20d0              MOVS     r0,#0xd0
0000fe  f7fffffe          BL       drv_bq796xx_command_framing
;;;335        //--------------------------------------------------------------------------------------------------------
;;;336        
;;;337        //Step 4: Dummy broadcast write 1~8
;;;338        //--------------------------------------------------------------------------------------------------------
;;;339        for ( i = 0; i < 8; i++ ){                                                                                                            // 8 is fixed value according to Spec. 
000102  2400              MOVS     r4,#0
                  |L49.260|
;;;340          drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_OTP_ECC_DATAIN1+i, 1, null_payload, BQ796XX_CMD_DELAY_MS);
000104  e9cd6800          STRD     r6,r8,[sp,#0]
000108  2301              MOVS     r3,#1
00010a  f2043243          ADD      r2,r4,#0x343
00010e  2100              MOVS     r1,#0
000110  20d0              MOVS     r0,#0xd0
000112  f7fffffe          BL       drv_bq796xx_command_framing
000116  1c64              ADDS     r4,r4,#1              ;339
000118  b2e4              UXTB     r4,r4                 ;339
00011a  2c08              CMP      r4,#8                 ;339
00011c  d3f2              BCC      |L49.260|
;;;341        }
;;;342        //--------------------------------------------------------------------------------------------------------
;;;343        
;;;344        //Step 5: (1) Auto addressing enable, (2) Send address to each devices, (3) Check each devices address
;;;345        //--------------------------------------------------------------------------------------------------------
;;;346        //(1) Auto addressing enable
;;;347        fill_data4_payload(d_payload,ADDR_WR | dir_sel,0,0,0);
00011e  2300              MOVS     r3,#0
000120  f0450101          ORR      r1,r5,#1
000124  461a              MOV      r2,r3
000126  a803              ADD      r0,sp,#0xc
000128  f8cd9000          STR      r9,[sp,#0]
00012c  f7fffffe          BL       fill_data4_payload
;;;348        drv_bq796xx_command_framing(BROAD_WRITE, 0, BQ79600_CONTROL1, 1, d_payload, BQ796XX_CMD_DELAY_MS);
000130  e9cda800          STRD     r10,r8,[sp,#0]
000134  2301              MOVS     r3,#1
000136  f2403209          MOV      r2,#0x309
00013a  2100              MOVS     r1,#0
00013c  20d0              MOVS     r0,#0xd0
00013e  f7fffffe          BL       drv_bq796xx_command_framing
;;;349    
;;;350        //(2) Send address to each devices
;;;351        for ( i = 0; i <= MAX_AFE_CNT; i++ ){                                                                                      // 6 bits for address ID
000142  2400              MOVS     r4,#0
                  |L49.324|
;;;352            fill_data4_payload(d_payload,i,0,0,0);
000144  2300              MOVS     r3,#0
000146  461a              MOV      r2,r3
000148  4621              MOV      r1,r4
00014a  a803              ADD      r0,sp,#0xc
00014c  f8cd9000          STR      r9,[sp,#0]
000150  f7fffffe          BL       fill_data4_payload
;;;353            drv_bq796xx_command_framing(BROAD_WRITE, 0, dir_addr, 1, d_payload, BQ796XX_CMD_DELAY_MS);                             // 3000 is base on TI's log file
000154  e9cda800          STRD     r10,r8,[sp,#0]
000158  2301              MOVS     r3,#1
00015a  465a              MOV      r2,r11
00015c  2100              MOVS     r1,#0
00015e  20d0              MOVS     r0,#0xd0
000160  f7fffffe          BL       drv_bq796xx_command_framing
000164  1c64              ADDS     r4,r4,#1              ;351
000166  b2e4              UXTB     r4,r4                 ;351
000168  2c3f              CMP      r4,#0x3f              ;351
00016a  d9eb              BLS      |L49.324|
;;;354        }
;;;355        drv_bq796xx_delay_ms(10);
00016c  200a              MOVS     r0,#0xa
00016e  f7fffffe          BL       drv_bq796xx_delay_ms
;;;356        
;;;357        //Dummy broadcast read 1~8
;;;358        for ( i = 0; i < 8; i++ ){                                                                                                 // 8 is fixed value according to Spec.
000172  2400              MOVS     r4,#0
                  |L49.372|
;;;359            drv_bq796xx_command_framing(BROAD_READ, 0, BQ79600_OTP_ECC_DATAIN1+i, 1, null_payload, BQ796XX_CMD_DELAY_MS);
000174  e9cd6800          STRD     r6,r8,[sp,#0]
000178  2301              MOVS     r3,#1
00017a  f2043243          ADD      r2,r4,#0x343
00017e  2100              MOVS     r1,#0
000180  20c0              MOVS     r0,#0xc0
000182  f7fffffe          BL       drv_bq796xx_command_framing
000186  1c64              ADDS     r4,r4,#1              ;358
000188  b2e4              UXTB     r4,r4                 ;358
00018a  2c08              CMP      r4,#8                 ;358
00018c  d3f2              BCC      |L49.372|
;;;360        }
;;;361        drv_bq796xx_delay_ms(10);
00018e  200a              MOVS     r0,#0xa
000190  f7fffffe          BL       drv_bq796xx_delay_ms
;;;362        
;;;363        //(3) Check each devices address
;;;364        for ( bmu_cnt = 1; bmu_cnt <= top_no; bmu_cnt++){
000194  2401              MOVS     r4,#1
000196  e00c              B        |L49.434|
                  |L49.408|
;;;365            drv_bq796xx_command_framing(SINGLE_READ,  bmu_cnt, dir_addr, 1, null_payload, BQ796XX_CMD_DELAY_MS);                  // 10000 is base on TI's log file
000198  e9cd6800          STRD     r6,r8,[sp,#0]
00019c  2301              MOVS     r3,#1
00019e  465a              MOV      r2,r11
0001a0  4621              MOV      r1,r4
0001a2  2080              MOVS     r0,#0x80
0001a4  f7fffffe          BL       drv_bq796xx_command_framing
;;;366            res = drv_bq796xx_check_respone_event();
0001a8  f7fffffe          BL       drv_bq796xx_check_respone_event
;;;367            if (res == 0){                                                                                                         // no return data => no this ID
0001ac  b118              CBZ      r0,|L49.438|
0001ae  1c64              ADDS     r4,r4,#1              ;364
0001b0  b2e4              UXTB     r4,r4                 ;364
                  |L49.434|
0001b2  42bc              CMP      r4,r7                 ;364
0001b4  d9f0              BLS      |L49.408|
                  |L49.438|
;;;368                break;
;;;369            }
;;;370        }
;;;371        
;;;372        --bmu_cnt;
0001b6  1e64              SUBS     r4,r4,#1
0001b8  b2e4              UXTB     r4,r4
;;;373        if (bmu_cnt == 0 ){   //bmu_cnt==0 is not any device detection.
0001ba  2c00              CMP      r4,#0
0001bc  d07d              BEQ      |L49.698|
;;;374            return 0;  
;;;375        }
;;;376        drv_bq796xx_delay_ms(10);
0001be  200a              MOVS     r0,#0xa
0001c0  f7fffffe          BL       drv_bq796xx_delay_ms
;;;377        //-------------------------------------------------------------------------------------------------------- 
;;;378    
;;;379        //Step 6: Set stack/base/top (i should set it after get device count)
;;;380        //--------------------------------------------------------------------------------------------------------
;;;381        fill_data4_payload(d_payload,BQ79600_STACK,0,0,0);
0001c4  2300              MOVS     r3,#0
0001c6  461a              MOV      r2,r3
0001c8  2102              MOVS     r1,#2
0001ca  a803              ADD      r0,sp,#0xc
0001cc  f8cd9000          STR      r9,[sp,#0]
0001d0  f7fffffe          BL       fill_data4_payload
;;;382        drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_COMM_CTRL, 1, d_payload, BQ796XX_CMD_DELAY_MS);                                 // write stack
0001d4  e9cda800          STRD     r10,r8,[sp,#0]
0001d8  f44f7542          MOV      r5,#0x308
0001dc  2301              MOVS     r3,#1
0001de  462a              MOV      r2,r5
0001e0  2100              MOVS     r1,#0
0001e2  20d0              MOVS     r0,#0xd0
0001e4  f7fffffe          BL       drv_bq796xx_command_framing
;;;383        fill_data4_payload(d_payload,BQ79600_BASE,0,0,0);
0001e8  2300              MOVS     r3,#0
0001ea  461a              MOV      r2,r3
0001ec  4619              MOV      r1,r3
0001ee  a803              ADD      r0,sp,#0xc
0001f0  f8cd9000          STR      r9,[sp,#0]
0001f4  f7fffffe          BL       fill_data4_payload
;;;384        drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_CTRL, 1, d_payload, BQ796XX_CMD_DELAY_MS);                              // write base
0001f8  e9cda800          STRD     r10,r8,[sp,#0]
0001fc  2301              MOVS     r3,#1
0001fe  462a              MOV      r2,r5
000200  2100              MOVS     r1,#0
000202  2090              MOVS     r0,#0x90
000204  f7fffffe          BL       drv_bq796xx_command_framing
;;;385        if (bmu_cnt > maxcnt ){
000208  42bc              CMP      r4,r7
00020a  d900              BLS      |L49.526|
;;;386            bmu_cnt = maxcnt;
00020c  463c              MOV      r4,r7
                  |L49.526|
;;;387        }
;;;388        
;;;389        fill_data4_payload(d_payload,BQ79600_TOP,0,0,0);
00020e  2300              MOVS     r3,#0
000210  461a              MOV      r2,r3
000212  2103              MOVS     r1,#3
000214  a803              ADD      r0,sp,#0xc
000216  f8cd9000          STR      r9,[sp,#0]
00021a  f7fffffe          BL       fill_data4_payload
;;;390        drv_bq796xx_command_framing(SINGLE_WRITE,  bmu_cnt, BQ79600_COMM_CTRL, 1, d_payload, BQ796XX_CMD_DELAY_MS);                          // write top to last BMU
00021e  e9cda800          STRD     r10,r8,[sp,#0]
000222  2301              MOVS     r3,#1
000224  462a              MOV      r2,r5
000226  4621              MOV      r1,r4
000228  2090              MOVS     r0,#0x90
00022a  f7fffffe          BL       drv_bq796xx_command_framing
;;;391        //--------------------------------------------------------------------------------------------------------
;;;392            
;;;393        //Step 7: Clear fault
;;;394        //--------------------------------------------------------------------------------------------------------
;;;395        fill_data4_payload(d_payload,0xFF,0,0,0);
00022e  2300              MOVS     r3,#0
000230  461a              MOV      r2,r3
000232  21ff              MOVS     r1,#0xff
000234  a803              ADD      r0,sp,#0xc
000236  f8cd9000          STR      r9,[sp,#0]
00023a  f7fffffe          BL       fill_data4_payload
;;;396        drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_FAULT_RST1, 1, d_payload, BQ796XX_CMD_DELAY_MS);                               // clear fault1
00023e  e9cda800          STRD     r10,r8,[sp,#0]
000242  2301              MOVS     r3,#1
000244  f2403231          MOV      r2,#0x331
000248  2100              MOVS     r1,#0
00024a  20d0              MOVS     r0,#0xd0
00024c  f7fffffe          BL       drv_bq796xx_command_framing
;;;397        drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_FAULT_RST2, 1, d_payload, BQ796XX_CMD_DELAY_MS);                               // clear fault2
000250  e9cda800          STRD     r10,r8,[sp,#0]
000254  2301              MOVS     r3,#1
000256  f2403232          MOV      r2,#0x332
00025a  2100              MOVS     r1,#0
00025c  20d0              MOVS     r0,#0xd0
00025e  f7fffffe          BL       drv_bq796xx_command_framing
;;;398        
;;;399        fill_data4_payload(d_payload,BQ79600_RST_FCOMM_DET | BQ79600_RST_SYS,0,0,0);
000262  2300              MOVS     r3,#0
000264  461a              MOV      r2,r3
000266  2122              MOVS     r1,#0x22
000268  a803              ADD      r0,sp,#0xc
00026a  f8cd9000          STR      r9,[sp,#0]
00026e  f7fffffe          BL       fill_data4_payload
;;;400        drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_FAULT_RST, 1,d_payload , BQ796XX_CMD_DELAY_MS);                             // bq79600 only,  fault reset => reset comm and fault syserr
000272  e9cda800          STRD     r10,r8,[sp,#0]
000276  2301              MOVS     r3,#1
000278  f2420230          MOV      r2,#0x2030
00027c  2100              MOVS     r1,#0
00027e  2090              MOVS     r0,#0x90
000280  f7fffffe          BL       drv_bq796xx_command_framing
;;;401        
;;;402        drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_OTP_SPARE13, 1, null_payload, BQ796XX_CMD_DELAY_MS);                           // OTP_SPARE 13
000284  e9cd6800          STRD     r6,r8,[sp,#0]
000288  2301              MOVS     r3,#1
00028a  2213              MOVS     r2,#0x13
00028c  2100              MOVS     r1,#0
00028e  20b0              MOVS     r0,#0xb0
000290  f7fffffe          BL       drv_bq796xx_command_framing
;;;403        drv_bq796xx_command_framing(SINGLE_WRITE,  0x00, BQ79600_COMM_TIMEOUT, 1, null_payload, BQ796XX_CMD_DELAY_MS);                       // bq79600 only, command timeout => disable CTS/CTL(no command timeout for short/long)
000294  e9cd6800          STRD     r6,r8,[sp,#0]
000298  2301              MOVS     r3,#1
00029a  f2420205          MOV      r2,#0x2005
00029e  2100              MOVS     r1,#0
0002a0  2090              MOVS     r0,#0x90
0002a2  f7fffffe          BL       drv_bq796xx_command_framing
;;;404    
;;;405    
;;;406        //Step 8: Enable TSREF
;;;407        //--------------------------------------------------------------------------------------------------------
;;;408        fill_data4_payload(d_payload,BQ79600_TSREF_EN,0,0,0);
0002a6  2300              MOVS     r3,#0
0002a8  461a              MOV      r2,r3
0002aa  2101              MOVS     r1,#1
0002ac  a803              ADD      r0,sp,#0xc
0002ae  f8cd9000          STR      r9,[sp,#0]
0002b2  f7fffffe          BL       fill_data4_payload
;;;409        drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_CONTROL2, 1, d_payload, BQ796XX_CMD_DELAY_MS);                                  // Enable TSREF(5V)
0002b6  2301              MOVS     r3,#1
0002b8  e000              B        |L49.700|
                  |L49.698|
0002ba  e061              B        |L49.896|
                  |L49.700|
0002bc  e9cda800          STRD     r10,r8,[sp,#0]
0002c0  f240320a          MOV      r2,#0x30a
0002c4  2100              MOVS     r1,#0
0002c6  20b0              MOVS     r0,#0xb0
0002c8  f7fffffe          BL       drv_bq796xx_command_framing
;;;410        //--------------------------------------------------------------------------------------------------------
;;;411    
;;;412        //Step 9: Setting main ADC
;;;413        //--------------------------------------------------------------------------------------------------------
;;;414        fill_data4_payload(d_payload,BMU_CELL_SERIES-6,0,0,0);
0002cc  2300              MOVS     r3,#0
0002ce  461a              MOV      r2,r3
0002d0  210a              MOVS     r1,#0xa
0002d2  a803              ADD      r0,sp,#0xc
0002d4  f8cd9000          STR      r9,[sp,#0]
0002d8  f7fffffe          BL       fill_data4_payload
;;;415        drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_ACTIVE_CELL, 1, d_payload, BQ796XX_CMD_DELAY_MS);                              // Set active cell No. to 16s(0=6s)
0002dc  e9cda800          STRD     r10,r8,[sp,#0]
0002e0  2301              MOVS     r3,#1
0002e2  2203              MOVS     r2,#3
0002e4  2100              MOVS     r1,#0
0002e6  20d0              MOVS     r0,#0xd0
0002e8  f7fffffe          BL       drv_bq796xx_command_framing
;;;416        
;;;417        fill_data4_payload(d_payload,0x03,0,0,0);
0002ec  2300              MOVS     r3,#0
0002ee  461a              MOV      r2,r3
0002f0  2103              MOVS     r1,#3
0002f2  a803              ADD      r0,sp,#0xc
0002f4  f8cd9000          STR      r9,[sp,#0]
0002f8  f7fffffe          BL       fill_data4_payload
;;;418        drv_bq796xx_command_framing(BROAD_WRITE,   0, BQ79600_ADC_CONF1, 1, d_payload, BQ796XX_CMD_DELAY_MS);                                // 26Hz LPF_Vcell (38ms average)     2:26hz(38ms), 3:53hz(19ms)
0002fc  e9cda800          STRD     r10,r8,[sp,#0]
000300  2301              MOVS     r3,#1
000302  2207              MOVS     r2,#7
000304  2100              MOVS     r1,#0
000306  20d0              MOVS     r0,#0xd0
000308  f7fffffe          BL       drv_bq796xx_command_framing
;;;419        
;;;420        fill_data4_payload(d_payload,0x1E,0,0,0);
00030c  2300              MOVS     r3,#0
00030e  461a              MOV      r2,r3
000310  211e              MOVS     r1,#0x1e
000312  a803              ADD      r0,sp,#0xc
000314  f8cd9000          STR      r9,[sp,#0]
000318  f7fffffe          BL       fill_data4_payload
;;;421        drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_ADC_CTRL1, 1, d_payload, BQ796XX_CMD_DELAY_MS);                                // [LPF BB EN]=1, Cell filter([3]=1), start ADC([2]=1), continue run([1:0]=2)
00031c  e9cda800          STRD     r10,r8,[sp,#0]
000320  2301              MOVS     r3,#1
000322  f240320d          MOV      r2,#0x30d
000326  2100              MOVS     r1,#0
000328  20b0              MOVS     r0,#0xb0
00032a  f7fffffe          BL       drv_bq796xx_command_framing
;;;422        drv_bq796xx_delay_ms(38+5*bmu_cnt);                                                                                                  // Initial delay to allow LPF to average for 38ms (26Hz LPF setting used)
00032e  eb040084          ADD      r0,r4,r4,LSL #2
000332  3026              ADDS     r0,r0,#0x26
000334  f7fffffe          BL       drv_bq796xx_delay_ms
;;;423        
;;;424        // set comparator threshold for OV/UV/OT/UT WriteReg(0, ACTIVE_CELL, 0x0A, 1, FRMWRT_ALL_W);                                         // Set all cells to active
;;;425        fill_data4_payload(d_payload,0x0D,0,0,0);
000338  2300              MOVS     r3,#0
00033a  461a              MOV      r2,r3
00033c  210d              MOVS     r1,#0xd
00033e  a803              ADD      r0,sp,#0xc
000340  f8cd9000          STR      r9,[sp,#0]
000344  f7fffffe          BL       fill_data4_payload
;;;426        drv_bq796xx_command_framing(STACK_WRITE,   0, BQ79600_COMM_TIMEOUT_CONF, 1, d_payload, BQ796XX_CMD_DELAY_MS);                         // Let BMU shutdown after no communication 10 s
000348  e9cda800          STRD     r10,r8,[sp,#0]
00034c  2301              MOVS     r3,#1
00034e  2219              MOVS     r2,#0x19
000350  2100              MOVS     r1,#0
000352  20b0              MOVS     r0,#0xb0
000354  f7fffffe          BL       drv_bq796xx_command_framing
;;;427        //--------------------------------------------------------------------------------------------------------
;;;428        
;;;429    		//Step 10: //All BMU Device will allow two adjacent CB FETs to be enabled
;;;430    		//--------------------------------------------------------------------------------------------------------
;;;431    		fill_data4_payload(d_payload,((FCOMM_EN | NFAULT_EN) &(~(NO_ADJ_CB))), 0, 0, 0);   
000358  2300              MOVS     r3,#0
00035a  461a              MOV      r2,r3
00035c  2114              MOVS     r1,#0x14
00035e  a803              ADD      r0,sp,#0xc
000360  f8cd9000          STR      r9,[sp,#0]
000364  f7fffffe          BL       fill_data4_payload
;;;432        drv_bq796xx_command_framing(STACK_WRITE, 0x00, BQ796XX_DEV_CONF,1, d_payload, 0);
000368  e9cda900          STRD     r10,r9,[sp,#0]
00036c  2301              MOVS     r3,#1
00036e  2202              MOVS     r2,#2
000370  2100              MOVS     r1,#0
000372  20b0              MOVS     r0,#0xb0
000374  f7fffffe          BL       drv_bq796xx_command_framing
;;;433    		//--------------------------------------------------------------------------------------------------------
;;;434    		
;;;435        return bmu_cnt;
000378  4620              MOV      r0,r4
                  |L49.890|
;;;436    }
00037a  b004              ADD      sp,sp,#0x10
00037c  e8bd9ff0          POP      {r4-r12,pc}
                  |L49.896|
000380  2000              MOVS     r0,#0                 ;374
000382  e7fa              B        |L49.890|
;;;437    
                          ENDP

                  |L49.900|
                          DCD      ||.data||+0x80
                  |L49.904|
                          DCD      ||area_number.59||+0x86

                          AREA ||i.drv_bq796xx_switch_rx_pin_type_setting||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_switch_rx_pin_type_setting PROC
;;;111                                                                                                
;;;112    void drv_bq796xx_switch_rx_pin_type_setting(bq796xx_io_type type){
000000  b508              PUSH     {r3,lr}
;;;113    
;;;114        switch(type){
000002  2800              CMP      r0,#0
000004  d00f              BEQ      |L50.38|
000006  2801              CMP      r0,#1
000008  d10c              BNE      |L50.36|
;;;115        case BQ_GPIO:
;;;116            // BQ796XX rx pin init and set pin to pull high.
;;;117            smp_gpio_init(&bq796xx_gpio_rx);
;;;118            bq796xx_gpio_rx_state = GPIO_ACTIVE_HIGH;
;;;119            smp_gpio_set_state(&bq796xx_gpio_rx, bq796xx_gpio_rx_state);
;;;120            break;
;;;121        case BQ_UART:
;;;122            // BQ796XX to MCU UART init      
;;;123            if(smp_uart_init(&bq796xx_uart, drv_bq796xx_uart_event_handler)==SMP_SUCCESS){
00000a  4912              LDR      r1,|L50.84|
00000c  4812              LDR      r0,|L50.88|
00000e  f7fffffe          BL       smp_uart_init
000012  b1a8              CBZ      r0,|L50.64|
;;;124                LOG_MAGENTA("BMU UART initial success!\r\n");
;;;125            }else{
;;;126                LOG_MAGENTA("BMU UART initial fail!\r\n");
000014  a011              ADR      r0,|L50.92|
000016  9000              STR      r0,[sp,#0]
000018  a311              ADR      r3,|L50.96|
00001a  a212              ADR      r2,|L50.100|
00001c  a113              ADR      r1,|L50.108|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       SEGGER_RTT_printf
                  |L50.36|
;;;127            }  
;;;128            break;    
;;;129        }
;;;130    }
000024  bd08              POP      {r3,pc}
                  |L50.38|
000026  480c              LDR      r0,|L50.88|
000028  3834              SUBS     r0,r0,#0x34           ;117
00002a  f7fffffe          BL       smp_gpio_init
00002e  480a              LDR      r0,|L50.88|
000030  2101              MOVS     r1,#1                 ;118
000032  388c              SUBS     r0,r0,#0x8c           ;118
000034  7701              STRB     r1,[r0,#0x1c]         ;118
000036  e8bd4008          POP      {r3,lr}               ;119
00003a  3058              ADDS     r0,r0,#0x58           ;119
00003c  f7ffbffe          B.W      smp_gpio_set_state
                  |L50.64|
000040  a006              ADR      r0,|L50.92|
000042  9000              STR      r0,[sp,#0]            ;124
000044  a306              ADR      r3,|L50.96|
000046  a207              ADR      r2,|L50.100|
000048  a110              ADR      r1,|L50.140|
00004a  2000              MOVS     r0,#0                 ;124
00004c  f7fffffe          BL       SEGGER_RTT_printf
000050  bd08              POP      {r3,pc}
;;;131    
                          ENDP

000052  0000              DCW      0x0000
                  |L50.84|
                          DCD      drv_bq796xx_uart_event_handler
                  |L50.88|
                          DCD      ||.data||+0x8c
                  |L50.92|
00005c  1b5b306d          DCB      27,"[0m"
                  |L50.96|
000060  00                DCB      0
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
                  |L50.100|
000064  1b5b313b          DCB      27,"[1;35m",0
000068  33356d00
                  |L50.108|
00006c  25732573          DCB      "%s%sBMU UART initial fail!\r\n%s",0
000070  424d5520
000074  55415254
000078  20696e69
00007c  7469616c
000080  20666169
000084  6c210d0a
000088  257300  
00008b  00                DCB      0
                  |L50.140|
00008c  25732573          DCB      "%s%sBMU UART initial success!\r\n%s",0
000090  424d5520
000094  55415254
000098  20696e69
00009c  7469616c
0000a0  20737563
0000a4  63657373
0000a8  210d0a25
0000ac  7300    
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.drv_bq796xx_uart_event_handler||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_uart_event_handler PROC
;;;1031   
;;;1032   void drv_bq796xx_uart_event_handler(uart_evt_type p_evt)
000000  2800              CMP      r0,#0
;;;1033   {
000002  d103              BNE      |L51.12|
;;;1034     
;;;1035     switch(p_evt){
;;;1036       case UART_DATA_READY:
;;;1037         /* received data handle */
;;;1038         bq796xx_res_buf_c++;
000004  4802              LDR      r0,|L51.16|
000006  8bc1              LDRH     r1,[r0,#0x1e]  ; bq796xx_res_buf_c
000008  1c49              ADDS     r1,r1,#1
00000a  83c1              STRH     r1,[r0,#0x1e]
                  |L51.12|
;;;1039       break;
;;;1040       case UART_TX_EMPTY:
;;;1041         /* Data transmission complete handle */
;;;1042       break;
;;;1043       case UART_COMMUNICATION_ERR:
;;;1044         /* occurred during reception */
;;;1045       break;
;;;1046       case UART_BUFFER_FULL:
;;;1047         /* occurred UART buffer full */
;;;1048       break;    
;;;1049       default:
;;;1050       break;
;;;1051     }
;;;1052   }
00000c  4770              BX       lr
;;;1053   
                          ENDP

00000e  0000              DCW      0x0000
                  |L51.16|
                          DCD      ||.data||

                          AREA ||i.drv_bq796xx_uart_puts||, CODE, READONLY, ALIGN=2

                  drv_bq796xx_uart_puts PROC
;;;131    
;;;132    void drv_bq796xx_uart_puts(uint8_t *d_bytes,int16_t d_size){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;133      uint16_t i = 0;
000006  2400              MOVS     r4,#0
000008  e005              B        |L52.22|
                  |L52.10|
;;;134      
;;;135      for(i=0; i<d_size ;i++){
;;;136        smp_uart_put(&bq796xx_uart,d_bytes[i]);
00000a  5d29              LDRB     r1,[r5,r4]
00000c  4803              LDR      r0,|L52.28|
00000e  f7fffffe          BL       smp_uart_put
000012  1c64              ADDS     r4,r4,#1              ;135
000014  b2a4              UXTH     r4,r4                 ;135
                  |L52.22|
000016  42b4              CMP      r4,r6                 ;135
000018  dbf7              BLT      |L52.10|
;;;137      }
;;;138    }
00001a  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

                  |L52.28|
                          DCD      ||.data||+0x8c

                          AREA ||i.fill_data4_payload||, CODE, READONLY, ALIGN=1

                  fill_data4_payload PROC
;;;268    
;;;269    void fill_data4_payload(uint8_t *payload,uint8_t b1,uint8_t b2,uint8_t b3,uint8_t b4){
000000  b510              PUSH     {r4,lr}
000002  9c02              LDR      r4,[sp,#8]
;;;270      payload[0]=b1;
000004  7001              STRB     r1,[r0,#0]
;;;271      payload[1]=b2;
000006  7042              STRB     r2,[r0,#1]
;;;272      payload[2]=b3;
000008  7083              STRB     r3,[r0,#2]
;;;273      payload[3]=b4;
00000a  70c4              STRB     r4,[r0,#3]
;;;274    }
00000c  bd10              POP      {r4,pc}
;;;275    
                          ENDP


                          AREA ||i.smp_time_count_get||, CODE, READONLY, ALIGN=2

                  smp_time_count_get PROC
;;;93     
;;;94     uint16_t smp_time_count_get(void){
000000  4801              LDR      r0,|L54.8|
;;;95         return(smp_time_count);
000002  8c00              LDRH     r0,[r0,#0x20]  ; smp_time_count
;;;96     }
000004  4770              BX       lr
;;;97     
                          ENDP

000006  0000              DCW      0x0000
                  |L54.8|
                          DCD      ||.data||

                          AREA ||i.smp_time_count_set||, CODE, READONLY, ALIGN=2

                  smp_time_count_set PROC
;;;97     
;;;98     void smp_time_count_set(uint16_t val){
000000  4901              LDR      r1,|L55.8|
;;;99         smp_time_count = val;
000002  8408              STRH     r0,[r1,#0x20]
;;;100    }
000004  4770              BX       lr
;;;101    
                          ENDP

000006  0000              DCW      0x0000
                  |L55.8|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  bq796xx_tx_buffer
                          %        512

                          AREA ||area_number.58||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.bss||
                  bq796xx_rx_buffer
                          %        512

                          AREA ||area_number.59||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.59||, ||.bss||
                  bq796xx_res_buf
                          %        134
                  bq796xx_data
                          %        3472

                          AREA ||.data||, DATA, ALIGN=2

                  bq796xx_afe_fault_msk1
000000  00                DCB      0x00
                  bq796xx_afe_fault_msk2
000001  00                DCB      0x00
                  bq796xx_afe_fault_rst1
000002  00                DCB      0x00
                  set_gpio
000003  00                DCB      0x00
                  set_reg_addr
000004  00                DCB      0x00
                  steps
000005  00                DCB      0x00
                  device_id
000006  00                DCB      0x00
                  data_len
000007  00                DCB      0x00
                  fifo_res
000008  00                DCB      0x00
                  bmu_cnt
000009  00                DCB      0x00
                  dir_sel
00000a  00                DCB      0x00
                  top_no
00000b  00                DCB      0x00
                  sub_step
00000c  00                DCB      0x00
                  rcv_check_step
00000d  00                DCB      0x00
                  is_ring
00000e  00                DCB      0x00
                  wait_index
00000f  00                DCB      0x00
                  cell_cnt
000010  00                DCB      0x00
                  set_val
000011  00                DCB      0x00
                  retry_cnt
000012  00                DCB      0x00
                  mask_en
000013  00                DCB      0x00
                  |symbol_number.181|
000014  00                DCB      0x00
                  |symbol_number.182|
000015  00                DCB      0x00
                  |symbol_number.183|
000016  00                DCB      0x00
                  |symbol_number.184|
000017  00                DCB      0x00
                  |symbol_number.185|
000018  00                DCB      0x00
                  |symbol_number.186|
000019  00                DCB      0x00
                  |symbol_number.187|
00001a  00                DCB      0x00
                  bq796xx_gpio_ncs_state
00001b  00                DCB      0x00
                  bq796xx_gpio_rx_state
00001c  0000              DCB      0x00,0x00
                  bq796xx_res_buf_c
00001e  0000              DCW      0x0000
                  smp_time_count
000020  0000              DCW      0x0000
                  rcv_temp_cnt
000022  0000              DCW      0x0000
                  |symbol_number.189|
000024  0000              DCW      0x0000
                  read_reg_adr
000026  0000              DCW      0x0000
                  ||crc||
000028  0000              DCB      0x00,0x00
                  rcv_crc
00002a  0000              DCB      0x00,0x00
                  dir_addr
00002c  0000              DCB      0x00,0x00
                  |symbol_number.194|
00002e  0000              DCB      0x00,0x00
                  bq796xx_afe_gpio_conf
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  d_payload
000034  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.196|
000038  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.197|
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.198|
000040  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.199|
000044  00000000          DCB      0x00,0x00,0x00,0x00
                  |symbol_number.200|
000048  00000000          DCB      0x00,0x00,0x00,0x00
                  bq796xx_event_cb
                          DCD      0x00000000
                  bq796xx_gpio_ncs
000050  000f0100          DCB      0x00,0x0f,0x01,0x00
                          DCD      0x00000000
                  bq796xx_gpio_rx
000058  020a0100          DCB      0x02,0x0a,0x01,0x00
                          DCD      0x00000000
                  payload_temp
000060  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  |symbol_number.202|
000068  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  |symbol_number.203|
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  |symbol_number.204|
000078  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  bq796xx_default
000080  22022400          DCB      0x22,0x02,0x24,0x00
000084  07010101          DCB      0x07,0x01,0x01,0x01
000088  01010d00          DCB      0x01,0x01,0x0d,0x00
                  bq796xx_uart
00008c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x000f4240
000094  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      bq796xx_rx_buffer
                          DCD      0x00000200
                          DCD      bq796xx_tx_buffer
                          DCD      0x00000200

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\SMP\\smp_drv_bq796xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_smp_drv_bq796xx_c_43c57abb____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___17_smp_drv_bq796xx_c_43c57abb____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_smp_drv_bq796xx_c_43c57abb____REVSH|
#line 507
|__asm___17_smp_drv_bq796xx_c_43c57abb____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_smp_drv_bq796xx_c_43c57abb____RRX|
#line 694
|__asm___17_smp_drv_bq796xx_c_43c57abb____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
