L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_swpmi.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_swpmi.c
N  * @author  MCD Application Team
N  * @brief   SWPMI LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_swpmi.h"
S#include "stm32l4xx_ll_bus.h"
S#ifdef  USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined(SWPMI1)
S
S/** @addtogroup SWPMI_LL
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/** @addtogroup SWPMI_LL_Private_Macros
S  * @{
S  */
S
S#define IS_LL_SWPMI_BITRATE_VALUE(__VALUE__) (((__VALUE__) <= 63U))
S
S#define IS_LL_SWPMI_SW_BUFFER_RX(__VALUE__) (((__VALUE__) == LL_SWPMI_SW_BUFFER_RX_SINGLE) \
S                                          || ((__VALUE__) == LL_SWPMI_SW_BUFFER_RX_MULTI))
X#define IS_LL_SWPMI_SW_BUFFER_RX(__VALUE__) (((__VALUE__) == LL_SWPMI_SW_BUFFER_RX_SINGLE)                                           || ((__VALUE__) == LL_SWPMI_SW_BUFFER_RX_MULTI))
S
S#define IS_LL_SWPMI_SW_BUFFER_TX(__VALUE__) (((__VALUE__) == LL_SWPMI_SW_BUFFER_TX_SINGLE) \
S                                          || ((__VALUE__) == LL_SWPMI_SW_BUFFER_TX_MULTI))
X#define IS_LL_SWPMI_SW_BUFFER_TX(__VALUE__) (((__VALUE__) == LL_SWPMI_SW_BUFFER_TX_SINGLE)                                           || ((__VALUE__) == LL_SWPMI_SW_BUFFER_TX_MULTI))
S
S#define IS_LL_SWPMI_VOLTAGE_CLASS(__VALUE__) (((__VALUE__) == LL_SWPMI_VOLTAGE_CLASS_C) \
S                                           || ((__VALUE__) == LL_SWPMI_VOLTAGE_CLASS_B))
X#define IS_LL_SWPMI_VOLTAGE_CLASS(__VALUE__) (((__VALUE__) == LL_SWPMI_VOLTAGE_CLASS_C)                                            || ((__VALUE__) == LL_SWPMI_VOLTAGE_CLASS_B))
S
S/**
S  * @}
S  */
S
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup SWPMI_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup SWPMI_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize the SWPMI peripheral registers to their default reset values.
S  * @param  SWPMIx SWPMI Instance
S  * @retval An ErrorStatus enumeration value
S  *          - SUCCESS: SWPMI registers are de-initialized
S  *          - ERROR: Not applicable
S  */
SErrorStatus LL_SWPMI_DeInit(SWPMI_TypeDef *SWPMIx)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check the parameter */
S  assert_param(IS_SWPMI_INSTANCE(SWPMIx));
S
S  if (SWPMIx == SWPMI1)
S  {
S    LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_SWPMI1);
S    LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_SWPMI1);
S  }
S  else
S  {
S    status = ERROR;
S  }
S
S  return status;
S}
S
S/**
S  * @brief  Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitStruct.
S  * @note   As some bits in SWPMI configuration registers can only be written when the SWPMI is deactivated (SWPMI_CR_SWPACT bit = 0),
S  *         SWPMI IP should be in deactivated state prior calling this function. Otherwise, ERROR result will be returned.
S  * @param  SWPMIx           SWPMI Instance
S  * @param  SWPMI_InitStruct pointer to a @ref LL_SWPMI_InitTypeDef structure that contains
S  *                          the configuration information for the SWPMI peripheral.
S  * @retval An ErrorStatus enumeration value
S  *          - SUCCESS: SWPMI registers are initialized
S  *          - ERROR: SWPMI registers are not initialized
S  */
SErrorStatus LL_SWPMI_Init(SWPMI_TypeDef *SWPMIx, LL_SWPMI_InitTypeDef *SWPMI_InitStruct)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check the parameters */
S  assert_param(IS_SWPMI_INSTANCE(SWPMIx));
S  assert_param(IS_LL_SWPMI_BITRATE_VALUE(SWPMI_InitStruct->BitRatePrescaler));
S  assert_param(IS_LL_SWPMI_SW_BUFFER_TX(SWPMI_InitStruct->TxBufferingMode));
S  assert_param(IS_LL_SWPMI_SW_BUFFER_RX(SWPMI_InitStruct->RxBufferingMode));
S  assert_param(IS_LL_SWPMI_VOLTAGE_CLASS(SWPMI_InitStruct->VoltageClass));
S
S  /* SWPMI needs to be in deactivated state, in order to be able to configure some bits */
S  if (LL_SWPMI_IsActivated(SWPMIx) == 0U)
S  {
S    /* Configure the BRR register (Bitrate) */
S    LL_SWPMI_SetBitRatePrescaler(SWPMIx, SWPMI_InitStruct->BitRatePrescaler);
S
S    /* Configure the voltage class */
S    LL_SWPMI_SetVoltageClass(SWPMIx, SWPMI_InitStruct->VoltageClass);
S
S    /* Set the new configuration of the SWPMI peripheral */
S    MODIFY_REG(SWPMIx->CR,
S              (SWPMI_CR_RXMODE | SWPMI_CR_TXMODE),
S              (SWPMI_InitStruct->TxBufferingMode | SWPMI_InitStruct->RxBufferingMode));
S  }
S  /* Else (SWPMI not in deactivated state => return ERROR) */
S  else
S  {
S    status = ERROR;
S  }
S
S  return status;
S}
S
S/**
S  * @brief  Set each @ref LL_SWPMI_InitTypeDef field to default value.
S  * @param  SWPMI_InitStruct pointer to a @ref LL_SWPMI_InitTypeDef structure that contains
S  *                          the configuration information for the SWPMI peripheral.
S  * @retval None
S  */
Svoid LL_SWPMI_StructInit(LL_SWPMI_InitTypeDef *SWPMI_InitStruct)
S{
S  /* Set SWPMI_InitStruct fields to default values */
S  SWPMI_InitStruct->VoltageClass     = LL_SWPMI_VOLTAGE_CLASS_C;
S  SWPMI_InitStruct->BitRatePrescaler = (uint32_t)0x00000001;
S  SWPMI_InitStruct->TxBufferingMode  = LL_SWPMI_SW_BUFFER_TX_SINGLE;
S  SWPMI_InitStruct->RxBufferingMode  = LL_SWPMI_SW_BUFFER_RX_SINGLE;
S}
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* SWPMI1 */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
