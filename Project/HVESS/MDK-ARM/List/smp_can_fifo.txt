; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_can_fifo.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_can_fifo.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Lib\SMP\smp_can_fifo.c]
                          THUMB

                          AREA ||i.smp_can_fifo_clean||, CODE, READONLY, ALIGN=1

                  smp_can_fifo_clean PROC
;;;95     
;;;96     int8_t smp_can_fifo_clean(smp_can_fifo_t *p_fifo)
000000  b510              PUSH     {r4,lr}
;;;97     {
000002  4604              MOV      r4,r0
;;;98     	memset(p_fifo->buffer_addr,0,p_fifo->buffer_size);
000004  88a1              LDRH     r1,[r4,#4]
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       __aeabi_memclr4
;;;99     	p_fifo->in=0;
00000c  2000              MOVS     r0,#0
00000e  60a0              STR      r0,[r4,#8]
;;;100    	p_fifo->out=0;	
000010  60e0              STR      r0,[r4,#0xc]
;;;101    	return SMP_SUCCESS;
;;;102    }
000012  bd10              POP      {r4,pc}
;;;103    
                          ENDP


                          AREA ||i.smp_can_fifo_get_size||, CODE, READONLY, ALIGN=1

                  smp_can_fifo_get_size PROC
;;;83     #endif
;;;84     int8_t smp_can_fifo_get_size(smp_can_fifo_t *p_fifo, uint16_t *size)
000000  e9d03202          LDRD     r3,r2,[r0,#8]
;;;85     {
;;;86         if(p_fifo->in==p_fifo->out){
000004  4293              CMP      r3,r2
000006  d102              BNE      |L2.14|
;;;87     		return SMP_ERROR_RESOURCES; //Buf empty
000008  f06f000d          MVN      r0,#0xd
;;;88     	}else if(p_fifo->in>p_fifo->out){
;;;89     		*size = p_fifo->in-p_fifo->out;
;;;90     	}else{
;;;91     		*size = (p_fifo->buffer_size-p_fifo->out)+(p_fifo->in);
;;;92     	}	
;;;93     	return SMP_SUCCESS;
;;;94     }
00000c  4770              BX       lr
                  |L2.14|
00000e  d903              BLS      |L2.24|
000010  eba30002          SUB      r0,r3,r2              ;89
000014  8008              STRH     r0,[r1,#0]            ;89
000016  e004              B        |L2.34|
                  |L2.24|
000018  8880              LDRH     r0,[r0,#4]            ;91
00001a  eba00002          SUB      r0,r0,r2              ;91
00001e  4418              ADD      r0,r0,r3              ;91
000020  8008              STRH     r0,[r1,#0]            ;91
                  |L2.34|
000022  f04f0000          MOV      r0,#0                 ;93
000026  4770              BX       lr
;;;95     
                          ENDP


                          AREA ||i.smp_can_fifo_open||, CODE, READONLY, ALIGN=1

                  smp_can_fifo_open PROC
;;;28     
;;;29     int8_t smp_can_fifo_open(smp_can_fifo_t *p_fifo)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	if(p_fifo!=NULL){
000002  2800              CMP      r0,#0
000004  d003              BEQ      |L3.14|
;;;32     		smp_can_fifo_clean(p_fifo);
000006  f7fffffe          BL       smp_can_fifo_clean
;;;33     	}else{
;;;34     		return SMP_ERROR_NULL;
;;;35     	}	
;;;36     	
;;;37     	return SMP_SUCCESS;
00000a  2000              MOVS     r0,#0
;;;38     }
00000c  bd10              POP      {r4,pc}
                  |L3.14|
00000e  f06f000a          MVN      r0,#0xa               ;34
000012  bd10              POP      {r4,pc}
;;;39     
                          ENDP


                          AREA ||i.smp_can_fifo_pop||, CODE, READONLY, ALIGN=1

                  smp_can_fifo_pop PROC
;;;50     
;;;51     int8_t smp_can_fifo_pop(smp_can_fifo_t *p_fifo,smp_can_package_t *pCanPkg)
000000  b530              PUSH     {r4,r5,lr}
;;;52     {
;;;53     	if(p_fifo->in == p_fifo->out){
000002  e9d03202          LDRD     r3,r2,[r0,#8]
000006  4293              CMP      r3,r2
000008  d102              BNE      |L4.16|
;;;54     		return SMP_ERROR_RESOURCES; //Buf empty
00000a  f06f000d          MVN      r0,#0xd
;;;55     	}else{
;;;56     		memcpy(pCanPkg, &p_fifo->buffer_addr[p_fifo->out], sizeof(smp_can_package_t)); 
;;;57     		p_fifo->out=(p_fifo->out+1)%p_fifo->buffer_size;
;;;58     	}		
;;;59     	return SMP_SUCCESS;
;;;60     }
00000e  bd30              POP      {r4,r5,pc}
                  |L4.16|
000010  6803              LDR      r3,[r0,#0]            ;56
000012  eb031202          ADD      r2,r3,r2,LSL #4       ;56
000016  e8920038          LDM      r2,{r3-r5}            ;56
00001a  68d2              LDR      r2,[r2,#0xc]          ;56
00001c  e8810038          STM      r1,{r3-r5}            ;56
000020  60ca              STR      r2,[r1,#0xc]          ;56
000022  68c1              LDR      r1,[r0,#0xc]          ;57
000024  8882              LDRH     r2,[r0,#4]            ;57
000026  1c49              ADDS     r1,r1,#1              ;57
000028  fbb1f3f2          UDIV     r3,r1,r2              ;57
00002c  fb021113          MLS      r1,r2,r3,r1           ;57
000030  60c1              STR      r1,[r0,#0xc]          ;57
000032  2000              MOVS     r0,#0                 ;59
000034  bd30              POP      {r4,r5,pc}
;;;61     #if	0
                          ENDP


                          AREA ||i.smp_can_fifo_push||, CODE, READONLY, ALIGN=1

                  smp_can_fifo_push PROC
;;;39     
;;;40     int8_t smp_can_fifo_push(smp_can_fifo_t *p_fifo, smp_can_package_t *pCanPkg)
000000  b530              PUSH     {r4,r5,lr}
;;;41     {
;;;42     	if((p_fifo->in+1)%p_fifo->buffer_size == p_fifo->out){
000002  6882              LDR      r2,[r0,#8]
000004  8883              LDRH     r3,[r0,#4]
000006  4614              MOV      r4,r2
000008  1c52              ADDS     r2,r2,#1
00000a  fbb2f5f3          UDIV     r5,r2,r3
00000e  fb032215          MLS      r2,r3,r5,r2
000012  68c3              LDR      r3,[r0,#0xc]
000014  429a              CMP      r2,r3
000016  d102              BNE      |L5.30|
;;;43     		return SMP_ERROR_FULL; //Buf full
000018  f06f0012          MVN      r0,#0x12
;;;44     	}else{
;;;45     		memcpy(&p_fifo->buffer_addr[p_fifo->in] ,pCanPkg, sizeof(smp_can_package_t)); 
;;;46     		p_fifo->in = (p_fifo->in + 1) % p_fifo->buffer_size;
;;;47     	}
;;;48     	return SMP_SUCCESS;
;;;49     }
00001c  bd30              POP      {r4,r5,pc}
                  |L5.30|
00001e  6802              LDR      r2,[r0,#0]            ;45
000020  eb021204          ADD      r2,r2,r4,LSL #4       ;45
000024  e8910038          LDM      r1,{r3-r5}            ;45
000028  68c9              LDR      r1,[r1,#0xc]          ;45
00002a  e8820038          STM      r2,{r3-r5}            ;45
00002e  60d1              STR      r1,[r2,#0xc]          ;45
000030  6881              LDR      r1,[r0,#8]            ;46
000032  8882              LDRH     r2,[r0,#4]            ;46
000034  1c49              ADDS     r1,r1,#1              ;46
000036  fbb1f3f2          UDIV     r3,r1,r2              ;46
00003a  fb021113          MLS      r1,r2,r3,r1           ;46
00003e  6081              STR      r1,[r0,#8]            ;46
000040  2000              MOVS     r0,#0                 ;48
000042  bd30              POP      {r4,r5,pc}
;;;50     
                          ENDP

