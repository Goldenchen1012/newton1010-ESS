L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_i2c.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_i2c.c
N  * @author  MCD Application Team
N  * @brief   I2C LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_i2c.h"
S#include "stm32l4xx_ll_bus.h"
S#ifdef  USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined (I2C1) || defined (I2C2) || defined (I2C3) || defined (I2C4)
S
S/** @defgroup I2C_LL I2C
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/** @addtogroup I2C_LL_Private_Macros
S  * @{
S  */
S
S#define IS_LL_I2C_PERIPHERAL_MODE(__VALUE__)    (((__VALUE__) == LL_I2C_MODE_I2C)          || \
S                                                 ((__VALUE__) == LL_I2C_MODE_SMBUS_HOST)   || \
S                                                 ((__VALUE__) == LL_I2C_MODE_SMBUS_DEVICE) || \
S                                                 ((__VALUE__) == LL_I2C_MODE_SMBUS_DEVICE_ARP))
X#define IS_LL_I2C_PERIPHERAL_MODE(__VALUE__)    (((__VALUE__) == LL_I2C_MODE_I2C)          ||                                                  ((__VALUE__) == LL_I2C_MODE_SMBUS_HOST)   ||                                                  ((__VALUE__) == LL_I2C_MODE_SMBUS_DEVICE) ||                                                  ((__VALUE__) == LL_I2C_MODE_SMBUS_DEVICE_ARP))
S
S#define IS_LL_I2C_ANALOG_FILTER(__VALUE__)      (((__VALUE__) == LL_I2C_ANALOGFILTER_ENABLE) || \
S                                                 ((__VALUE__) == LL_I2C_ANALOGFILTER_DISABLE))
X#define IS_LL_I2C_ANALOG_FILTER(__VALUE__)      (((__VALUE__) == LL_I2C_ANALOGFILTER_ENABLE) ||                                                  ((__VALUE__) == LL_I2C_ANALOGFILTER_DISABLE))
S
S#define IS_LL_I2C_DIGITAL_FILTER(__VALUE__)     ((__VALUE__) <= 0x0000000FU)
S
S#define IS_LL_I2C_OWN_ADDRESS1(__VALUE__)       ((__VALUE__) <= 0x000003FFU)
S
S#define IS_LL_I2C_TYPE_ACKNOWLEDGE(__VALUE__)   (((__VALUE__) == LL_I2C_ACK) || \
S                                                 ((__VALUE__) == LL_I2C_NACK))
X#define IS_LL_I2C_TYPE_ACKNOWLEDGE(__VALUE__)   (((__VALUE__) == LL_I2C_ACK) ||                                                  ((__VALUE__) == LL_I2C_NACK))
S
S#define IS_LL_I2C_OWN_ADDRSIZE(__VALUE__)       (((__VALUE__) == LL_I2C_OWNADDRESS1_7BIT) || \
S                                                 ((__VALUE__) == LL_I2C_OWNADDRESS1_10BIT))
X#define IS_LL_I2C_OWN_ADDRSIZE(__VALUE__)       (((__VALUE__) == LL_I2C_OWNADDRESS1_7BIT) ||                                                  ((__VALUE__) == LL_I2C_OWNADDRESS1_10BIT))
S/**
S  * @}
S  */
S
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup I2C_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup I2C_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize the I2C registers to their default reset values.
S  * @param  I2Cx I2C Instance.
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: I2C registers are de-initialized
S  *          - ERROR: I2C registers are not de-initialized
S  */
SErrorStatus LL_I2C_DeInit(I2C_TypeDef *I2Cx)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check the I2C Instance I2Cx */
S  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
S
S  if (I2Cx == I2C1)
S  {
S    /* Force reset of I2C clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
S
S    /* Release reset of I2C clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
S  }
S#if defined(I2C2)
S  else if (I2Cx == I2C2)
S  {
S    /* Force reset of I2C clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
S
S    /* Release reset of I2C clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
S
S  }
S#endif
S  else if (I2Cx == I2C3)
S  {
S    /* Force reset of I2C clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
S
S    /* Release reset of I2C clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
S  }
S#if defined(I2C4)
S  else if (I2Cx == I2C4)
S  {
S    /* Force reset of I2C clock */
S    LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_I2C4);
S
S    /* Release reset of I2C clock */
S    LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_I2C4);
S  }
S#endif
S  else
S  {
S    status = ERROR;
S  }
S
S  return status;
S}
S
S/**
S  * @brief  Initialize the I2C registers according to the specified parameters in I2C_InitStruct.
S  * @param  I2Cx I2C Instance.
S  * @param  I2C_InitStruct pointer to a @ref LL_I2C_InitTypeDef structure.
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: I2C registers are initialized
S  *          - ERROR: Not applicable
S  */
SErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
S{
S  /* Check the I2C Instance I2Cx */
S  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));
S
S  /* Check the I2C parameters from I2C_InitStruct */
S  assert_param(IS_LL_I2C_PERIPHERAL_MODE(I2C_InitStruct->PeripheralMode));
S  assert_param(IS_LL_I2C_ANALOG_FILTER(I2C_InitStruct->AnalogFilter));
S  assert_param(IS_LL_I2C_DIGITAL_FILTER(I2C_InitStruct->DigitalFilter));
S  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
S  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
S  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));
S
S  /* Disable the selected I2Cx Peripheral */
S  LL_I2C_Disable(I2Cx);
S
S  /*---------------------------- I2Cx CR1 Configuration ------------------------
S   * Configure the analog and digital noise filters with parameters :
S   * - AnalogFilter: I2C_CR1_ANFOFF bit
S   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
S   */
S  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
S
S  /*---------------------------- I2Cx TIMINGR Configuration --------------------
S   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
S   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
S   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
S   */
S  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
S
S  /* Enable the selected I2Cx Peripheral */
S  LL_I2C_Enable(I2Cx);
S
S  /*---------------------------- I2Cx OAR1 Configuration -----------------------
S   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
S   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
S   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
S   */
S  LL_I2C_DisableOwnAddress1(I2Cx);
S  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
S
S  /* OwnAdress1 == 0 is reserved for General Call address */
S  if (I2C_InitStruct->OwnAddress1 != 0U)
S  {
S    LL_I2C_EnableOwnAddress1(I2Cx);
S  }
S
S  /*---------------------------- I2Cx MODE Configuration -----------------------
S  * Configure I2Cx peripheral mode with parameter :
S   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
S   */
S  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
S
S  /*---------------------------- I2Cx CR2 Configuration ------------------------
S   * Configure the ACKnowledge or Non ACKnowledge condition
S   * after the address receive match code or next received byte with parameter :
S   * - TypeAcknowledge: I2C_CR2_NACK bit
S   */
S  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
S
S  return SUCCESS;
S}
S
S/**
S  * @brief  Set each @ref LL_I2C_InitTypeDef field to default value.
S  * @param  I2C_InitStruct Pointer to a @ref LL_I2C_InitTypeDef structure.
S  * @retval None
S  */
Svoid LL_I2C_StructInit(LL_I2C_InitTypeDef *I2C_InitStruct)
S{
S  /* Set I2C_InitStruct fields to default values */
S  I2C_InitStruct->PeripheralMode  = LL_I2C_MODE_I2C;
S  I2C_InitStruct->Timing          = 0U;
S  I2C_InitStruct->AnalogFilter    = LL_I2C_ANALOGFILTER_ENABLE;
S  I2C_InitStruct->DigitalFilter   = 0U;
S  I2C_InitStruct->OwnAddress1     = 0U;
S  I2C_InitStruct->TypeAcknowledge = LL_I2C_NACK;
S  I2C_InitStruct->OwnAddrSize     = LL_I2C_OWNADDRESS1_7BIT;
S}
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* I2C1 || I2C2 || I2C3 || I2C4 */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
