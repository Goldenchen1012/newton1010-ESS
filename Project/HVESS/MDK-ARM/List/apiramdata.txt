; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\apiramdata.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\apiramdata.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\API\ApiRamData.c]
                          THUMB

                          AREA ||i.ApiRamLoadAccPower||, CODE, READONLY, ALIGN=1

                  ApiRamLoadAccPower PROC
;;;137    }
;;;138    void ApiRamLoadAccPower(void)
000000  4770              BX       lr
;;;139    {
;;;140    #if	0	
;;;141    	char	str[100];
;;;142    	WORD	checksum,value;	
;;;143    	BYTE	area,i,addrindex;
;;;144    
;;;145    	checksum=BKP_ReadBackupRegister(ACC2_DHG_POWER_CHK);
;;;146    	addrindex=0;
;;;147    	for(area=0;area<2;area++)
;;;148    	{
;;;149    		BatteryCapInfo[area].AccChgPower.i[0]=0;
;;;150    		for(i=1;i<4;i++)
;;;151    		{
;;;152    			value=BKP_ReadBackupRegister(Ram_AccAddrTable[addrindex][i]);
;;;153    			BatteryCapInfo[area].AccChgPower.i[i]=value;
;;;154    			checksum^=value;
;;;155    		}
;;;156    		addrindex++;
;;;157    		//-------------------------------------
;;;158    		BatteryCapInfo[area].AccDhgPower.i[0]=0;
;;;159    		for(i=1;i<4;i++)
;;;160    		{
;;;161    			value=BKP_ReadBackupRegister(Ram_AccAddrTable[addrindex][i]);
;;;162    			BatteryCapInfo[area].AccDhgPower.i[i]=value;
;;;163    			checksum^=value;
;;;164    		}
;;;165    		addrindex++;
;;;166    	}
;;;167    	if(checksum!=_RAM_ACC_POWER_CHECKSUM)
;;;168    	{
;;;169    		for(area=0;area<SystemParameter.BmuNumber;area++)
;;;170    		{
;;;171    			BatteryCapInfo[area].AccChgPower.ll=0;
;;;172    			BatteryCapInfo[area].AccDhgPower.ll=0;
;;;173    		}
;;;174    		SendMessageToCan("Load Acc Ram Error!!");	
;;;175    	}
;;;176    #if	1	
;;;177    	else
;;;178    	{
;;;179    		for(area=0;area<2;area++)
;;;180    		{	
;;;181    			sprintf(str,"Load AccChg=%d-%.8lX %.8lX",area,
;;;182    				BatteryCapInfo[area].AccChgPower.l[1],
;;;183    				BatteryCapInfo[area].AccChgPower.l[0]);
;;;184    			SendMessageToCan((BYTE *)str);
;;;185    
;;;186    			sprintf(str,"Load AccDhg=%d-%.8lX %.8lX",area,
;;;187    				BatteryCapInfo[area].AccDhgPower.l[1],
;;;188    				BatteryCapInfo[area].AccDhgPower.l[0]);
;;;189    			SendMessageToCan((BYTE *)str);
;;;190    
;;;191    		}
;;;192    	}
;;;193    #endif	
;;;194    #endif
;;;195    }
;;;196    
                          ENDP


                          AREA ||i.ApiRamSaveAccPower||, CODE, READONLY, ALIGN=1

                  ApiRamSaveAccPower PROC
;;;108    #endif
;;;109    void ApiRamSaveAccPower(void)
000000  4770              BX       lr
;;;110    {
;;;111    #if	0	
;;;112    	WORD	checksum,value;	
;;;113    	BYTE	area,i,addrindex;
;;;114    
;;;115    	checksum=_RAM_ACC_POWER_CHECKSUM;
;;;116    	addrindex=0;
;;;117    	for(area=0;area<2;area++)
;;;118    	{
;;;119    		for(i=1;i<4;i++)
;;;120    		{
;;;121    			value=BatteryCapInfo[area].AccChgPower.i[i];
;;;122    			checksum^=value;
;;;123    			BKP_WriteBackupRegister(Ram_AccAddrTable[addrindex][i],value);
;;;124    		}
;;;125    		addrindex++;
;;;126    
;;;127    		for(i=1;i<4;i++)
;;;128    		{
;;;129    			value=BatteryCapInfo[area].AccDhgPower.i[i];
;;;130    			checksum^=value;
;;;131    			BKP_WriteBackupRegister(Ram_AccAddrTable[addrindex][i],value);
;;;132    		}
;;;133    		addrindex++;
;;;134    	}	
;;;135    	BKP_WriteBackupRegister(ACC2_DHG_POWER_CHK,checksum);
;;;136    #endif	
;;;137    }
;;;138    void ApiRamLoadAccPower(void)
                          ENDP


                          AREA ||i.apiRamLoadPowerOffDateTime||, CODE, READONLY, ALIGN=2

                  apiRamLoadPowerOffDateTime PROC
;;;205    }
;;;206    uint32_t apiRamLoadPowerOffDateTime(void)
000000  b510              PUSH     {r4,lr}
;;;207    {
;;;208    	uint32_t	sec,checksum;
;;;209    	
;;;210    	sec = HAL_RTCEx_BKUPRead(&RtcHandle, LAST_RTC_TIME_RAM_ADDR);
000002  2104              MOVS     r1,#4
000004  4808              LDR      r0,|L3.40|
000006  f7fffffe          BL       HAL_RTCEx_BKUPRead
00000a  4604              MOV      r4,r0
;;;211    	checksum = HAL_RTCEx_BKUPRead(&RtcHandle, LAST_RTC_TIME_CHECKSUM_RAM_ADDR);
00000c  2105              MOVS     r1,#5
00000e  4806              LDR      r0,|L3.40|
000010  f7fffffe          BL       HAL_RTCEx_BKUPRead
;;;212    	checksum ^= sec; 
000014  4060              EORS     r0,r0,r4
;;;213    	if(checksum == LAST_RTC_TIME_CHECKSUM)
000016  4905              LDR      r1,|L3.44|
000018  4288              CMP      r0,r1
00001a  d101              BNE      |L3.32|
;;;214    		return sec;
00001c  4620              MOV      r0,r4
;;;215    	return 0xffffffffL;
;;;216    }
00001e  bd10              POP      {r4,pc}
                  |L3.32|
000020  f04f30ff          MOV      r0,#0xffffffff        ;215
000024  bd10              POP      {r4,pc}
;;;217    #define	LAST_CHG_DHG_CHECKSUM	0xAA551384L
                          ENDP

000026  0000              DCW      0x0000
                  |L3.40|
                          DCD      ||.bss||
                  |L3.44|
                          DCD      0x551384aa

                          AREA ||i.apiRamLoadReleaseTime||, CODE, READONLY, ALIGN=2

                  apiRamLoadReleaseTime PROC
;;;226    
;;;227    uint32_t apiRamLoadReleaseTime(void)
000000  b510              PUSH     {r4,lr}
;;;228    {
;;;229    	uint32_t	sec,checksum,rtc;
;;;230    	
;;;231    	sec = HAL_RTCEx_BKUPRead(&RtcHandle, LAST_CHG_DHG_TIME_RAM_ADDR);
000002  2102              MOVS     r1,#2
000004  4809              LDR      r0,|L4.44|
000006  f7fffffe          BL       HAL_RTCEx_BKUPRead
00000a  4604              MOV      r4,r0
;;;232    	checksum = HAL_RTCEx_BKUPRead(&RtcHandle, LAST_CHG_DHG_TIME_CHECKSUM_RAM_ADDR);
00000c  2103              MOVS     r1,#3
00000e  4807              LDR      r0,|L4.44|
000010  f7fffffe          BL       HAL_RTCEx_BKUPRead
;;;233    
;;;234    	checksum ^= sec;
000014  4060              EORS     r0,r0,r4
;;;235    
;;;236    	if(checksum == LAST_CHG_DHG_CHECKSUM)
000016  4906              LDR      r1,|L4.48|
000018  4288              CMP      r0,r1
00001a  d105              BNE      |L4.40|
;;;237    	{
;;;238    		rtc = HalRtcGetSmpUnixTime();
00001c  f7fffffe          BL       HalRtcGetSmpUnixTime
;;;239    		if(rtc >= sec)
000020  42a0              CMP      r0,r4
000022  d301              BCC      |L4.40|
;;;240    		{
;;;241    			rtc -= sec;
000024  1b00              SUBS     r0,r0,r4
;;;242    			return rtc;
;;;243    		}
;;;244    	}
;;;245    	return 0;
;;;246    }
000026  bd10              POP      {r4,pc}
                  |L4.40|
000028  2000              MOVS     r0,#0                 ;245
00002a  bd10              POP      {r4,pc}
;;;247    
                          ENDP

                  |L4.44|
                          DCD      ||.bss||
                  |L4.48|
                          DCD      0xaa551384

                          AREA ||i.apiRamLoadRtcMagicCode||, CODE, READONLY, ALIGN=2

                  apiRamLoadRtcMagicCode PROC
;;;50     }
;;;51     uint16_t apiRamLoadRtcMagicCode(void)
000000  b510              PUSH     {r4,lr}
;;;52     {
;;;53     	return HAL_RTCEx_BKUPRead(&RtcHandle, RTC_MAGIC_CODE_RAM_ADDR);
000002  2100              MOVS     r1,#0
000004  4802              LDR      r0,|L5.16|
000006  f7fffffe          BL       HAL_RTCEx_BKUPRead
00000a  b280              UXTH     r0,r0
;;;54     }
00000c  bd10              POP      {r4,pc}
;;;55     
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      ||.bss||

                          AREA ||i.apiRamLoadSoc||, CODE, READONLY, ALIGN=2

                  apiRamLoadSoc PROC
;;;65     
;;;66     uint16_t apiRamLoadSoc(void)
000000  b508              PUSH     {r3,lr}
;;;67     {	
;;;68     	tLbyte	RamData;
;;;69     	uint16_t	checksum;
;;;70     	
;;;71     	RamData.l = HAL_RTCEx_BKUPRead(&RtcHandle, SYSTEM_SOC_RAM_ADDR);
000002  2101              MOVS     r1,#1
000004  4809              LDR      r0,|L6.44|
000006  f7fffffe          BL       HAL_RTCEx_BKUPRead
00000a  9000              STR      r0,[sp,#0]
;;;72     	checksum = RamData.i[1];
00000c  f8bd1002          LDRH     r1,[sp,#2]
;;;73     	checksum ^= RamData.i[0];
000010  f8bd0000          LDRH     r0,[sp,#0]
000014  4041              EORS     r1,r1,r0
;;;74     	if(checksum == SOC_CHECKSUM && RamData.i[0] <= 10000)
000016  f5a1422a          SUB      r2,r1,#0xaa00
00001a  3a55              SUBS     r2,r2,#0x55
00001c  d103              BNE      |L6.38|
00001e  f2427110          MOV      r1,#0x2710
000022  4288              CMP      r0,r1
000024  d901              BLS      |L6.42|
                  |L6.38|
;;;75     		return RamData.i[0];
;;;76     	return 0xffff;
000026  f64f70ff          MOV      r0,#0xffff
                  |L6.42|
;;;77     }
00002a  bd08              POP      {r3,pc}
;;;78     //---------------------------------
                          ENDP

                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.apiRamLoadTotalDisChargeCount||, CODE, READONLY, ALIGN=2

                  apiRamLoadTotalDisChargeCount PROC
;;;86     }
;;;87     uint32_t apiRamLoadTotalDisChargeCount(void)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89     	uint32_t	count, checksum;
;;;90     	
;;;91     	count = HAL_RTCEx_BKUPRead(&RtcHandle, TOTAL_DISCHARGE_COUNT_RAM_ADDR);
000002  2106              MOVS     r1,#6
000004  4808              LDR      r0,|L7.40|
000006  f7fffffe          BL       HAL_RTCEx_BKUPRead
00000a  4604              MOV      r4,r0
;;;92     	checksum = HAL_RTCEx_BKUPRead(&RtcHandle, TOTAL_DISCHARGE_CHECKSUM_RAM_ADDR);
00000c  2107              MOVS     r1,#7
00000e  4806              LDR      r0,|L7.40|
000010  f7fffffe          BL       HAL_RTCEx_BKUPRead
;;;93     
;;;94     	checksum ^= count; 
000014  4060              EORS     r0,r0,r4
;;;95     	if(checksum == TOTAL_DHG_COUNT_CHECKSUM)
000016  f5a04113          SUB      r1,r0,#0x9300
00001a  397a              SUBS     r1,r1,#0x7a
00001c  d001              BEQ      |L7.34|
;;;96     		return count;
;;;97     	return 0;
00001e  2000              MOVS     r0,#0
;;;98     }
000020  bd10              POP      {r4,pc}
                  |L7.34|
000022  4620              MOV      r0,r4                 ;96
000024  bd10              POP      {r4,pc}
;;;99     //---------------------------------
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
                          DCD      ||.bss||

                          AREA ||i.apiRamOpen||, CODE, READONLY, ALIGN=2

                  apiRamOpen PROC
;;;247    
;;;248    void apiRamOpen(void)
000000  4902              LDR      r1,|L8.12|
;;;249    {
;;;250      	RtcHandle.Instance  = RTC;
000002  4801              LDR      r0,|L8.8|
000004  6008              STR      r0,[r1,#0]  ; RtcHandle
;;;251    }
000006  4770              BX       lr
;;;252    
                          ENDP

                  |L8.8|
                          DCD      0x40002800
                  |L8.12|
                          DCD      ||.bss||

                          AREA ||i.apiRamSaveLastChgDhgTime||, CODE, READONLY, ALIGN=2

                  apiRamSaveLastChgDhgTime PROC
;;;217    #define	LAST_CHG_DHG_CHECKSUM	0xAA551384L
;;;218    void apiRamSaveLastChgDhgTime(void)
000000  b510              PUSH     {r4,lr}
;;;219    {
;;;220    	uint32_t	sec,checksum;
;;;221    	sec = HalRtcGetSmpUnixTime();
000002  f7fffffe          BL       HalRtcGetSmpUnixTime
000006  4602              MOV      r2,r0
;;;222    	checksum = sec ^ LAST_CHG_DHG_CHECKSUM;
000008  4806              LDR      r0,|L9.36|
00000a  ea820400          EOR      r4,r2,r0
;;;223    	HAL_RTCEx_BKUPWrite(&RtcHandle, LAST_CHG_DHG_TIME_RAM_ADDR, sec);
00000e  2102              MOVS     r1,#2
000010  4805              LDR      r0,|L9.40|
000012  f7fffffe          BL       HAL_RTCEx_BKUPWrite
;;;224    	HAL_RTCEx_BKUPWrite(&RtcHandle, LAST_CHG_DHG_TIME_CHECKSUM_RAM_ADDR, checksum);
000016  4622              MOV      r2,r4
000018  e8bd4010          POP      {r4,lr}
00001c  2103              MOVS     r1,#3
00001e  4802              LDR      r0,|L9.40|
000020  f7ffbffe          B.W      HAL_RTCEx_BKUPWrite
;;;225    }	
;;;226    
                          ENDP

                  |L9.36|
                          DCD      0xaa551384
                  |L9.40|
                          DCD      ||.bss||

                          AREA ||i.apiRamSaveRtcDateTime||, CODE, READONLY, ALIGN=2

                  apiRamSaveRtcDateTime PROC
;;;197    #define	LAST_RTC_TIME_CHECKSUM	0x551384AAL
;;;198    void apiRamSaveRtcDateTime(void)
000000  b510              PUSH     {r4,lr}
;;;199    {
;;;200    	uint32_t	sec,checksum;
;;;201    	sec = HalRtcGetSmpUnixTime();
000002  f7fffffe          BL       HalRtcGetSmpUnixTime
000006  4602              MOV      r2,r0
;;;202    	checksum = sec ^ LAST_RTC_TIME_CHECKSUM;
000008  4806              LDR      r0,|L10.36|
00000a  ea820400          EOR      r4,r2,r0
;;;203    	HAL_RTCEx_BKUPWrite(&RtcHandle, LAST_RTC_TIME_RAM_ADDR, sec);
00000e  2104              MOVS     r1,#4
000010  4805              LDR      r0,|L10.40|
000012  f7fffffe          BL       HAL_RTCEx_BKUPWrite
;;;204    	HAL_RTCEx_BKUPWrite(&RtcHandle, LAST_RTC_TIME_CHECKSUM_RAM_ADDR, checksum);
000016  4622              MOV      r2,r4
000018  e8bd4010          POP      {r4,lr}
00001c  2105              MOVS     r1,#5
00001e  4802              LDR      r0,|L10.40|
000020  f7ffbffe          B.W      HAL_RTCEx_BKUPWrite
;;;205    }
;;;206    uint32_t apiRamLoadPowerOffDateTime(void)
                          ENDP

                  |L10.36|
                          DCD      0x551384aa
                  |L10.40|
                          DCD      ||.bss||

                          AREA ||i.apiRamSaveRtcMagicCode||, CODE, READONLY, ALIGN=2

                  apiRamSaveRtcMagicCode PROC
;;;46     /* Public function prototypes -----------------------------------------------*/
;;;47     void apiRamSaveRtcMagicCode(uint16_t MagicCode)
000000  4602              MOV      r2,r0
;;;48     {
;;;49     	HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_MAGIC_CODE_RAM_ADDR, MagicCode);
000002  2100              MOVS     r1,#0
000004  4801              LDR      r0,|L11.12|
000006  f7ffbffe          B.W      HAL_RTCEx_BKUPWrite
;;;50     }
;;;51     uint16_t apiRamLoadRtcMagicCode(void)
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      ||.bss||

                          AREA ||i.apiRamSaveSoc||, CODE, READONLY, ALIGN=2

                  apiRamSaveSoc PROC
;;;56     #define	SOC_CHECKSUM	0xAA55
;;;57     void apiRamSaveSoc(uint16_t soc)
000000  b082              SUB      sp,sp,#8
;;;58     {
;;;59     	tLbyte	RamData;
;;;60     	
;;;61     	RamData.i[0] = soc;
000002  f8ad0004          STRH     r0,[sp,#4]
;;;62     	RamData.i[1] = RamData.i[0] ^ SOC_CHECKSUM;
000006  f64a2155          MOV      r1,#0xaa55
00000a  4048              EORS     r0,r0,r1
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;63     	HAL_RTCEx_BKUPWrite(&RtcHandle, SYSTEM_SOC_RAM_ADDR, RamData.l);
000010  9a01              LDR      r2,[sp,#4]
000012  2101              MOVS     r1,#1
000014  4801              LDR      r0,|L12.28|
000016  b002              ADD      sp,sp,#8
000018  f7ffbffe          B.W      HAL_RTCEx_BKUPWrite
;;;64     }
;;;65     
                          ENDP

                  |L12.28|
                          DCD      ||.bss||

                          AREA ||i.apiRamSaveTotalDisChargeCount||, CODE, READONLY, ALIGN=2

                  apiRamSaveTotalDisChargeCount PROC
;;;79     #define	TOTAL_DHG_COUNT_CHECKSUM	0x937A
;;;80     void apiRamSaveTotalDisChargeCount(uint32_t count)
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82     	uint32_t	checksum;
;;;83     	checksum = count ^ TOTAL_DHG_COUNT_CHECKSUM;
000002  f249317a          MOV      r1,#0x937a
000006  ea800401          EOR      r4,r0,r1
;;;84     	HAL_RTCEx_BKUPWrite(&RtcHandle, TOTAL_DISCHARGE_COUNT_RAM_ADDR, count);
00000a  4602              MOV      r2,r0
00000c  2106              MOVS     r1,#6
00000e  4805              LDR      r0,|L13.36|
000010  f7fffffe          BL       HAL_RTCEx_BKUPWrite
;;;85     	HAL_RTCEx_BKUPWrite(&RtcHandle, TOTAL_DISCHARGE_CHECKSUM_RAM_ADDR, checksum);
000014  4622              MOV      r2,r4
000016  e8bd4010          POP      {r4,lr}
00001a  2107              MOVS     r1,#7
00001c  4801              LDR      r0,|L13.36|
00001e  f7ffbffe          B.W      HAL_RTCEx_BKUPWrite
;;;86     }
;;;87     uint32_t apiRamLoadTotalDisChargeCount(void)
                          ENDP

000022  0000              DCW      0x0000
                  |L13.36|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RtcHandle
                          %        36

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\API\\ApiRamData.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_ApiRamData_c_8450546f____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___12_ApiRamData_c_8450546f____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_ApiRamData_c_8450546f____REVSH|
#line 507
|__asm___12_ApiRamData_c_8450546f____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_ApiRamData_c_8450546f____RRX|
#line 694
|__asm___12_ApiRamData_c_8450546f____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
