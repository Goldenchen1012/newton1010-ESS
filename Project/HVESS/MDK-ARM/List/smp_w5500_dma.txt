; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_w5500_dma.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_w5500_dma.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\SMP\smp_w5500_DMA.c]
                          THUMB

                          AREA ||i.EXTI9_5_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI9_5_IRQHandler PROC
;;;64       */
;;;65     void EXTI9_5_IRQHandler(void)
000000  2080              MOVS     r0,#0x80
;;;66     {
;;;67     #ifdef PCB_VER_1
;;;68         HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
000002  f7ffbffe          B.W      HAL_GPIO_EXTI_IRQHandler
;;;69     #else
;;;70     	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
;;;71     #endif
;;;72     
;;;73     }
;;;74     
                          ENDP


                          AREA ||i.Hal_W5500_Open||, CODE, READONLY, ALIGN=2

                  Hal_W5500_Open PROC
;;;305    
;;;306    void Hal_W5500_Open(void){
000000  b510              PUSH     {r4,lr}
;;;307    	smp_w5500_spi_config();
000002  f7fffffe          BL       smp_w5500_spi_config
;;;308    	LibSwTimerOpen(W5500SwTimerHandler, 0);
000006  2100              MOVS     r1,#0
000008  4803              LDR      r0,|L2.24|
00000a  f7fffffe          BL       LibSwTimerOpen
;;;309    	gu8_W5500_Init_Steps = Init_HW_Reset_1;
00000e  4903              LDR      r1,|L2.28|
000010  2000              MOVS     r0,#0
000012  7088              STRB     r0,[r1,#2]
;;;310    }
000014  bd10              POP      {r4,pc}
;;;311    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      W5500SwTimerHandler
                  |L2.28|
                          DCD      ||.data||

                          AREA ||i.W5500SwTimerHandler||, CODE, READONLY, ALIGN=2

                  W5500SwTimerHandler PROC
;;;140    
;;;141    static void W5500SwTimerHandler(__far void *dest, uint16_t evt, void *vDataPtr){
000000  b570              PUSH     {r4-r6,lr}
;;;142    	static uint8_t SocketNum = 0;
;;;143    	static uint8_t EventDoneCheck = 0;
;;;144    	if(evt == LIB_SW_TIMER_EVT_SW_1MS){
000002  290a              CMP      r1,#0xa
000004  d13e              BNE      |L3.132|
;;;145    		if(gu8_W5500_Init_Steps != Init_End){
000006  4c20              LDR      r4,|L3.136|
;;;146    			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
000008  4d20              LDR      r5,|L3.140|
00000a  78a1              LDRB     r1,[r4,#2]            ;145  ; gu8_W5500_Init_Steps
00000c  2910              CMP      r1,#0x10              ;145
00000e  d00e              BEQ      |L3.46|
000010  2201              MOVS     r2,#1
000012  2110              MOVS     r1,#0x10
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       HAL_GPIO_WritePin
;;;147    			W5500_Init_Step(gu8_W5500_Init_Steps);
00001a  78a0              LDRB     r0,[r4,#2]  ; gu8_W5500_Init_Steps
00001c  f7fffffe          BL       W5500_Init_Step
;;;148    			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
000020  4628              MOV      r0,r5
000022  e8bd4070          POP      {r4-r6,lr}
000026  2200              MOVS     r2,#0
000028  2110              MOVS     r1,#0x10
00002a  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L3.46|
;;;149    		}else{
;;;150    			if(W5500INT_Low){
00002e  7ae1              LDRB     r1,[r4,#0xb]  ; W5500INT_Low
000030  2900              CMP      r1,#0
000032  d027              BEQ      |L3.132|
;;;151    				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
000034  2201              MOVS     r2,#1
000036  2110              MOVS     r1,#0x10
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       HAL_GPIO_WritePin
;;;152    				if(smpW5500Socket[SocketNum].SocketStatus == Socket_Enable){
00003e  78e1              LDRB     r1,[r4,#3]  ; SocketNum
000040  4a13              LDR      r2,|L3.144|
000042  eb0100c1          ADD      r0,r1,r1,LSL #3
;;;153    					Socket_Event_Handling_Status[SocketNum] = Event_Handle_Ing;
000046  4e10              LDR      r6,|L3.136|
000048  f8120020          LDRB     r0,[r2,r0,LSL #2]     ;152
00004c  364a              ADDS     r6,r6,#0x4a
00004e  2801              CMP      r0,#1                 ;152
000050  d105              BNE      |L3.94|
000052  5470              STRB     r0,[r6,r1]
;;;154    					W5500_Server_Step(gu8Socket_Sever_Step[SocketNum],SocketNum);
000054  f1a60010          SUB      r0,r6,#0x10
000058  5c40              LDRB     r0,[r0,r1]
00005a  f7fffffe          BL       W5500_Server_Step
                  |L3.94|
;;;155    				}
;;;156    				if(Socket_Event_Handling_Status[SocketNum] == Event_Handle_Done){
00005e  78e0              LDRB     r0,[r4,#3]  ; SocketNum
000060  5c31              LDRB     r1,[r6,r0]
000062  b909              CBNZ     r1,|L3.104|
;;;157    					SocketNum++;
000064  1c40              ADDS     r0,r0,#1
000066  70e0              STRB     r0,[r4,#3]
                  |L3.104|
;;;158    				}
;;;159    				if(SocketNum == SocketEnableCount){
000068  78e0              LDRB     r0,[r4,#3]  ; SocketNum
00006a  7821              LDRB     r1,[r4,#0]  ; SocketEnableCount
00006c  4288              CMP      r0,r1
00006e  d102              BNE      |L3.118|
;;;160    					SocketNum = 0;
000070  2000              MOVS     r0,#0
000072  70e0              STRB     r0,[r4,#3]
;;;161    					W5500INT_Low = false;
000074  72e0              STRB     r0,[r4,#0xb]
                  |L3.118|
;;;162    				}
;;;163    				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
000076  4628              MOV      r0,r5
000078  e8bd4070          POP      {r4-r6,lr}
00007c  2200              MOVS     r2,#0
00007e  2110              MOVS     r1,#0x10
000080  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L3.132|
;;;164    			}
;;;165    		}
;;;166    	}
;;;167    
;;;168    }
000084  bd70              POP      {r4-r6,pc}
;;;169    
                          ENDP

000086  0000              DCW      0x0000
                  |L3.136|
                          DCD      ||.data||
                  |L3.140|
                          DCD      0x48000c00
                  |L3.144|
                          DCD      ||.bss||+0x15c

                          AREA ||i.W5500_Init_Step||, CODE, READONLY, ALIGN=2

                  W5500_Init_Step PROC
;;;339    
;;;340    int8_t W5500_Init_Step(uint8_t Step){
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4602              MOV      r2,r0
;;;341    
;;;342    	wiz_PhyConf PHYconf, PHYconf_Verify;
;;;343    	static R_W_NetInfo InitSetNetInfo[4] = {
;;;344    		{SHAR , MAC_ADDR_BYTE_LEN, DefMac},
;;;345    		{GAR, GATE_WAY_ADDR_BYTE_LEN, DefGw},
;;;346    		{SUBR, SUB_MASK_ADDR_BYTE_LEN, DefSn},
;;;347    		{SIPR, IP_ADDR_BYTE_LEN, DefIp}
;;;348    	};
;;;349    	static R_W_NetInfo InitReadNetInfo[4] ={
;;;350    		{SHAR , MAC_ADDR_BYTE_LEN, TmpNetInfo.mac},
;;;351    		{GAR, GATE_WAY_ADDR_BYTE_LEN, TmpNetInfo.gw},
;;;352    		{SUBR, SUB_MASK_ADDR_BYTE_LEN, TmpNetInfo.sn},
;;;353    		{SIPR, IP_ADDR_BYTE_LEN, TmpNetInfo.ip}
;;;354    	}; 
;;;355    	uint8_t Tmp;
;;;356    	static uint8_t SocketNum = 0;
;;;357    	static uint8_t ms_Count = 0;
;;;358    	static uint8_t Step_RW_NetInfo = 0;
;;;359    	static int8_t smpResult = SMP_SUCCESS;
;;;360    	bool CommEndFlag;
;;;361    	
;;;362    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){	
000006  4c7b              LDR      r4,|L4.500|
000008  7861              LDRB     r1,[r4,#1]  ; gu8W5500_SPI_Status
00000a  2900              CMP      r1,#0
                  |L4.12|
00000c  d12c              BNE      |L4.104|
;;;363    		switch(Step){
;;;364    			case Init_HW_Reset_1:
;;;365    				HAL_GPIO_WritePin(W5500_RST_PORT, W5500_RST_PIN, GPIO_PIN_RESET);
;;;366    				ms_Count = 0;
;;;367    				gu8_W5500_Init_Steps = Init_HW_Reset_2;
;;;368    			case Init_HW_Reset_2:
;;;369    				ms_Count++;
;;;370    				if(ms_Count == HW_RESET_DELAY_TIME_MS){
;;;371    					ms_Count = 0;
;;;372    					HAL_GPIO_WritePin(W5500_RST_PORT, W5500_RST_PIN, GPIO_PIN_SET);
;;;373    					gu8_W5500_Init_Steps = Init_SW_Reset;
;;;374    				}
;;;375    				break;
;;;376    			case Init_SW_Reset:
;;;377    				smp_w5500_spiDMA_write_byte(MR, MR_RST);
;;;378    				gu8_W5500_Init_Steps = Init_PHY_Conf;
;;;379    				break;
;;;380    			case Init_PHY_Conf:
;;;381    				PHYconf.by = PHY_CONFBY_SW;
;;;382    				PHYconf.mode = PHY_MODE_MANUAL;
;;;383    				PHYconf.speed = PHY_SPEED_100;
;;;384    				PHYconf.duplex = PHY_DUPLEX_FULL;
;;;385    				smp_w5500_spiDMA_write_byte(PHYCFGR, w5500_phyconf_transfer_to_uint8(PHYconf));
;;;386    				gu8_W5500_Init_Steps = Init_PHY_Read;			
;;;387    				break;
;;;388    			case Init_PHY_Read:				
;;;389    				smp_w5500_spiDMA_read_byte(PHYCFGR);
;;;390    				gu8_W5500_Init_Steps = Init_PHY_Rst;				
;;;391    				break;
;;;392    			case Init_PHY_Rst:				
;;;393    				Tmp = Readbyte_value;
;;;394    				Tmp |= ~PHYCFGR_RST;
;;;395    				smp_w5500_spiDMA_write_byte(PHYCFGR, Tmp);
;;;396    				gu8_W5500_Init_Steps = Init_PHY_Verify_Read;				
;;;397    				break;
;;;398    			case Init_PHY_Verify_Read:				
;;;399    				smp_w5500_spiDMA_read_byte(PHYCFGR);
;;;400    				gu8_W5500_Init_Steps = Init_PHY_Verify;				
;;;401    				break;
;;;402    			case Init_PHY_Verify:
;;;403    				PHYconf_Verify = w5500_uint8_transfer_to_phyconf(Readbyte_value);
;;;404    				if((PHYconf_Verify.by != PHYconf.by)||(PHYconf_Verify.mode != PHYconf.mode)||(PHYconf_Verify.speed != PHYconf.speed)||(PHYconf_Verify.duplex != PHYconf.duplex)){
;;;405    					smpResult = SMP_ERROR_NOT_FOUND;
00000e  1e4f              SUBS     r7,r1,#1
000010  4621              MOV      r1,r4                 ;362
000012  2601              MOVS     r6,#1                 ;340
000014  7a88              LDRB     r0,[r1,#0xa]          ;393
;;;406    				}
;;;407    				gu8_W5500_Init_Steps = Init_SET_NetInfo;				
;;;408    				break;
;;;409    			case Init_SET_NetInfo:				
;;;410    				smp_w5500_spiDMA_WriteMulti(InitSetNetInfo[Step_RW_NetInfo].AddrSel,InitSetNetInfo[Step_RW_NetInfo].pData,InitSetNetInfo[Step_RW_NetInfo].Len);
000016  7989              LDRB     r1,[r1,#6]
000018  2500              MOVS     r5,#0                 ;393
00001a  f8df81dc          LDR      r8,|L4.504|
00001e  f44f5938          MOV      r9,#0x2e00            ;385
000022  eb010341          ADD      r3,r1,r1,LSL #1
000026  2a10              CMP      r2,#0x10              ;363
000028  d21e              BCS      |L4.104|
00002a  e8dff002          TBB      [pc,r2]               ;363
00002e  080f              DCB      0x08,0x0f
000030  1e25373d          DCB      0x1e,0x25,0x37,0x3d
000034  454b6a7e          DCB      0x45,0x4b,0x6a,0x7e
000038  92dedebc          DCB      0x92,0xde,0xde,0xbc
00003c  c4cc              DCB      0xc4,0xcc
00003e  2200              MOVS     r2,#0                 ;365
000040  2102              MOVS     r1,#2                 ;365
000042  4640              MOV      r0,r8                 ;365
000044  f7fffffe          BL       HAL_GPIO_WritePin
000048  7165              STRB     r5,[r4,#5]            ;366
00004a  70a6              STRB     r6,[r4,#2]            ;367
00004c  7960              LDRB     r0,[r4,#5]            ;369  ; ms_Count
00004e  1c40              ADDS     r0,r0,#1              ;369
000050  b2c0              UXTB     r0,r0                 ;369
000052  7160              STRB     r0,[r4,#5]            ;369
000054  2832              CMP      r0,#0x32              ;370
000056  d1d9              BNE      |L4.12|
000058  7165              STRB     r5,[r4,#5]            ;371
00005a  2201              MOVS     r2,#1                 ;372
00005c  2102              MOVS     r1,#2                 ;372
00005e  4640              MOV      r0,r8                 ;372
000060  f7fffffe          BL       HAL_GPIO_WritePin
000064  2002              MOVS     r0,#2                 ;373
000066  70a0              STRB     r0,[r4,#2]            ;373
                  |L4.104|
000068  e0bf              B        |L4.490|
00006a  2180              MOVS     r1,#0x80              ;377
00006c  2000              MOVS     r0,#0                 ;377
00006e  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000072  2003              MOVS     r0,#3                 ;378
000074  70a0              STRB     r0,[r4,#2]            ;378
000076  e0b8              B        |L4.490|
000078  f88d6004          STRB     r6,[sp,#4]            ;381
00007c  f88d5005          STRB     r5,[sp,#5]            ;382
000080  f88d6006          STRB     r6,[sp,#6]            ;383
000084  f88d6007          STRB     r6,[sp,#7]            ;384
000088  9801              LDR      r0,[sp,#4]            ;385
00008a  f7fffffe          BL       w5500_phyconf_transfer_to_uint8
00008e  4601              MOV      r1,r0                 ;385
000090  4648              MOV      r0,r9                 ;385
000092  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000096  2004              MOVS     r0,#4                 ;386
000098  70a0              STRB     r0,[r4,#2]            ;386
00009a  e0a6              B        |L4.490|
00009c  4648              MOV      r0,r9                 ;389
00009e  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0000a2  2005              MOVS     r0,#5                 ;390
0000a4  70a0              STRB     r0,[r4,#2]            ;390
0000a6  e0a0              B        |L4.490|
0000a8  f0400180          ORR      r1,r0,#0x80           ;394
0000ac  4648              MOV      r0,r9                 ;395
0000ae  f7fffffe          BL       smp_w5500_spiDMA_write_byte
0000b2  2006              MOVS     r0,#6                 ;396
0000b4  70a0              STRB     r0,[r4,#2]            ;396
0000b6  e098              B        |L4.490|
0000b8  4648              MOV      r0,r9                 ;399
0000ba  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0000be  2007              MOVS     r0,#7                 ;400
0000c0  70a0              STRB     r0,[r4,#2]            ;400
0000c2  e092              B        |L4.490|
0000c4  f7fffffe          BL       w5500_uint8_transfer_to_phyconf
0000c8  9000              STR      r0,[sp,#0]            ;403
0000ca  f89d0000          LDRB     r0,[sp,#0]            ;404
0000ce  f89d1004          LDRB     r1,[sp,#4]            ;404
0000d2  4288              CMP      r0,r1                 ;404
0000d4  d111              BNE      |L4.250|
0000d6  f89d0001          LDRB     r0,[sp,#1]            ;404
0000da  f89d1005          LDRB     r1,[sp,#5]            ;404
0000de  4288              CMP      r0,r1                 ;404
0000e0  d10b              BNE      |L4.250|
0000e2  f89d0002          LDRB     r0,[sp,#2]            ;404
0000e6  f89d1006          LDRB     r1,[sp,#6]            ;404
0000ea  4288              CMP      r0,r1                 ;404
0000ec  d105              BNE      |L4.250|
0000ee  f89d0003          LDRB     r0,[sp,#3]            ;404
0000f2  f89d1007          LDRB     r1,[sp,#7]            ;404
0000f6  4288              CMP      r0,r1                 ;404
0000f8  d000              BEQ      |L4.252|
                  |L4.250|
0000fa  71e7              STRB     r7,[r4,#7]            ;405
                  |L4.252|
0000fc  2008              MOVS     r0,#8                 ;407
0000fe  70a0              STRB     r0,[r4,#2]            ;407
000100  e073              B        |L4.490|
000102  4e3c              LDR      r6,|L4.500|
000104  365c              ADDS     r6,r6,#0x5c
000106  eb060083          ADD      r0,r6,r3,LSL #2
00010a  8882              LDRH     r2,[r0,#4]
00010c  6881              LDR      r1,[r0,#8]
00010e  f8560023          LDR      r0,[r6,r3,LSL #2]
000112  f7fffffe          BL       smp_w5500_spiDMA_WriteMulti
;;;411    				Step_RW_NetInfo++;
000116  79a0              LDRB     r0,[r4,#6]  ; Step_RW_NetInfo
000118  1c40              ADDS     r0,r0,#1
00011a  b2c0              UXTB     r0,r0
00011c  71a0              STRB     r0,[r4,#6]
;;;412    				if(Step_RW_NetInfo == NETINFO_RW_STEP){
00011e  2804              CMP      r0,#4
000120  d163              BNE      |L4.490|
;;;413    					Step_RW_NetInfo = 0;
000122  71a5              STRB     r5,[r4,#6]
;;;414    					gu8_W5500_Init_Steps = Init_Read_NetInfo;		
000124  2009              MOVS     r0,#9
000126  70a0              STRB     r0,[r4,#2]
000128  e05f              B        |L4.490|
;;;415    				}
;;;416    				break;
;;;417    			case Init_Read_NetInfo:				
;;;418    				smp_w5500_spiDMA_ReadMulti(InitReadNetInfo[Step_RW_NetInfo].AddrSel,InitReadNetInfo[Step_RW_NetInfo].Len, InitReadNetInfo[Step_RW_NetInfo].pData);
00012a  4e32              LDR      r6,|L4.500|
00012c  368c              ADDS     r6,r6,#0x8c
00012e  eb060083          ADD      r0,r6,r3,LSL #2
000132  8881              LDRH     r1,[r0,#4]
000134  6882              LDR      r2,[r0,#8]
000136  f8560023          LDR      r0,[r6,r3,LSL #2]
00013a  f7fffffe          BL       smp_w5500_spiDMA_ReadMulti
;;;419    				Step_RW_NetInfo++;
00013e  79a0              LDRB     r0,[r4,#6]  ; Step_RW_NetInfo
000140  1c40              ADDS     r0,r0,#1
000142  b2c0              UXTB     r0,r0
000144  71a0              STRB     r0,[r4,#6]
;;;420    				if(Step_RW_NetInfo == NETINFO_RW_STEP){
000146  2804              CMP      r0,#4
000148  d14f              BNE      |L4.490|
;;;421    					Step_RW_NetInfo = 0;
00014a  71a5              STRB     r5,[r4,#6]
;;;422    					gu8_W5500_Init_Steps = Init_Verify_NetInfo;		
00014c  200a              MOVS     r0,#0xa
00014e  70a0              STRB     r0,[r4,#2]
000150  e04b              B        |L4.490|
;;;423    				}
;;;424    				break;
;;;425    			case Init_Verify_NetInfo:
;;;426    #ifdef USE_DHCP
;;;427    				TmpNetInfo.dhcp = NETINFO_DHCP;
;;;428    #else
;;;429    				TmpNetInfo.dhcp = NETINFO_STATIC;
000152  4d2a              LDR      r5,|L4.508|
000154  75ae              STRB     r6,[r5,#0x16]
;;;430    #endif
;;;431    				memcpy(TmpNetInfo.dns ,DefDns,  IP_ADDR_BYTE_LEN);
000156  f1a5002c          SUB      r0,r5,#0x2c
00015a  f8d41022          LDR      r1,[r4,#0x22]  ; DefDns
00015e  f8c0103e          STR      r1,[r0,#0x3e]  ; TmpNetInfo
;;;432    				if( (memcmp(TmpNetInfo.mac, DefMac, MAC_ADDR_BYTE_LEN)!=0) ||
000162  4924              LDR      r1,|L4.500|
000164  2206              MOVS     r2,#6
000166  312c              ADDS     r1,r1,#0x2c
000168  302c              ADDS     r0,r0,#0x2c
00016a  f7fffffe          BL       memcmp
00016e  b9b0              CBNZ     r0,|L4.414|
;;;433    					(memcmp(TmpNetInfo.ip, DefIp, IP_ADDR_BYTE_LEN)!=0) ||
000170  4920              LDR      r1,|L4.500|
000172  2204              MOVS     r2,#4
000174  3116              ADDS     r1,r1,#0x16
000176  1da8              ADDS     r0,r5,#6
000178  f7fffffe          BL       memcmp
00017c  b978              CBNZ     r0,|L4.414|
;;;434    					(memcmp(TmpNetInfo.sn, DefSn, SUB_MASK_ADDR_BYTE_LEN)!=0) ||
00017e  491d              LDR      r1,|L4.500|
000180  2204              MOVS     r2,#4
000182  311a              ADDS     r1,r1,#0x1a
000184  f105000a          ADD      r0,r5,#0xa
000188  f7fffffe          BL       memcmp
00018c  b938              CBNZ     r0,|L4.414|
;;;435    					(memcmp(TmpNetInfo.gw, DefGw, GATE_WAY_ADDR_BYTE_LEN)!=0)){
00018e  4919              LDR      r1,|L4.500|
000190  2204              MOVS     r2,#4
000192  311e              ADDS     r1,r1,#0x1e
000194  f105000e          ADD      r0,r5,#0xe
000198  f7fffffe          BL       memcmp
00019c  b100              CBZ      r0,|L4.416|
                  |L4.414|
;;;436    					smpResult = SMP_ERROR_NOT_FOUND;
00019e  71e7              STRB     r7,[r4,#7]
                  |L4.416|
;;;437    				}
;;;438    				gu8_W5500_Init_Steps = Init_INT_MASK_Config;
0001a0  200d              MOVS     r0,#0xd
0001a2  70a0              STRB     r0,[r4,#2]
;;;439    				break;
0001a4  e021              B        |L4.490|
;;;440    			case Init_INT_MASK_Config:
;;;441    				smp_w5500_spiDMA_write_byte(_IMR_,0xFF);
0001a6  21ff              MOVS     r1,#0xff
0001a8  f44f50b0          MOV      r0,#0x1600
0001ac  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;442    				gu8_W5500_Init_Steps = Init_SocketNum_INT_MASK_Config;
0001b0  200e              MOVS     r0,#0xe
0001b2  70a0              STRB     r0,[r4,#2]
;;;443    				break;
0001b4  e019              B        |L4.490|
;;;444    			case Init_SocketNum_INT_MASK_Config:
;;;445    				smp_w5500_spiDMA_write_byte(SIMR,0xFF);
0001b6  21ff              MOVS     r1,#0xff
0001b8  f44f50c0          MOV      r0,#0x1800
0001bc  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;446    				gu8_W5500_Init_Steps = Init_SocketEvent_INT_MASK_Config;
0001c0  200f              MOVS     r0,#0xf
0001c2  70a0              STRB     r0,[r4,#2]
;;;447    				break;
0001c4  e011              B        |L4.490|
;;;448    			case Init_SocketEvent_INT_MASK_Config:
;;;449    				smp_w5500_spiDMA_write_byte(Sn_IMR(SocketNum), (Sn_IR_TIMEOUT|Sn_IR_RECV|Sn_IR_DISCON|Sn_IR_CON));
0001c6  7920              LDRB     r0,[r4,#4]  ; SocketNum
0001c8  f44f5130          MOV      r1,#0x2c00
0001cc  eb060080          ADD      r0,r6,r0,LSL #2
0001d0  eb0100c0          ADD      r0,r1,r0,LSL #3
0001d4  210f              MOVS     r1,#0xf
0001d6  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;450    				SocketNum++;
0001da  7920              LDRB     r0,[r4,#4]  ; SocketNum
0001dc  1c40              ADDS     r0,r0,#1
0001de  b2c0              UXTB     r0,r0
0001e0  7120              STRB     r0,[r4,#4]
;;;451    				if(SocketNum == W5500_MAX_SOCKET_NUM){
0001e2  2808              CMP      r0,#8
0001e4  d101              BNE      |L4.490|
;;;452    					gu8_W5500_Init_Steps = Init_End;
0001e6  2010              MOVS     r0,#0x10
0001e8  70a0              STRB     r0,[r4,#2]
                  |L4.490|
;;;453    				}
;;;454    			break;
;;;455    			default: 
;;;456    				break;
;;;457    		}
;;;458    	}
;;;459    	return smpResult;
0001ea  f9940007          LDRSB    r0,[r4,#7]  ; smpResult
;;;460    }
0001ee  e8bd87fc          POP      {r2-r10,pc}
;;;461    
                          ENDP

0001f2  0000              DCW      0x0000
                  |L4.500|
                          DCD      ||.data||
                  |L4.504|
                          DCD      0x48001000
                  |L4.508|
                          DCD      ||.bss||+0x12c

                          AREA ||i.W5500_Server_Step||, CODE, READONLY, ALIGN=2

                  W5500_Server_Step PROC
;;;461    
;;;462    int8_t W5500_Server_Step(uint8_t Step, uint8_t SocketNum){
000000  e92d4ff0          PUSH     {r4-r11,lr}
000004  b089              SUB      sp,sp,#0x24
000006  4684              MOV      r12,r0
000008  460c              MOV      r4,r1
;;;463    	static int8_t smpResult = SMP_SUCCESS;
;;;464    	static W5500_RegisterList *TempSocket;
;;;465    	static uint8_t ms_Count = 0;
;;;466    	uint8_t i,lu8TTemp;
;;;467    	uint16_t lu16Temp;
;;;468    	uint32_t lu32Temp;
;;;469    	TempSocket = &smpW5500Socket[SocketNum];
00000a  49f9              LDR      r1,|L5.1008|
00000c  4ff9              LDR      r7,|L5.1012|
00000e  eb0402c4          ADD      r2,r4,r4,LSL #3
000012  eb010b82          ADD      r11,r1,r2,LSL #2
000016  f8c7b028          STR      r11,[r7,#0x28]  ; TempSocket
;;;470    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){	
00001a  7879              LDRB     r1,[r7,#1]  ; gu8W5500_SPI_Status
00001c  2900              CMP      r1,#0
00001e  d16a              BNE      |L5.246|
000020  2101              MOVS     r1,#1                 ;462
;;;471    		switch(Step){
;;;472    			case Server_Read_Socket_Status:
;;;473    				Socket_Event_Handling_Status[SocketNum] = Event_Handle_Ing;
;;;474    				smp_w5500_spiDMA_read_byte(Sn_SR(SocketNum));
000022  f44f7040          MOV      r0,#0x300
000026  eb010684          ADD      r6,r1,r4,LSL #2
00002a  eb0003c6          ADD      r3,r0,r6,LSL #3
;;;475    				gu8Socket_Sever_Step[SocketNum] = Server_Check_Socket_Status;
;;;476    				break;
;;;477    			case Server_Check_Socket_Status:
;;;478    				socketStatus[SocketNum] = Readbyte_value;
;;;479    				switch(Readbyte_value){
;;;480    					case SOCK_CLOSED:
;;;481    						gu8Socket_Sever_Step[SocketNum] = Socket_Open_Read_IP;
;;;482    						break;
;;;483    					case SOCK_INIT:
;;;484    						gu8Socket_Sever_Step[SocketNum] = Socket_Listen_Read_Mode;
;;;485    						break;
;;;486    					case SOCK_LISTEN:
;;;487    						gu8Socket_Sever_Step[SocketNum] = Server_Read_Socket_Status;
;;;488    						Socket_Event_Handling_Status[SocketNum] = Event_Handle_Done;
;;;489    						//W5500INT_Low = false;
;;;490    						break;
;;;491    					case SOCK_SYNRECV:
;;;492    						gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event;
;;;493    						break;
;;;494    					case SOCK_ESTABLISHED:
;;;495    						gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event;
;;;496    						break;
;;;497    					case SOCK_CLOSE_WAIT:
;;;498    						gu8Socket_Sever_Step[SocketNum] = Set_Socket_Disconnect;
;;;499    						break;
;;;500    					case SOCK_LAST_ACK:
;;;501    						gu8Socket_Sever_Step[SocketNum] = Set_Socket_Disconnect;
;;;502    						break;
;;;503    					default:
;;;504    						break;
;;;505    				}	
;;;506    				break;
;;;507    			/******* Socket reset and open *******/
;;;508    			case Socket_Open_Read_IP:
;;;509    				smp_w5500_getLocalIP();
;;;510    				gu8Socket_Sever_Step[SocketNum] = Socket_Open_Check_IP;
;;;511    				break;
;;;512    			case Socket_Open_Check_IP:
;;;513    				for(i=0;i<IP_ADDR_BYTE_LEN;i++){
;;;514    					if(TmpNetInfo.ip[i]!=0){
;;;515    						break;
;;;516    					}
;;;517    				}
;;;518    				if(i == IP_ADDR_BYTE_LEN){
;;;519    					//while(1);
;;;520    					smpResult = SMP_ERROR_NOT_FOUND;
;;;521    				}else{
;;;522    					gu8Socket_Sever_Step[SocketNum] = Set_Socket_Close;
;;;523    				}
;;;524    				break;	
;;;525    			case Set_Socket_Close:
;;;526    				smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_CLOSE);
00002e  0208              LSLS     r0,r1,#8
;;;527    				gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_0;
;;;528    				break;
;;;529    			case Read_Cmd_Register_Status_0:
;;;530    				smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
;;;531    				gu8Socket_Sever_Step[SocketNum] = Check_Close_Cmd_Recv;
;;;532    				break;
;;;533    			case Check_Close_Cmd_Recv:
;;;534    				if(Readbyte_value!=0){
;;;535    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_0;
;;;536    				}else{
;;;537    					gu8Socket_Sever_Step[SocketNum] = RST_All_INT_Flag;
;;;538    				}
;;;539    				break;
;;;540    			case RST_All_INT_Flag:
;;;541    				smp_w5500_spiDMA_write_byte(Sn_IR(SocketNum), 0xFF&SOCKET_NUM_BASE);
000030  0249              LSLS     r1,r1,#9
000032  eb0102c6          ADD      r2,r1,r6,LSL #3
;;;542    				sock_io_mode &= ~(1<<SocketNum);
;;;543    				sock_is_sending &= ~(1<<SocketNum);
;;;544    				sock_remained_size[SocketNum] = 0;
;;;545    				sock_pack_info[SocketNum] = 0;
;;;546    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_Status_0;
;;;547    				break;
;;;548    			case Read_Socket_Status_0:
;;;549    				smp_w5500_spiDMA_read_byte(Sn_SR(SocketNum));
;;;550    				gu8Socket_Sever_Step[SocketNum] = Verify_Socket_Close_0;
;;;551    				break;
;;;552    			case Verify_Socket_Close_0:
;;;553    				if(Readbyte_value!= SOCK_CLOSED){
;;;554    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_Status_0;
;;;555    				}else{
;;;556    					gu8Socket_Sever_Step[SocketNum] = Set_Socket_Mode;
;;;557    				}
;;;558    				break;
;;;559    			case Set_Socket_Mode:
;;;560    				smp_w5500_spiDMA_write_byte(Sn_MR(SocketNum), TempSocket->Parm.Protocol);
000036  00f1              LSLS     r1,r6,#3
000038  463d              MOV      r5,r7                 ;469
00003a  9108              STR      r1,[sp,#0x20]         ;478
00003c  7aa9              LDRB     r1,[r5,#0xa]          ;478
;;;561    				gu8Socket_Sever_Step[SocketNum] = Set_Socket_Port_Highbyte;
;;;562    				break;
;;;563    			case Set_Socket_Port_Highbyte:
;;;564    				if(!TempSocket->Parm.PortNum)
;;;565    				{
;;;566    				    TempSocket->Parm.PortNum = sock_any_port++;
;;;567    				    if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
;;;568    				}else{
;;;569    					lu8TTemp = (uint8_t)(TempSocket->Parm.PortNum >> 8);
;;;570    					smp_w5500_spiDMA_write_byte(Sn_PORT(SocketNum), lu8TTemp);
;;;571    					gu8Socket_Sever_Step[SocketNum] = Set_Socket_Port_Lowbyte;
;;;572    				}
;;;573    				break;
;;;574    			case Set_Socket_Port_Lowbyte:
;;;575    					lu8TTemp = (uint8_t)TempSocket->Parm.PortNum;
;;;576    					smp_w5500_spiDMA_write_byte(WIZCHIP_OFFSET_INC(Sn_PORT(SocketNum),1), lu8TTemp);
;;;577    					gu8Socket_Sever_Step[SocketNum] = Set_Socket_Open;
;;;578    				break;
;;;579    			case Set_Socket_Open:
;;;580    					smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_OPEN);
;;;581    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_1;
;;;582    				break;
;;;583    			case Read_Cmd_Register_Status_1:
;;;584    					smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
;;;585    					gu8Socket_Sever_Step[SocketNum] = Check_Open_Cmd_Recv;
;;;586    				break;
;;;587    			case Check_Open_Cmd_Recv:
;;;588    				if(Readbyte_value!=0){
;;;589    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_1;
;;;590    				}else{
;;;591    					sock_io_mode &= ~(1 <<SocketNum);
;;;592    					sock_io_mode |= ((0x00 & SF_IO_NONBLOCK) << SocketNum);   
;;;593    					sock_is_sending &= ~(1<<SocketNum);
;;;594    					sock_remained_size[SocketNum] = 0;
;;;595    					sock_pack_info[SocketNum] = PACK_COMPLETED;
;;;596    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_Status_1;
;;;597    				}	
;;;598    				break;
;;;599    			case Read_Socket_Status_1:
;;;600    				smp_w5500_spiDMA_read_byte(Sn_SR(SocketNum));
;;;601    				gu8Socket_Sever_Step[SocketNum] = Verify_Socket_Close_1;
;;;602    				break;
;;;603    			case Verify_Socket_Close_1:
;;;604    				if(Readbyte_value == SOCK_CLOSED){
;;;605    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_Status_1;
;;;606    				}else{
;;;607    					gu8Socket_Sever_Step[SocketNum] = Server_Read_Socket_Status;
;;;608    				}
;;;609    				break;
;;;610    			/************ End ************/
;;;611    			/******* Socket listen *******/	
;;;612    			case Socket_Listen_Read_Mode:
;;;613    				smp_w5500_spiDMA_read_byte(Sn_MR(SocketNum));
;;;614    				gu8Socket_Sever_Step[SocketNum] = Socket_Listen_Verify_Mode;
;;;615    				break;
;;;616    			case Socket_Listen_Verify_Mode:
;;;617    				if((Readbyte_value&0x0F)!= TempSocket->Parm.Protocol){
;;;618    					smpResult = SMP_ERROR_NOT_FOUND;
;;;619    				}else{
;;;620    					gu8Socket_Sever_Step[SocketNum] = Set_Socket_Listen;
;;;621    				}
;;;622    			case Set_Socket_Listen:
;;;623    				smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_LISTEN);
;;;624    				gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_2;
;;;625    				break;
;;;626    			case Read_Cmd_Register_Status_2:
;;;627    				smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
;;;628    				gu8Socket_Sever_Step[SocketNum] = Check_Listen_Cmd_Recv;
;;;629    				break;
;;;630    			case Check_Listen_Cmd_Recv:
;;;631    				if(Readbyte_value != 0){
;;;632    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_2;
;;;633    				}else{
;;;634    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_Status_2;
;;;635    				}
;;;636    				break;
;;;637    			case Read_Socket_Status_2:
;;;638    				smp_w5500_spiDMA_read_byte(Sn_SR(SocketNum));
;;;639    				gu8Socket_Sever_Step[SocketNum] = Verify_Socket_Listen;
;;;640    				break;
;;;641    			case  Verify_Socket_Listen:
;;;642    				if(Readbyte_value != SOCK_LISTEN){
;;;643    					smpResult = SMP_ERROR_NOT_FOUND;
;;;644    				}else{
;;;645    					gu8Socket_Sever_Step[SocketNum] = Server_Read_Socket_Status;
;;;646    				}
;;;647    				break;
;;;648    			/************ End ************/
;;;649    			/****** Socket establish *****/		
;;;650    			case Read_Socket_INT_event:
;;;651    				smp_w5500_spiDMA_read_byte(Sn_IR(SocketNum));
;;;652    				gu8Socket_Sever_Step[SocketNum] = Verify_Connect_Event;
;;;653    				break;
;;;654    			case Verify_Connect_Event:
;;;655    				lu8TTemp = Readbyte_value;
;;;656    				if((lu8TTemp&=SOCKET_NUM_BASE)&Sn_IR_CON){
;;;657    					gu8Socket_Sever_Step[SocketNum] = Clear_CON_INT_Flag;
;;;658    				}else{
;;;659    					gu8Socket_Sever_Step[SocketNum] =  Read_Recv_Cnt_HighByte;
;;;660    				}
;;;661    				break;
;;;662    			case Clear_CON_INT_Flag:
;;;663    				smp_w5500_spiDMA_write_byte(Sn_IR(SocketNum), (Sn_IR_CON&SOCKET_NUM_BASE)); 
;;;664    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event;
;;;665    				break;
;;;666    			case Read_Remote_IP:
;;;667    				smp_w5500_spiDMA_ReadMulti(Sn_DIPR(SocketNum),IP_ADDR_BYTE_LEN, RemoteNetInfo.ip);
;;;668    				gu8Socket_Sever_Step[SocketNum] =  Read_Remote_Port_HighByte;
;;;669    				break;
;;;670    			case Read_Remote_Port_HighByte:
;;;671    				smp_w5500_spiDMA_read_byte(Sn_DPORT(SocketNum));
;;;672    				gu8Socket_Sever_Step[SocketNum]  = Save_High_Byte_Read_Remote_Port_LowByte;
;;;673    			case Save_High_Byte_Read_Remote_Port_LowByte:
;;;674    				smpW5500Socket[SocketNum].Parm.DestPort = ((uint16_t)Readbyte_value)<<8;
;;;675    				smp_w5500_spiDMA_read_byte(WIZCHIP_OFFSET_INC(Sn_DPORT(SocketNum),1));
;;;676    				gu8Socket_Sever_Step[SocketNum] = Save_Port_Low_Byte;
;;;677    			case Save_Port_Low_Byte:
;;;678    				smpW5500Socket[SocketNum].Parm.DestPort +=(( uint16_t)Readbyte_value);
;;;679    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event;
;;;680    				break;
;;;681    			case Read_Recv_Cnt_HighByte:
;;;682    				smp_w5500_spiDMA_read_byte(Sn_RX_RSR(SocketNum));
;;;683    				gu8Socket_Sever_Step[SocketNum] = Read_Recv_Cnt_LowByte;
;;;684    				break;
;;;685    			case Read_Recv_Cnt_LowByte:
;;;686    				gu16Temp = (uint16_t)Readbyte_value;
;;;687    				SocketHandleByteLen[SocketNum] = gu16Temp<<8;
00003e  f04f0901          MOV      r9,#1
000042  f001081f          AND      r8,r1,#0x1f           ;656
;;;688    				smp_w5500_spiDMA_read_byte(WIZCHIP_OFFSET_INC(Sn_RX_RSR(SocketNum),1));
;;;689    				gu8Socket_Sever_Step[SocketNum] = Check_Recv_Data;			
;;;690    			case Check_Recv_Data:
;;;691    				ms_Count++;
000046  f8cd801c          STR      r8,[sp,#0x1c]
00004a  7a6d              LDRB     r5,[r5,#9]
00004c  f8dfa3a8          LDR      r10,|L5.1016|
000050  1c6d              ADDS     r5,r5,#1
000052  b2ed              UXTB     r5,r5
000054  9506              STR      r5,[sp,#0x18]         ;687
000056  f64f75ff          MOV      r5,#0xffff            ;687
;;;692    				if(ms_Count == 2){
;;;693    					SocketHandleByteLen[SocketNum] = SocketHandleByteLen[SocketNum] + ((uint16_t)Readbyte_value);
;;;694    					ms_Count = 0;
;;;695    					if(SocketHandleByteLen[SocketNum]> 0){
;;;696    						gu8Socket_Sever_Step[SocketNum] = Read_Buf_Max_Len;
;;;697    					}else{
;;;698    						gu8Socket_Sever_Step[SocketNum] = Server_Read_Socket_Status;
;;;699    						Socket_Event_Handling_Status[SocketNum] = Event_Handle_Done;
;;;700    						//W5500INT_Low = false;
;;;701    					}
;;;702    				}
;;;703    				break;
;;;704    			case Read_Buf_Max_Len:
;;;705    					smp_w5500_spiDMA_read_byte(Sn_RXBUF_SIZE(SocketNum));
;;;706    					gu8Socket_Sever_Step[SocketNum] = Check_Oversize_Event;
;;;707    				break;
;;;708    			case Check_Oversize_Event:
;;;709    				ms_Count++;
;;;710    				if(ms_Count == 1){
;;;711    					ms_Count = 0;
;;;712    					lu16Temp = ((uint16_t)Readbyte_value)<< 10;
00005a  ea052581          AND      r5,r5,r1,LSL #10
;;;713    					if(SocketHandleByteLen[SocketNum] > lu16Temp){
;;;714    						SocketHandleByteLen[SocketNum] = lu16Temp;
;;;715    					}
;;;716    				}
;;;717    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_Buf_Addr_HighByte;
;;;718    				break;
;;;719    			case Read_Socket_Buf_Addr_HighByte:
;;;720    				smp_w5500_spiDMA_read_byte(Sn_RX_RD(SocketNum));
00005e  9505              STR      r5,[sp,#0x14]
000060  f44f5520          MOV      r5,#0x2800
000064  eb0505c6          ADD      r5,r5,r6,LSL #3
;;;721    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_Buf_Addr_LowByte;
;;;722    				break;
;;;723    			case Read_Socket_Buf_Addr_LowByte:
;;;724    				gu16Temp = Readbyte_value;
;;;725    				gu16Temp = gu16Temp<<8;
;;;726    				smp_w5500_spiDMA_read_byte(WIZCHIP_OFFSET_INC(Sn_RX_RD(SocketNum),1));
000068  9504              STR      r5,[sp,#0x10]
00006a  f44f5524          MOV      r5,#0x2900
00006e  eb0505c6          ADD      r5,r5,r6,LSL #3
;;;727    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_Buf_data;
;;;728    				break;
;;;729    			case Read_Socket_Buf_data:
;;;730    				gu16Temp += Readbyte_value;
;;;731    				lu32Temp = ((uint32_t)gu16Temp<<8)+ (WIZCHIP_RXBUF_BLOCK(SocketNum)<< 3); 
;;;732    				smp_w5500_spiDMA_ReadMulti(lu32Temp,SocketHandleByteLen[SocketNum], TempSocket->Parm.Memory.rx_buf_Ptr);
;;;733    				gu8Socket_Sever_Step[SocketNum] = ParserData_and_Update_Buf_Offset_Highbyte;
;;;734    				break;
;;;735    			case ParserData_and_Update_Buf_Offset_Highbyte:
;;;736    				gu16Temp += SocketHandleByteLen[SocketNum];
;;;737    				if(TempSocket->cbFunPtr){
;;;738    					SocketHandleByteLen[SocketNum] = TempSocket->cbFunPtr(W5500_DATA_RECV,SocketHandleByteLen[SocketNum]);
;;;739    				}
;;;740    				smp_w5500_spiDMA_write_byte(Sn_RX_RD(SocketNum),(uint8_t)(gu16Temp>>8));
;;;741    				gu8Socket_Sever_Step[SocketNum] = Update_Buf_Offset_Lowbyte;
;;;742    				break;
;;;743    			case Update_Buf_Offset_Lowbyte:
;;;744    				smp_w5500_spiDMA_write_byte(WIZCHIP_OFFSET_INC(Sn_RX_RD(SocketNum),1),(uint8_t)gu16Temp);
;;;745    				gu8Socket_Sever_Step[SocketNum] = Set_Scoket_Recv;
;;;746    				break;
;;;747    			case Set_Scoket_Recv:
;;;748    				smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_RECV);
;;;749    				gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_3;
;;;750    				break;
;;;751    			case Read_Cmd_Register_Status_3:
;;;752    				smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
;;;753    				gu8Socket_Sever_Step[SocketNum] = Check_Recv_Cmd_Recv;
;;;754    				break;
;;;755    			case Check_Recv_Cmd_Recv:
;;;756    				if(Readbyte_value!=0){
;;;757    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_3;
;;;758    				}else{
;;;759    					gu8Socket_Sever_Step[SocketNum] = Read_Tx_Buf_Max_Len;
;;;760    				}
;;;761    				break;
;;;762    			case Read_Tx_Buf_Max_Len:
;;;763    				smp_w5500_spiDMA_read_byte(Sn_TXBUF_SIZE(SocketNum));
;;;764    				gu8Socket_Sever_Step[SocketNum] = Check_Response_Oversize;
;;;765    				break;
;;;766    			case Check_Response_Oversize:
;;;767    				lu16Temp = ((uint16_t)Readbyte_value)<<10;
;;;768    				if(TempSocket->Parm.Memory.tx_buf_size > lu16Temp){
;;;769    					TempSocket->Parm.Memory.tx_buf_size = lu16Temp;
;;;770    				}
;;;771    				gu8Socket_Sever_Step[SocketNum] = Read_W5500_Tx_FSR_High;
;;;772    				break;
;;;773    			case Read_W5500_Tx_FSR_High:
;;;774    				smp_w5500_spiDMA_read_byte(Sn_TX_FSR(SocketNum));
;;;775    				gu8Socket_Sever_Step[SocketNum] = Read_W5500_Tx_FSR_Low;
;;;776    				break;
;;;777    			case Read_W5500_Tx_FSR_Low:
;;;778    				smp_w5500_spiDMA_read_byte(WIZCHIP_OFFSET_INC(Sn_TX_FSR(SocketNum),1));
;;;779    				gu8Socket_Sever_Step[SocketNum] = Read_W5500_Tx_Ptr_Highbyte;
;;;780    				break;
;;;781    			case Read_W5500_Tx_Ptr_Highbyte:
;;;782    				smp_w5500_spiDMA_read_byte(Sn_TX_WR(SocketNum));
000072  9503              STR      r5,[sp,#0xc]
000074  f44f5510          MOV      r5,#0x2400
000078  eb0505c6          ADD      r5,r5,r6,LSL #3
;;;783    				gu8Socket_Sever_Step[SocketNum] = Read_W5500_Tx_Ptr_Lowbyte;
;;;784    				break;
;;;785    			case Read_W5500_Tx_Ptr_Lowbyte:
;;;786    				gu16Temp = Readbyte_value;
;;;787    				gu16Temp = gu16Temp<<8;
;;;788    				smp_w5500_spiDMA_read_byte(WIZCHIP_OFFSET_INC(Sn_TX_WR(SocketNum),1));
00007c  9502              STR      r5,[sp,#8]
00007e  f44f5514          MOV      r5,#0x2500
000082  eb0505c6          ADD      r5,r5,r6,LSL #3
000086  9501              STR      r5,[sp,#4]            ;475
000088  fa09f904          LSL      r9,r9,r4              ;542
00008c  eb0000c6          ADD      r0,r0,r6,LSL #3       ;526
000090  f107053a          ADD      r5,r7,#0x3a           ;475
000094  f04f0800          MOV      r8,#0                 ;475
000098  f1bc0f43          CMP      r12,#0x43             ;471
00009c  d22b              BCS      |L5.246|
00009e  e8dff00c          TBB      [pc,r12]              ;471
0000a2  222b              DCB      0x22,0x2b
0000a4  565b6d73          DCB      0x56,0x5b,0x6d,0x73
0000a8  787f969c          DCB      0x78,0x7f,0x96,0x9c
0000ac  a3abfded          DCB      0xa3,0xab,0xfd,0xed
0000b0  ecebeae9          DCB      0xec,0xeb,0xea,0xe9
0000b4  e8e7e6e5          DCB      0xe8,0xe7,0xe6,0xe5
0000b8  e4e3e2e1          DCB      0xe4,0xe3,0xe2,0xe1
0000bc  e0dfdedd          DCB      0xe0,0xdf,0xde,0xdd
0000c0  dcdbdad9          DCB      0xdc,0xdb,0xda,0xd9
0000c4  d8d7d6d5          DCB      0xd8,0xd7,0xd6,0xd5
0000c8  d4d3d2d1          DCB      0xd4,0xd3,0xd2,0xd1
0000cc  d0cfce2a          DCB      0xd0,0xcf,0xce,0x2a
0000d0  cdcccbca          DCB      0xcd,0xcc,0xcb,0xca
0000d4  c9c8c7c6          DCB      0xc9,0xc8,0xc7,0xc6
0000d8  c5c4c3c2          DCB      0xc5,0xc4,0xc3,0xc2
0000dc  c1c0bfbe          DCB      0xc1,0xc0,0xbf,0xbe
0000e0  bdbcbbba          DCB      0xbd,0xbc,0xbb,0xba
0000e4  b900              DCB      0xb9,0x00
0000e6  48c3              LDR      r0,|L5.1012|
0000e8  2601              MOVS     r6,#1                 ;473
0000ea  304a              ADDS     r0,r0,#0x4a           ;473
0000ec  5506              STRB     r6,[r0,r4]            ;473
0000ee  4618              MOV      r0,r3                 ;474
0000f0  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0000f4  552e              STRB     r6,[r5,r4]            ;475
                  |L5.246|
0000f6  e2e2              B        |L5.1726|
0000f8  48be              LDR      r0,|L5.1012|
0000fa  3042              ADDS     r0,r0,#0x42           ;478
0000fc  5501              STRB     r1,[r0,r4]            ;478
0000fe  2916              CMP      r1,#0x16              ;479
000100  d01b              BEQ      |L5.314|
000102  dc05              BGT      |L5.272|
000104  b161              CBZ      r1,|L5.288|
000106  2913              CMP      r1,#0x13              ;479
000108  d00d              BEQ      |L5.294|
00010a  2914              CMP      r1,#0x14              ;479
00010c  d1f3              BNE      |L5.246|
00010e  e00d              B        |L5.300|
                  |L5.272|
000110  2917              CMP      r1,#0x17              ;479
000112  d015              BEQ      |L5.320|
000114  203d              MOVS     r0,#0x3d              ;462
000116  291c              CMP      r1,#0x1c              ;479
000118  d015              BEQ      |L5.326|
00011a  291d              CMP      r1,#0x1d              ;479
00011c  d1eb              BNE      |L5.246|
00011e  e014              B        |L5.330|
                  |L5.288|
000120  2002              MOVS     r0,#2                 ;481
000122  5528              STRB     r0,[r5,r4]            ;481
000124  e2cb              B        |L5.1726|
                  |L5.294|
000126  2012              MOVS     r0,#0x12              ;484
000128  5528              STRB     r0,[r5,r4]            ;484
00012a  e2c8              B        |L5.1726|
                  |L5.300|
00012c  f8058004          STRB     r8,[r5,r4]            ;487
000130  48b0              LDR      r0,|L5.1012|
000132  304a              ADDS     r0,r0,#0x4a           ;488
000134  f8008004          STRB     r8,[r0,r4]            ;488
000138  e2c1              B        |L5.1726|
                  |L5.314|
00013a  2019              MOVS     r0,#0x19              ;492
00013c  5528              STRB     r0,[r5,r4]            ;492
00013e  e2be              B        |L5.1726|
                  |L5.320|
000140  2019              MOVS     r0,#0x19              ;495
000142  5528              STRB     r0,[r5,r4]            ;495
000144  e2bb              B        |L5.1726|
                  |L5.326|
000146  5528              STRB     r0,[r5,r4]            ;498
000148  e2b9              B        |L5.1726|
                  |L5.330|
00014a  5528              STRB     r0,[r5,r4]            ;501
00014c  e2b7              B        |L5.1726|
00014e  f7fffffe          BL       smp_w5500_getLocalIP
000152  2003              MOVS     r0,#3                 ;510
000154  5528              STRB     r0,[r5,r4]            ;510
000156  e2b2              B        |L5.1726|
000158  2000              MOVS     r0,#0                 ;513
00015a  49a5              LDR      r1,|L5.1008|
00015c  3930              SUBS     r1,r1,#0x30           ;514
                  |L5.350|
00015e  180a              ADDS     r2,r1,r0              ;514
000160  7992              LDRB     r2,[r2,#6]            ;514
000162  b91a              CBNZ     r2,|L5.364|
000164  1c40              ADDS     r0,r0,#1              ;513
000166  b2c0              UXTB     r0,r0                 ;513
000168  2804              CMP      r0,#4                 ;513
00016a  d3f8              BCC      |L5.350|
                  |L5.364|
00016c  2804              CMP      r0,#4                 ;518
00016e  d002              BEQ      |L5.374|
000170  2004              MOVS     r0,#4                 ;522
000172  5528              STRB     r0,[r5,r4]            ;522
000174  e2a3              B        |L5.1726|
                  |L5.374|
000176  20ff              MOVS     r0,#0xff              ;520
000178  7238              STRB     r0,[r7,#8]            ;520
00017a  e2a0              B        |L5.1726|
00017c  2110              MOVS     r1,#0x10              ;526
00017e  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000182  2005              MOVS     r0,#5                 ;527
000184  5528              STRB     r0,[r5,r4]            ;527
000186  e29a              B        |L5.1726|
000188  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00018c  2006              MOVS     r0,#6                 ;531
00018e  5528              STRB     r0,[r5,r4]            ;531
000190  e295              B        |L5.1726|
000192  b111              CBZ      r1,|L5.410|
000194  2005              MOVS     r0,#5                 ;535
000196  5528              STRB     r0,[r5,r4]            ;535
000198  e291              B        |L5.1726|
                  |L5.410|
00019a  2007              MOVS     r0,#7                 ;537
00019c  5528              STRB     r0,[r5,r4]            ;537
                  |L5.414|
00019e  e28e              B        |L5.1726|
0001a0  4610              MOV      r0,r2                 ;541
0001a2  211f              MOVS     r1,#0x1f              ;541
0001a4  f7fffffe          BL       smp_w5500_spiDMA_write_byte
0001a8  89f8              LDRH     r0,[r7,#0xe]          ;542  ; sock_io_mode
0001aa  ea200009          BIC      r0,r0,r9              ;542
0001ae  81f8              STRH     r0,[r7,#0xe]          ;542
0001b0  8a38              LDRH     r0,[r7,#0x10]         ;543  ; sock_is_sending
0001b2  ea200009          BIC      r0,r0,r9              ;543
0001b6  8238              STRH     r0,[r7,#0x10]         ;543
0001b8  488f              LDR      r0,|L5.1016|
0001ba  3810              SUBS     r0,r0,#0x10           ;544
0001bc  f8208014          STRH     r8,[r0,r4,LSL #1]     ;544
0001c0  488c              LDR      r0,|L5.1012|
0001c2  3032              ADDS     r0,r0,#0x32           ;545
0001c4  f8008004          STRB     r8,[r0,r4]            ;545
0001c8  2008              MOVS     r0,#8                 ;546
0001ca  5528              STRB     r0,[r5,r4]            ;546
0001cc  e277              B        |L5.1726|
0001ce  4618              MOV      r0,r3                 ;549
0001d0  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0001d4  2009              MOVS     r0,#9                 ;550
0001d6  5528              STRB     r0,[r5,r4]            ;550
0001d8  e271              B        |L5.1726|
0001da  b111              CBZ      r1,|L5.482|
0001dc  2008              MOVS     r0,#8                 ;554
0001de  5528              STRB     r0,[r5,r4]            ;554
0001e0  e26d              B        |L5.1726|
                  |L5.482|
0001e2  200a              MOVS     r0,#0xa               ;556
0001e4  5528              STRB     r0,[r5,r4]            ;556
0001e6  e26a              B        |L5.1726|
0001e8  f89b1009          LDRB     r1,[r11,#9]           ;560
0001ec  9808              LDR      r0,[sp,#0x20]         ;560
0001ee  f7fffffe          BL       smp_w5500_spiDMA_write_byte
0001f2  200b              MOVS     r0,#0xb               ;561
0001f4  5528              STRB     r0,[r5,r4]            ;561
0001f6  e262              B        |L5.1726|
0001f8  f8bb000a          LDRH     r0,[r11,#0xa]         ;564
0001fc  b148              CBZ      r0,|L5.530|
0001fe  0a01              LSRS     r1,r0,#8              ;569
000200  f44f6080          MOV      r0,#0x400             ;570
000204  eb0000c6          ADD      r0,r0,r6,LSL #3       ;570
000208  f7fffffe          BL       smp_w5500_spiDMA_write_byte
00020c  200c              MOVS     r0,#0xc               ;571
00020e  5528              STRB     r0,[r5,r4]            ;571
000210  e255              B        |L5.1726|
                  |L5.530|
000212  e035              B        |L5.640|
000214  e24d              B        |L5.1714|
000216  e23c              B        |L5.1682|
000218  e235              B        |L5.1670|
00021a  e22d              B        |L5.1656|
00021c  e227              B        |L5.1646|
00021e  e220              B        |L5.1634|
000220  e208              B        |L5.1588|
000222  e217              B        |L5.1620|
000224  e200              B        |L5.1576|
000226  e1f8              B        |L5.1562|
000228  e1f2              B        |L5.1552|
00022a  e1eb              B        |L5.1540|
00022c  e1e2              B        |L5.1524|
00022e  e1d2              B        |L5.1494|
000230  e1be              B        |L5.1456|
000232  e1b0              B        |L5.1430|
000234  e1a9              B        |L5.1418|
000236  e19f              B        |L5.1400|
000238  e195              B        |L5.1382|
00023a  e18a              B        |L5.1362|
00023c  e180              B        |L5.1344|
00023e  e178              B        |L5.1330|
000240  e172              B        |L5.1320|
000242  e16b              B        |L5.1308|
000244  e162              B        |L5.1292|
000246  e14b              B        |L5.1248|
000248  e137              B        |L5.1210|
00024a  e129              B        |L5.1184|
00024c  e122              B        |L5.1172|
00024e  e111              B        |L5.1140|
000250  e107              B        |L5.1122|
000252  e0ec              B        |L5.1070|
000254  e0db              B        |L5.1038|
000256  e0d1              B        |L5.1020|
000258  e0c1              B        |L5.990|
00025a  e0b4              B        |L5.966|
00025c  e0ab              B        |L5.950|
00025e  e09e              B        |L5.926|
000260  e096              B        |L5.912|
000262  e08c              B        |L5.894|
000264  e085              B        |L5.882|
000266  e07c              B        |L5.866|
000268  e075              B        |L5.854|
00026a  e06d              B        |L5.840|
00026c  e067              B        |L5.830|
00026e  e060              B        |L5.818|
000270  e054              B        |L5.796|
000272  e04d              B        |L5.784|
000274  e045              B        |L5.770|
000276  e03e              B        |L5.758|
000278  e026              B        |L5.712|
00027a  e020              B        |L5.702|
00027c  e019              B        |L5.690|
00027e  e00d              B        |L5.668|
                  |L5.640|
000280  89b8              LDRH     r0,[r7,#0xc]          ;566  ; sock_any_port
000282  f8ab000a          STRH     r0,[r11,#0xa]         ;566
000286  1c40              ADDS     r0,r0,#1              ;566
000288  b280              UXTH     r0,r0                 ;566
00028a  81b8              STRH     r0,[r7,#0xc]          ;566
00028c  f5a0417f          SUB      r1,r0,#0xff00         ;567
000290  39f0              SUBS     r1,r1,#0xf0           ;567
000292  d184              BNE      |L5.414|
000294  f44f4040          MOV      r0,#0xc000            ;567
000298  81b8              STRH     r0,[r7,#0xc]          ;567
00029a  e210              B        |L5.1726|
                  |L5.668|
00029c  f89b100a          LDRB     r1,[r11,#0xa]         ;575
0002a0  f44f60a0          MOV      r0,#0x500             ;576
0002a4  eb0000c6          ADD      r0,r0,r6,LSL #3       ;576
0002a8  f7fffffe          BL       smp_w5500_spiDMA_write_byte
0002ac  200d              MOVS     r0,#0xd               ;577
0002ae  5528              STRB     r0,[r5,r4]            ;577
0002b0  e205              B        |L5.1726|
                  |L5.690|
0002b2  2101              MOVS     r1,#1                 ;580
0002b4  f7fffffe          BL       smp_w5500_spiDMA_write_byte
0002b8  200e              MOVS     r0,#0xe               ;581
0002ba  5528              STRB     r0,[r5,r4]            ;581
0002bc  e1ff              B        |L5.1726|
                  |L5.702|
0002be  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0002c2  200f              MOVS     r0,#0xf               ;585
0002c4  5528              STRB     r0,[r5,r4]            ;585
0002c6  e1fa              B        |L5.1726|
                  |L5.712|
0002c8  b111              CBZ      r1,|L5.720|
0002ca  200e              MOVS     r0,#0xe               ;589
0002cc  5528              STRB     r0,[r5,r4]            ;589
0002ce  e1f6              B        |L5.1726|
                  |L5.720|
0002d0  89f8              LDRH     r0,[r7,#0xe]          ;591  ; sock_io_mode
0002d2  ea200009          BIC      r0,r0,r9              ;591
0002d6  81f8              STRH     r0,[r7,#0xe]          ;592
0002d8  8a38              LDRH     r0,[r7,#0x10]         ;593  ; sock_is_sending
0002da  ea200009          BIC      r0,r0,r9              ;593
0002de  8238              STRH     r0,[r7,#0x10]         ;593
0002e0  4845              LDR      r0,|L5.1016|
0002e2  3810              SUBS     r0,r0,#0x10           ;594
0002e4  f8208014          STRH     r8,[r0,r4,LSL #1]     ;594
0002e8  4842              LDR      r0,|L5.1012|
0002ea  3032              ADDS     r0,r0,#0x32           ;595
0002ec  f8008004          STRB     r8,[r0,r4]            ;595
0002f0  2010              MOVS     r0,#0x10              ;596
0002f2  5528              STRB     r0,[r5,r4]            ;596
0002f4  e1e3              B        |L5.1726|
                  |L5.758|
0002f6  4618              MOV      r0,r3                 ;600
0002f8  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0002fc  2011              MOVS     r0,#0x11              ;601
0002fe  5528              STRB     r0,[r5,r4]            ;601
000300  e1dd              B        |L5.1726|
                  |L5.770|
000302  b111              CBZ      r1,|L5.778|
000304  f8058004          STRB     r8,[r5,r4]            ;607
000308  e1d9              B        |L5.1726|
                  |L5.778|
00030a  2010              MOVS     r0,#0x10              ;605
00030c  5528              STRB     r0,[r5,r4]            ;605
00030e  e1d6              B        |L5.1726|
                  |L5.784|
000310  9808              LDR      r0,[sp,#0x20]         ;613
000312  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000316  2013              MOVS     r0,#0x13              ;614
000318  5528              STRB     r0,[r5,r4]            ;614
00031a  e1d0              B        |L5.1726|
                  |L5.796|
00031c  f89b2009          LDRB     r2,[r11,#9]           ;617
000320  f001010f          AND      r1,r1,#0xf            ;617
000324  4291              CMP      r1,r2                 ;617
000326  d002              BEQ      |L5.814|
000328  21ff              MOVS     r1,#0xff              ;618
00032a  7239              STRB     r1,[r7,#8]            ;618
00032c  e001              B        |L5.818|
                  |L5.814|
00032e  2114              MOVS     r1,#0x14              ;620
000330  5529              STRB     r1,[r5,r4]            ;620
                  |L5.818|
000332  2102              MOVS     r1,#2                 ;623
000334  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000338  2015              MOVS     r0,#0x15              ;624
00033a  5528              STRB     r0,[r5,r4]            ;624
00033c  e1bf              B        |L5.1726|
                  |L5.830|
00033e  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000342  2016              MOVS     r0,#0x16              ;628
000344  5528              STRB     r0,[r5,r4]            ;628
                  |L5.838|
000346  e1ba              B        |L5.1726|
                  |L5.840|
000348  b111              CBZ      r1,|L5.848|
00034a  2015              MOVS     r0,#0x15              ;632
00034c  5528              STRB     r0,[r5,r4]            ;632
00034e  e1b6              B        |L5.1726|
                  |L5.848|
000350  2017              MOVS     r0,#0x17              ;634
000352  5528              STRB     r0,[r5,r4]            ;634
000354  e1b3              B        |L5.1726|
                  |L5.854|
000356  4618              MOV      r0,r3                 ;638
000358  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00035c  2018              MOVS     r0,#0x18              ;639
00035e  5528              STRB     r0,[r5,r4]            ;639
000360  e1ad              B        |L5.1726|
                  |L5.866|
000362  2914              CMP      r1,#0x14              ;642
000364  d002              BEQ      |L5.876|
000366  20ff              MOVS     r0,#0xff              ;643
000368  7238              STRB     r0,[r7,#8]            ;643
00036a  e1a8              B        |L5.1726|
                  |L5.876|
00036c  f8058004          STRB     r8,[r5,r4]            ;645
000370  e1a5              B        |L5.1726|
                  |L5.882|
000372  4610              MOV      r0,r2                 ;651
000374  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000378  201a              MOVS     r0,#0x1a              ;652
00037a  5528              STRB     r0,[r5,r4]            ;652
00037c  e19f              B        |L5.1726|
                  |L5.894|
00037e  9807              LDR      r0,[sp,#0x1c]         ;656
000380  07c0              LSLS     r0,r0,#31             ;656
000382  d002              BEQ      |L5.906|
000384  201b              MOVS     r0,#0x1b              ;657
000386  5528              STRB     r0,[r5,r4]            ;657
000388  e199              B        |L5.1726|
                  |L5.906|
00038a  2020              MOVS     r0,#0x20              ;659
00038c  5528              STRB     r0,[r5,r4]            ;659
00038e  e196              B        |L5.1726|
                  |L5.912|
000390  4610              MOV      r0,r2                 ;663
000392  2101              MOVS     r1,#1                 ;663
000394  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000398  2019              MOVS     r0,#0x19              ;664
00039a  5528              STRB     r0,[r5,r4]            ;664
00039c  e18f              B        |L5.1726|
                  |L5.926|
00039e  4a14              LDR      r2,|L5.1008|
0003a0  f44f6040          MOV      r0,#0xc00             ;667
0003a4  eb0000c6          ADD      r0,r0,r6,LSL #3       ;667
0003a8  3a13              SUBS     r2,r2,#0x13           ;667
0003aa  2104              MOVS     r1,#4                 ;667
0003ac  f7fffffe          BL       smp_w5500_spiDMA_ReadMulti
0003b0  201d              MOVS     r0,#0x1d              ;668
0003b2  5528              STRB     r0,[r5,r4]            ;668
0003b4  e183              B        |L5.1726|
                  |L5.950|
0003b6  f44f5080          MOV      r0,#0x1000            ;671
0003ba  eb0000c6          ADD      r0,r0,r6,LSL #3       ;671
0003be  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0003c2  201e              MOVS     r0,#0x1e              ;672
0003c4  5528              STRB     r0,[r5,r4]            ;672
                  |L5.966|
0003c6  7ab8              LDRB     r0,[r7,#0xa]          ;674  ; Readbyte_value
0003c8  0200              LSLS     r0,r0,#8              ;674
0003ca  f8ab0020          STRH     r0,[r11,#0x20]        ;674
0003ce  f44f5088          MOV      r0,#0x1100            ;675
0003d2  eb0000c6          ADD      r0,r0,r6,LSL #3       ;675
0003d6  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0003da  201f              MOVS     r0,#0x1f              ;676
0003dc  5528              STRB     r0,[r5,r4]            ;676
                  |L5.990|
0003de  f8bb0020          LDRH     r0,[r11,#0x20]        ;678
0003e2  7ab9              LDRB     r1,[r7,#0xa]          ;678  ; Readbyte_value
0003e4  4408              ADD      r0,r0,r1              ;678
0003e6  f8ab0020          STRH     r0,[r11,#0x20]        ;678
0003ea  2019              MOVS     r0,#0x19              ;679
0003ec  5528              STRB     r0,[r5,r4]            ;679
0003ee  e166              B        |L5.1726|
                  |L5.1008|
                          DCD      ||.bss||+0x15c
                  |L5.1012|
                          DCD      ||.data||
                  |L5.1016|
                          DCD      ||.bss||+0x10
                  |L5.1020|
0003fc  f44f5018          MOV      r0,#0x2600            ;682
000400  eb0000c6          ADD      r0,r0,r6,LSL #3       ;682
000404  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000408  2021              MOVS     r0,#0x21              ;683
00040a  5528              STRB     r0,[r5,r4]            ;683
00040c  e157              B        |L5.1726|
                  |L5.1038|
00040e  8279              STRH     r1,[r7,#0x12]         ;686
000410  8a79              LDRH     r1,[r7,#0x12]         ;687  ; gu16Temp
000412  f64f70ff          MOV      r0,#0xffff            ;687
000416  ea002001          AND      r0,r0,r1,LSL #8       ;687
00041a  f82a0014          STRH     r0,[r10,r4,LSL #1]    ;687
00041e  f44f501c          MOV      r0,#0x2700            ;688
000422  eb0000c6          ADD      r0,r0,r6,LSL #3       ;688
000426  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00042a  2022              MOVS     r0,#0x22              ;689
00042c  5528              STRB     r0,[r5,r4]            ;689
                  |L5.1070|
00042e  7a78              LDRB     r0,[r7,#9]            ;691  ; ms_Count
000430  1c40              ADDS     r0,r0,#1              ;691
000432  b2c0              UXTB     r0,r0                 ;691
000434  7278              STRB     r0,[r7,#9]            ;691
000436  2802              CMP      r0,#2                 ;692
000438  d185              BNE      |L5.838|
00043a  f83a0014          LDRH     r0,[r10,r4,LSL #1]    ;693
00043e  7ab9              LDRB     r1,[r7,#0xa]          ;693  ; Readbyte_value
000440  4408              ADD      r0,r0,r1              ;693
000442  f82a0014          STRH     r0,[r10,r4,LSL #1]    ;693
000446  f8878009          STRB     r8,[r7,#9]            ;694
00044a  f83a0014          LDRH     r0,[r10,r4,LSL #1]    ;695
00044e  b110              CBZ      r0,|L5.1110|
000450  2023              MOVS     r0,#0x23              ;696
000452  5528              STRB     r0,[r5,r4]            ;696
000454  e133              B        |L5.1726|
                  |L5.1110|
000456  f8058004          STRB     r8,[r5,r4]            ;698
00045a  489b              LDR      r0,|L5.1736|
00045c  f8008004          STRB     r8,[r0,r4]            ;699
000460  e12d              B        |L5.1726|
                  |L5.1122|
000462  f44f50f0          MOV      r0,#0x1e00            ;705
000466  eb0000c6          ADD      r0,r0,r6,LSL #3       ;705
00046a  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00046e  2024              MOVS     r0,#0x24              ;706
000470  5528              STRB     r0,[r5,r4]            ;706
000472  e124              B        |L5.1726|
                  |L5.1140|
000474  9806              LDR      r0,[sp,#0x18]         ;709
000476  7278              STRB     r0,[r7,#9]            ;709
000478  2801              CMP      r0,#1                 ;710
00047a  d108              BNE      |L5.1166|
00047c  f8878009          STRB     r8,[r7,#9]            ;711
000480  9805              LDR      r0,[sp,#0x14]         ;712
000482  f83a1014          LDRH     r1,[r10,r4,LSL #1]    ;713
000486  4281              CMP      r1,r0                 ;713
000488  d901              BLS      |L5.1166|
00048a  f82a0014          STRH     r0,[r10,r4,LSL #1]    ;714
                  |L5.1166|
00048e  2025              MOVS     r0,#0x25              ;717
000490  5528              STRB     r0,[r5,r4]            ;717
000492  e114              B        |L5.1726|
                  |L5.1172|
000494  9804              LDR      r0,[sp,#0x10]         ;720
000496  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00049a  2026              MOVS     r0,#0x26              ;721
00049c  5528              STRB     r0,[r5,r4]            ;721
00049e  e10e              B        |L5.1726|
                  |L5.1184|
0004a0  8279              STRH     r1,[r7,#0x12]         ;724
0004a2  8a79              LDRH     r1,[r7,#0x12]         ;725  ; gu16Temp
0004a4  f64f70ff          MOV      r0,#0xffff            ;725
0004a8  ea002001          AND      r0,r0,r1,LSL #8       ;725
0004ac  8278              STRH     r0,[r7,#0x12]         ;725
0004ae  9803              LDR      r0,[sp,#0xc]          ;726
0004b0  f7fffffe          BL       smp_w5500_spiDMA_read_byte
0004b4  2027              MOVS     r0,#0x27              ;727
0004b6  5528              STRB     r0,[r5,r4]            ;727
0004b8  e101              B        |L5.1726|
                  |L5.1210|
0004ba  8a78              LDRH     r0,[r7,#0x12]         ;730  ; gu16Temp
0004bc  4408              ADD      r0,r0,r1              ;730
0004be  8278              STRH     r0,[r7,#0x12]         ;730
0004c0  8a78              LDRH     r0,[r7,#0x12]         ;731  ; gu16Temp
0004c2  0201              LSLS     r1,r0,#8              ;731
0004c4  2003              MOVS     r0,#3                 ;731
0004c6  eb000084          ADD      r0,r0,r4,LSL #2       ;731
0004ca  eb0100c0          ADD      r0,r1,r0,LSL #3       ;731
0004ce  f83a1014          LDRH     r1,[r10,r4,LSL #1]    ;732
0004d2  f8db2010          LDR      r2,[r11,#0x10]        ;732
0004d6  f7fffffe          BL       smp_w5500_spiDMA_ReadMulti
0004da  2028              MOVS     r0,#0x28              ;733
0004dc  5528              STRB     r0,[r5,r4]            ;733
0004de  e0ee              B        |L5.1726|
                  |L5.1248|
0004e0  f83a0014          LDRH     r0,[r10,r4,LSL #1]    ;736
0004e4  8a79              LDRH     r1,[r7,#0x12]         ;736  ; gu16Temp
0004e6  4408              ADD      r0,r0,r1              ;736
0004e8  8278              STRH     r0,[r7,#0x12]         ;736
0004ea  f8db2004          LDR      r2,[r11,#4]           ;737
0004ee  b12a              CBZ      r2,|L5.1276|
0004f0  f83a1014          LDRH     r1,[r10,r4,LSL #1]    ;738
0004f4  2000              MOVS     r0,#0                 ;738
0004f6  4790              BLX      r2                    ;738
0004f8  f82a0014          STRH     r0,[r10,r4,LSL #1]    ;738
                  |L5.1276|
0004fc  8a78              LDRH     r0,[r7,#0x12]         ;740  ; gu16Temp
0004fe  0a01              LSRS     r1,r0,#8              ;740
000500  9804              LDR      r0,[sp,#0x10]         ;740
000502  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000506  2029              MOVS     r0,#0x29              ;741
000508  5528              STRB     r0,[r5,r4]            ;741
00050a  e0d8              B        |L5.1726|
                  |L5.1292|
00050c  8a78              LDRH     r0,[r7,#0x12]         ;744  ; gu16Temp
00050e  b2c1              UXTB     r1,r0                 ;744
000510  9803              LDR      r0,[sp,#0xc]          ;744
000512  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000516  202a              MOVS     r0,#0x2a              ;745
000518  5528              STRB     r0,[r5,r4]            ;745
00051a  e0d0              B        |L5.1726|
                  |L5.1308|
00051c  2140              MOVS     r1,#0x40              ;748
00051e  f7fffffe          BL       smp_w5500_spiDMA_write_byte
000522  202b              MOVS     r0,#0x2b              ;749
000524  5528              STRB     r0,[r5,r4]            ;749
000526  e0ca              B        |L5.1726|
                  |L5.1320|
000528  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00052c  202c              MOVS     r0,#0x2c              ;753
00052e  5528              STRB     r0,[r5,r4]            ;753
000530  e0c5              B        |L5.1726|
                  |L5.1330|
000532  b111              CBZ      r1,|L5.1338|
000534  202b              MOVS     r0,#0x2b              ;757
000536  5528              STRB     r0,[r5,r4]            ;757
000538  e0c1              B        |L5.1726|
                  |L5.1338|
00053a  202e              MOVS     r0,#0x2e              ;759
00053c  5528              STRB     r0,[r5,r4]            ;759
00053e  e0be              B        |L5.1726|
                  |L5.1344|
000540  f44f50f8          MOV      r0,#0x1f00            ;763
000544  eb0000c6          ADD      r0,r0,r6,LSL #3       ;763
000548  f7fffffe          BL       smp_w5500_spiDMA_read_byte
00054c  202f              MOVS     r0,#0x2f              ;764
00054e  5528              STRB     r0,[r5,r4]            ;764
000550  e0b5              B        |L5.1726|
                  |L5.1362|
000552  9805              LDR      r0,[sp,#0x14]         ;767
000554  f8bb101c          LDRH     r1,[r11,#0x1c]        ;768
000558  4281              CMP      r1,r0                 ;768
00055a  d901              BLS      |L5.1376|
00055c  f8ab001c          STRH     r0,[r11,#0x1c]        ;769
                  |L5.1376|
000560  2030              MOVS     r0,#0x30              ;771
000562  5528              STRB     r0,[r5,r4]            ;771
000564  e0ab              B        |L5.1726|
                  |L5.1382|
000566  f44f5000          MOV      r0,#0x2000            ;774
00056a  eb0000c6          ADD      r0,r0,r6,LSL #3       ;774
00056e  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000572  2031              MOVS     r0,#0x31              ;775
000574  5528              STRB     r0,[r5,r4]            ;775
000576  e0a2              B        |L5.1726|
                  |L5.1400|
000578  f44f5004          MOV      r0,#0x2100            ;778
00057c  eb0000c6          ADD      r0,r0,r6,LSL #3       ;778
000580  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000584  2032              MOVS     r0,#0x32              ;779
000586  5528              STRB     r0,[r5,r4]            ;779
000588  e099              B        |L5.1726|
                  |L5.1418|
00058a  9802              LDR      r0,[sp,#8]            ;782
00058c  f7fffffe          BL       smp_w5500_spiDMA_read_byte
000590  2033              MOVS     r0,#0x33              ;783
000592  5528              STRB     r0,[r5,r4]            ;783
000594  e093              B        |L5.1726|
                  |L5.1430|
000596  8279              STRH     r1,[r7,#0x12]         ;786
000598  8a79              LDRH     r1,[r7,#0x12]         ;787  ; gu16Temp
00059a  f64f70ff          MOV      r0,#0xffff            ;787
00059e  ea002001          AND      r0,r0,r1,LSL #8       ;787
0005a2  8278              STRH     r0,[r7,#0x12]         ;787
0005a4  9801              LDR      r0,[sp,#4]
0005a6  f7fffffe          BL       smp_w5500_spiDMA_read_byte
;;;789    				gu8Socket_Sever_Step[SocketNum] = Get_W5500_Tx_Ptr_Addr_and_Trans;
0005aa  2034              MOVS     r0,#0x34
0005ac  5528              STRB     r0,[r5,r4]
;;;790    				break;
0005ae  e086              B        |L5.1726|
                  |L5.1456|
;;;791    			case Get_W5500_Tx_Ptr_Addr_and_Trans:
;;;792    				gu16Temp +=(uint16_t)Readbyte_value;
0005b0  8a78              LDRH     r0,[r7,#0x12]  ; gu16Temp
0005b2  4408              ADD      r0,r0,r1
0005b4  8278              STRH     r0,[r7,#0x12]
;;;793    				lu32Temp = (((uint32_t)gu16Temp) << 8) + (WIZCHIP_TXBUF_BLOCK(SocketNum)<< 3);
0005b6  8a78              LDRH     r0,[r7,#0x12]  ; gu16Temp
0005b8  0201              LSLS     r1,r0,#8
0005ba  2002              MOVS     r0,#2
0005bc  eb000084          ADD      r0,r0,r4,LSL #2
0005c0  eb0100c0          ADD      r0,r1,r0,LSL #3
;;;794    				smp_w5500_spiDMA_WriteMulti(lu32Temp, TempSocket->Parm.Memory.tx_buf_Ptr, SocketHandleByteLen[SocketNum]);
0005c4  f83a2014          LDRH     r2,[r10,r4,LSL #1]
0005c8  f8db1018          LDR      r1,[r11,#0x18]
0005cc  f7fffffe          BL       smp_w5500_spiDMA_WriteMulti
;;;795    				gu8Socket_Sever_Step[SocketNum] = Update_Tx_Ptr_Highbyte;
0005d0  2035              MOVS     r0,#0x35
0005d2  5528              STRB     r0,[r5,r4]
;;;796    				break;
0005d4  e073              B        |L5.1726|
                  |L5.1494|
;;;797    			case Update_Tx_Ptr_Highbyte:
;;;798    				gu16Temp += SocketHandleByteLen[SocketNum]; 
0005d6  f83a0014          LDRH     r0,[r10,r4,LSL #1]
0005da  8a79              LDRH     r1,[r7,#0x12]  ; gu16Temp
0005dc  4408              ADD      r0,r0,r1
0005de  8278              STRH     r0,[r7,#0x12]
;;;799    				SocketHandleByteLen[SocketNum] = 0;
0005e0  f82a8014          STRH     r8,[r10,r4,LSL #1]
;;;800    				smp_w5500_spiDMA_write_byte(Sn_TX_WR(SocketNum),(uint8_t)(gu16Temp>>8));
0005e4  8a78              LDRH     r0,[r7,#0x12]  ; gu16Temp
0005e6  0a01              LSRS     r1,r0,#8
0005e8  9802              LDR      r0,[sp,#8]
0005ea  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;801    				gu8Socket_Sever_Step[SocketNum] = Update_Tx_Ptr_Lowbyte;
0005ee  2036              MOVS     r0,#0x36
0005f0  5528              STRB     r0,[r5,r4]
;;;802    				break;
0005f2  e064              B        |L5.1726|
                  |L5.1524|
;;;803    			case Update_Tx_Ptr_Lowbyte:
;;;804    				smp_w5500_spiDMA_write_byte(WIZCHIP_OFFSET_INC(Sn_TX_WR(SocketNum),1),(uint8_t)gu16Temp);
0005f4  8a78              LDRH     r0,[r7,#0x12]  ; gu16Temp
0005f6  b2c1              UXTB     r1,r0
0005f8  9801              LDR      r0,[sp,#4]
0005fa  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;805    				gu8Socket_Sever_Step[SocketNum] = Set_Socket_Send;
0005fe  2037              MOVS     r0,#0x37
000600  5528              STRB     r0,[r5,r4]
;;;806    				break;
000602  e05c              B        |L5.1726|
                  |L5.1540|
;;;807    			case Set_Socket_Send:
;;;808    				smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_SEND);
000604  2120              MOVS     r1,#0x20
000606  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;809    				gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_4;
00060a  2038              MOVS     r0,#0x38
00060c  5528              STRB     r0,[r5,r4]
;;;810    				break;			
00060e  e056              B        |L5.1726|
                  |L5.1552|
;;;811    			case Read_Cmd_Register_Status_4:
;;;812    				smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
000610  f7fffffe          BL       smp_w5500_spiDMA_read_byte
;;;813    				gu8Socket_Sever_Step[SocketNum] = Check_Send_Cmd_Recv;
000614  2039              MOVS     r0,#0x39
000616  5528              STRB     r0,[r5,r4]
;;;814    				break;
000618  e051              B        |L5.1726|
                  |L5.1562|
;;;815    			case Check_Send_Cmd_Recv:
;;;816    				if(Readbyte_value!=0){
00061a  b111              CBZ      r1,|L5.1570|
;;;817    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_4;
00061c  2038              MOVS     r0,#0x38
00061e  5528              STRB     r0,[r5,r4]
000620  e04d              B        |L5.1726|
                  |L5.1570|
;;;818    				}else{
;;;819    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event_1;
000622  203a              MOVS     r0,#0x3a
000624  5528              STRB     r0,[r5,r4]
000626  e04a              B        |L5.1726|
                  |L5.1576|
;;;820    				}
;;;821    				break;
;;;822    			case Read_Socket_INT_event_1:
;;;823    				smp_w5500_spiDMA_read_byte(Sn_IR(SocketNum));
000628  4610              MOV      r0,r2
00062a  f7fffffe          BL       smp_w5500_spiDMA_read_byte
;;;824    				gu8Socket_Sever_Step[SocketNum] = Verify_Send_End;
00062e  203c              MOVS     r0,#0x3c
000630  5528              STRB     r0,[r5,r4]
;;;825    				break;
000632  e044              B        |L5.1726|
                  |L5.1588|
;;;826    			case Verify_Send_End:
;;;827    				ms_Count++;
000634  9806              LDR      r0,[sp,#0x18]
000636  7278              STRB     r0,[r7,#9]
;;;828    				if(ms_Count == 2){
000638  2802              CMP      r0,#2
00063a  d140              BNE      |L5.1726|
;;;829    					ms_Count = 0;
00063c  f8878009          STRB     r8,[r7,#9]
;;;830    					if((Readbyte_value&=SOCKET_NUM_BASE)&Sn_IR_RECV ){
000640  9807              LDR      r0,[sp,#0x1c]
000642  72b8              STRB     r0,[r7,#0xa]
000644  0740              LSLS     r0,r0,#29
000646  d502              BPL      |L5.1614|
;;;831    						gu8Socket_Sever_Step[SocketNum] = Clear_SendOK_INT_Flag;
000648  203b              MOVS     r0,#0x3b
00064a  5528              STRB     r0,[r5,r4]
00064c  e037              B        |L5.1726|
                  |L5.1614|
;;;832    					}else{
;;;833    						gu8Socket_Sever_Step[SocketNum] =  Read_Socket_INT_event_1;
00064e  203a              MOVS     r0,#0x3a
000650  5528              STRB     r0,[r5,r4]
000652  e034              B        |L5.1726|
                  |L5.1620|
;;;834    					}
;;;835    				}
;;;836    				break;
;;;837    			case Clear_SendOK_INT_Flag:
;;;838    				smp_w5500_spiDMA_write_byte(Sn_IR(SocketNum), (Sn_IR_RECV &SOCKET_NUM_BASE)); 
000654  4610              MOV      r0,r2
000656  2104              MOVS     r1,#4
000658  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;839    				gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event;
00065c  2019              MOVS     r0,#0x19
00065e  5528              STRB     r0,[r5,r4]
;;;840    			break;
000660  e02d              B        |L5.1726|
                  |L5.1634|
;;;841    			/************ End ************/
;;;842    			/******* Socket disconnect *******/	
;;;843    			case Set_Socket_Disconnect:
;;;844    				smp_w5500_spiDMA_write_byte(Sn_CR(SocketNum), Sn_CR_DISCON);
000662  2108              MOVS     r1,#8
000664  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;845    				gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_5;
000668  203e              MOVS     r0,#0x3e
00066a  5528              STRB     r0,[r5,r4]
;;;846    				break;				
00066c  e027              B        |L5.1726|
                  |L5.1646|
;;;847    			case Read_Cmd_Register_Status_5:
;;;848    				smp_w5500_spiDMA_read_byte(Sn_CR(SocketNum));
00066e  f7fffffe          BL       smp_w5500_spiDMA_read_byte
;;;849    				gu8Socket_Sever_Step[SocketNum] = Check_Discon_Cmd_Recv;
000672  203f              MOVS     r0,#0x3f
000674  5528              STRB     r0,[r5,r4]
;;;850    				break;
000676  e022              B        |L5.1726|
                  |L5.1656|
;;;851    			case Check_Discon_Cmd_Recv:
;;;852    				if(Readbyte_value!=0){
000678  b111              CBZ      r1,|L5.1664|
;;;853    					gu8Socket_Sever_Step[SocketNum] = Read_Cmd_Register_Status_5;
00067a  203e              MOVS     r0,#0x3e
00067c  5528              STRB     r0,[r5,r4]
00067e  e01e              B        |L5.1726|
                  |L5.1664|
;;;854    				}else{
;;;855    					gu8Socket_Sever_Step[SocketNum] = Read_Socket_INT_event_2;
000680  2040              MOVS     r0,#0x40
000682  5528              STRB     r0,[r5,r4]
000684  e01b              B        |L5.1726|
                  |L5.1670|
;;;856    				}
;;;857    				break;	
;;;858    			case Read_Socket_INT_event_2:
;;;859    				smp_w5500_spiDMA_read_byte(Sn_IR(SocketNum));
000686  4610              MOV      r0,r2
000688  f7fffffe          BL       smp_w5500_spiDMA_read_byte
;;;860    				gu8Socket_Sever_Step[SocketNum] = Verify_Disconnct_End;
00068c  2041              MOVS     r0,#0x41
00068e  5528              STRB     r0,[r5,r4]
;;;861    				break;
000690  e015              B        |L5.1726|
                  |L5.1682|
;;;862    			case Verify_Disconnct_End:
;;;863    				ms_Count++;
000692  9806              LDR      r0,[sp,#0x18]
000694  7278              STRB     r0,[r7,#9]
;;;864    				if(ms_Count == 2){
000696  2802              CMP      r0,#2
000698  d111              BNE      |L5.1726|
;;;865    					ms_Count = 0;
00069a  f8878009          STRB     r8,[r7,#9]
;;;866    					if((Readbyte_value&=SOCKET_NUM_BASE)&Sn_IR_DISCON ){
00069e  9807              LDR      r0,[sp,#0x1c]
0006a0  72b8              STRB     r0,[r7,#0xa]
0006a2  0780              LSLS     r0,r0,#30
0006a4  d502              BPL      |L5.1708|
;;;867    						gu8Socket_Sever_Step[SocketNum] = Clear_DISCON_INT_Flag;
0006a6  2042              MOVS     r0,#0x42
0006a8  5528              STRB     r0,[r5,r4]
0006aa  e008              B        |L5.1726|
                  |L5.1708|
;;;868    					}else{
;;;869    						gu8Socket_Sever_Step[SocketNum] =  Read_Socket_INT_event_2;
0006ac  2040              MOVS     r0,#0x40
0006ae  5528              STRB     r0,[r5,r4]
0006b0  e005              B        |L5.1726|
                  |L5.1714|
;;;870    					}
;;;871    				}
;;;872    				break;
;;;873    			case Clear_DISCON_INT_Flag:
;;;874    				smp_w5500_spiDMA_write_byte(Sn_IR(SocketNum), (Sn_IR_DISCON &SOCKET_NUM_BASE)); 
0006b2  4610              MOV      r0,r2
0006b4  2102              MOVS     r1,#2
0006b6  f7fffffe          BL       smp_w5500_spiDMA_write_byte
;;;875    				gu8Socket_Sever_Step[SocketNum] = Server_Read_Socket_Status;
0006ba  f8058004          STRB     r8,[r5,r4]
                  |L5.1726|
;;;876    				break;
;;;877    			/************ End ************/
;;;878    			default:
;;;879    				break;
;;;880    		}
;;;881    	}
;;;882    
;;;883    	return smpResult;
0006be  f9970008          LDRSB    r0,[r7,#8]  ; smpResult
;;;884    
;;;885    }
0006c2  b009              ADD      sp,sp,#0x24
0006c4  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP

                  |L5.1736|
                          DCD      ||.data||+0x4a

                          AREA ||i.W5500_Socket_Register||, CODE, READONLY, ALIGN=2

                  W5500_Socket_Register PROC
;;;311    
;;;312    int8_t W5500_Socket_Register(W5500_Socket_parm *parm, smp_w5500_event_t w5500_event_Handler){
000000  b530              PUSH     {r4,r5,lr}
;;;313    	uint8_t i;
;;;314    	for(i=0; i<W5500_MAX_SOCKET_NUM;i++){		
000002  2200              MOVS     r2,#0
;;;315    		if(smpW5500Socket[i].SocketStatus == Socket_Disable){
000004  4b15              LDR      r3,|L6.92|
;;;316    			/* Socket i is availible, write parameter to socket parameter */
;;;317    			smpW5500Socket[i].SocketStatus = Socket_Enable;
000006  2501              MOVS     r5,#1
                  |L6.8|
000008  eb0204c2          ADD      r4,r2,r2,LSL #3       ;315
00000c  f8134024          LDRB     r4,[r3,r4,LSL #2]     ;315
000010  b16c              CBZ      r4,|L6.46|
000012  1c52              ADDS     r2,r2,#1              ;314
000014  b2d2              UXTB     r2,r2                 ;314
000016  2a08              CMP      r2,#8                 ;314
000018  d3f6              BCC      |L6.8|
                  |L6.26|
;;;318    			smpW5500Socket[i].cbFunPtr = w5500_event_Handler;
;;;319    			smpW5500Socket[i].Parm.Num = i;						//Socket number hardware(w5500) limit 0~7 
;;;320    			smpW5500Socket[i].Parm.Memory.rx_buf_Ptr = parm->Memory.rx_buf_Ptr;
;;;321    			smpW5500Socket[i].Parm.Memory.tx_buf_Ptr = parm->Memory.tx_buf_Ptr;
;;;322    			smpW5500Socket[i].Parm.Protocol = parm->Protocol;
;;;323    			smpW5500Socket[i].Parm.PortNum = parm->PortNum;
;;;324    			smpW5500Socket[i].Parm.DeviceID = parm->DeviceID;
;;;325    			break;
;;;326    		}
;;;327    	}
;;;328    	/*Socket Full */
;;;329    	if(i==W5500_MAX_SOCKET_NUM){
00001a  2a08              CMP      r2,#8
00001c  d01a              BEQ      |L6.84|
;;;330    		return SMP_ERROR_FULL;
;;;331    	}else{
;;;332    		parm->Num = i;
00001e  7002              STRB     r2,[r0,#0]
;;;333    	}
;;;334    	W5500INT_Low = true;
000020  480f              LDR      r0,|L6.96|
000022  72c5              STRB     r5,[r0,#0xb]
;;;335    	SocketEnableCount++;	
000024  7801              LDRB     r1,[r0,#0]  ; SocketEnableCount
000026  1c49              ADDS     r1,r1,#1
000028  7001              STRB     r1,[r0,#0]
;;;336    	
;;;337    	return SMP_SUCCESS;
00002a  2000              MOVS     r0,#0
;;;338    }
00002c  bd30              POP      {r4,r5,pc}
                  |L6.46|
00002e  eb0204c2          ADD      r4,r2,r2,LSL #3       ;317
000032  f8035024          STRB     r5,[r3,r4,LSL #2]     ;317
000036  eb030384          ADD      r3,r3,r4,LSL #2       ;318
00003a  6059              STR      r1,[r3,#4]            ;318
00003c  721a              STRB     r2,[r3,#8]            ;319
00003e  6881              LDR      r1,[r0,#8]            ;320
000040  6119              STR      r1,[r3,#0x10]         ;320
000042  6901              LDR      r1,[r0,#0x10]         ;321
000044  6199              STR      r1,[r3,#0x18]         ;321
000046  7841              LDRB     r1,[r0,#1]            ;322
000048  7259              STRB     r1,[r3,#9]            ;322
00004a  8841              LDRH     r1,[r0,#2]            ;323
00004c  8159              STRH     r1,[r3,#0xa]          ;323
00004e  7901              LDRB     r1,[r0,#4]            ;324
000050  7319              STRB     r1,[r3,#0xc]          ;324
000052  e7e2              B        |L6.26|
                  |L6.84|
000054  f06f0012          MVN      r0,#0x12              ;330
000058  bd30              POP      {r4,r5,pc}
;;;339    
                          ENDP

00005a  0000              DCW      0x0000
                  |L6.92|
                          DCD      ||.bss||+0x15c
                  |L6.96|
                          DCD      ||.data||

                          AREA ||i.smp_w5500_getGW||, CODE, READONLY, ALIGN=2

                  smp_w5500_getGW PROC
;;;176    
;;;177    void smp_w5500_getGW(void){
000000  4804              LDR      r0,|L7.20|
;;;178    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){
000002  7840              LDRB     r0,[r0,#1]  ; gu8W5500_SPI_Status
000004  2800              CMP      r0,#0
000006  d104              BNE      |L7.18|
;;;179    		smp_w5500_spiDMA_ReadMulti(GAR, GATE_WAY_ADDR_BYTE_LEN,  TmpNetInfo.gw);	
000008  2104              MOVS     r1,#4
00000a  4a03              LDR      r2,|L7.24|
00000c  0188              LSLS     r0,r1,#6
00000e  f7ffbffe          B.W      smp_w5500_spiDMA_ReadMulti
                  |L7.18|
;;;180    	}
;;;181    }
000012  4770              BX       lr
;;;182    void smp_w5500_getSUBMASK(void){
                          ENDP

                  |L7.20|
                          DCD      ||.data||
                  |L7.24|
                          DCD      ||.bss||+0x13a

                          AREA ||i.smp_w5500_getLocalIP||, CODE, READONLY, ALIGN=2

                  smp_w5500_getLocalIP PROC
;;;186    }
;;;187    void smp_w5500_getLocalIP(void){
000000  4805              LDR      r0,|L8.24|
;;;188    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){
000002  7840              LDRB     r0,[r0,#1]  ; gu8W5500_SPI_Status
000004  2800              CMP      r0,#0
000006  d105              BNE      |L8.20|
;;;189    		smp_w5500_spiDMA_ReadMulti(SIPR, IP_ADDR_BYTE_LEN,  TmpNetInfo.ip);	
000008  4a04              LDR      r2,|L8.28|
00000a  2104              MOVS     r1,#4
00000c  f44f6070          MOV      r0,#0xf00
000010  f7ffbffe          B.W      smp_w5500_spiDMA_ReadMulti
                  |L8.20|
;;;190    	}
;;;191    }
000014  4770              BX       lr
;;;192    uint8_t w5500_phyconf_transfer_to_uint8(wiz_PhyConf phyconf){
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      ||.data||
                  |L8.28|
                          DCD      ||.bss||+0x132

                          AREA ||i.smp_w5500_getMAC||, CODE, READONLY, ALIGN=2

                  smp_w5500_getMAC PROC
;;;170    
;;;171    void smp_w5500_getMAC(void){
000000  4805              LDR      r0,|L9.24|
;;;172    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){
000002  7840              LDRB     r0,[r0,#1]  ; gu8W5500_SPI_Status
000004  2800              CMP      r0,#0
000006  d105              BNE      |L9.20|
;;;173    		smp_w5500_spiDMA_ReadMulti(SHAR, MAC_ADDR_BYTE_LEN, TmpNetInfo.mac);	
000008  4a04              LDR      r2,|L9.28|
00000a  2106              MOVS     r1,#6
00000c  f44f6010          MOV      r0,#0x900
000010  f7ffbffe          B.W      smp_w5500_spiDMA_ReadMulti
                  |L9.20|
;;;174    	}
;;;175    }
000014  4770              BX       lr
;;;176    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      ||.data||
                  |L9.28|
                          DCD      ||.bss||+0x12c

                          AREA ||i.smp_w5500_getSUBMASK||, CODE, READONLY, ALIGN=2

                  smp_w5500_getSUBMASK PROC
;;;181    }
;;;182    void smp_w5500_getSUBMASK(void){
000000  4805              LDR      r0,|L10.24|
;;;183    	if(gu8W5500_SPI_Status == W5500_SPI_Idle){
000002  7840              LDRB     r0,[r0,#1]  ; gu8W5500_SPI_Status
000004  2800              CMP      r0,#0
000006  d105              BNE      |L10.20|
;;;184    		smp_w5500_spiDMA_ReadMulti(SUBR, SUB_MASK_ADDR_BYTE_LEN,  TmpNetInfo.sn);	
000008  4a04              LDR      r2,|L10.28|
00000a  2104              MOVS     r1,#4
00000c  f44f60a0          MOV      r0,#0x500
000010  f7ffbffe          B.W      smp_w5500_spiDMA_ReadMulti
                  |L10.20|
;;;185    	}
;;;186    }
000014  4770              BX       lr
;;;187    void smp_w5500_getLocalIP(void){
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      ||.data||
                  |L10.28|
                          DCD      ||.bss||+0x136

                          AREA ||i.smp_w5500_spiDMA_ReadMulti||, CODE, READONLY, ALIGN=2

                  smp_w5500_spiDMA_ReadMulti PROC
;;;112    
;;;113    void smp_w5500_spiDMA_ReadMulti(uint32_t AddrSel, uint16_t Len, uint8_t* Ptr){
000000  b53e              PUSH     {r1-r5,lr}
;;;114    	uint8_t spi_data[3];
;;;115    	
;;;116    	gu8W5500_SPI_Status = W5500_SPI_Busy;
000002  4d0b              LDR      r5,|L11.48|
000004  2401              MOVS     r4,#1
000006  706c              STRB     r4,[r5,#1]
;;;117    	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
;;;118    	spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
000008  0c04              LSRS     r4,r0,#16
00000a  f88d4008          STRB     r4,[sp,#8]
;;;119    	spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
00000e  0a04              LSRS     r4,r0,#8
000010  f88d4009          STRB     r4,[sp,#9]
;;;120    	spi_data[2] = (AddrSel & 0x000000FF) >> 0;
000014  f88d000a          STRB     r0,[sp,#0xa]
;;;121    	smp_spi_master_send_recv(&SPI_W5500, spi_data, 3, Ptr, Len, &W5500_CS);
000018  4806              LDR      r0,|L11.52|
00001a  4613              MOV      r3,r2
00001c  e9cd1000          STRD     r1,r0,[sp,#0]
000020  2203              MOVS     r2,#3
000022  a902              ADD      r1,sp,#8
000024  f1050014          ADD      r0,r5,#0x14
000028  f7fffffe          BL       smp_spi_master_send_recv
;;;122    	
;;;123    }
00002c  bd3e              POP      {r1-r5,pc}
;;;124    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      ||.data||
                  |L11.52|
                          DCD      ||.bss||+0x120

                          AREA ||i.smp_w5500_spiDMA_WriteMulti||, CODE, READONLY, ALIGN=2

                  smp_w5500_spiDMA_WriteMulti PROC
;;;98     
;;;99     void smp_w5500_spiDMA_WriteMulti(uint32_t AddrSel, uint8_t* pBuf,uint16_t Len){
000000  b57c              PUSH     {r2-r6,lr}
;;;100    	uint8_t spi_data[3],i;
;;;101    	gu8W5500_SPI_Status = W5500_SPI_Busy;
000002  4c10              LDR      r4,|L12.68|
000004  2301              MOVS     r3,#1
000006  7063              STRB     r3,[r4,#1]
;;;102    	 AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
000008  f0400004          ORR      r0,r0,#4
;;;103    	W5500_tx_Buf[0] = (AddrSel & 0x00FF0000) >> 16;
00000c  4b0e              LDR      r3,|L12.72|
00000e  0c04              LSRS     r4,r0,#16
000010  701c              STRB     r4,[r3,#0]
;;;104    	W5500_tx_Buf[1] = (AddrSel & 0x0000FF00) >> 8;
000012  0a04              LSRS     r4,r0,#8
000014  705c              STRB     r4,[r3,#1]
;;;105    	W5500_tx_Buf[2] = (AddrSel & 0x000000FF) >> 0;
000016  7098              STRB     r0,[r3,#2]
;;;106    	for(i=0;i<Len;i++){
000018  2000              MOVS     r0,#0
00001a  e004              B        |L12.38|
                  |L12.28|
;;;107    		W5500_tx_Buf[i+3] = pBuf[i];
00001c  181d              ADDS     r5,r3,r0
00001e  5c0c              LDRB     r4,[r1,r0]
000020  70ec              STRB     r4,[r5,#3]
000022  1c40              ADDS     r0,r0,#1              ;106
000024  b2c0              UXTB     r0,r0                 ;106
                  |L12.38|
000026  4290              CMP      r0,r2                 ;106
000028  d3f8              BCC      |L12.28|
;;;108    	}
;;;109    	smp_spi_master_send_recv(&SPI_W5500, W5500_tx_Buf, Len+3, 0, 0, &W5500_CS);
00002a  4808              LDR      r0,|L12.76|
00002c  2100              MOVS     r1,#0
00002e  e9cd1000          STRD     r1,r0,[sp,#0]
000032  4804              LDR      r0,|L12.68|
000034  1cd2              ADDS     r2,r2,#3
000036  460b              MOV      r3,r1
000038  b292              UXTH     r2,r2
00003a  4903              LDR      r1,|L12.72|
00003c  3014              ADDS     r0,r0,#0x14
00003e  f7fffffe          BL       smp_spi_master_send_recv
;;;110    	
;;;111    }
000042  bd7c              POP      {r2-r6,pc}
;;;112    
                          ENDP

                  |L12.68|
                          DCD      ||.data||
                  |L12.72|
                          DCD      ||.bss||+0x20
                  |L12.76|
                          DCD      ||.bss||+0x120

                          AREA ||i.smp_w5500_spiDMA_read_byte||, CODE, READONLY, ALIGN=2

                  smp_w5500_spiDMA_read_byte PROC
;;;86     
;;;87     void smp_w5500_spiDMA_read_byte(uint32_t AddrSel){
000000  b50e              PUSH     {r1-r3,lr}
;;;88     	uint8_t spi_data[3];
;;;89     	
;;;90     	gu8W5500_SPI_Status = W5500_SPI_Busy;
000002  4a0b              LDR      r2,|L13.48|
000004  2101              MOVS     r1,#1
000006  7051              STRB     r1,[r2,#1]
;;;91     	AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);
;;;92     	spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
000008  0c02              LSRS     r2,r0,#16
00000a  f88d2008          STRB     r2,[sp,#8]
;;;93     	spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
00000e  0a02              LSRS     r2,r0,#8
000010  f88d2009          STRB     r2,[sp,#9]
;;;94     	spi_data[2] = (AddrSel & 0x000000FF) >> 0;
000014  f88d000a          STRB     r0,[sp,#0xa]
;;;95     	smp_spi_master_send_recv(&SPI_W5500, spi_data, 3, &Readbyte_value, 1, &W5500_CS);
000018  4806              LDR      r0,|L13.52|
00001a  4b05              LDR      r3,|L13.48|
00001c  e9cd1000          STRD     r1,r0,[sp,#0]
000020  330a              ADDS     r3,r3,#0xa
000022  2203              MOVS     r2,#3
000024  a902              ADD      r1,sp,#8
000026  f103000a          ADD      r0,r3,#0xa
00002a  f7fffffe          BL       smp_spi_master_send_recv
;;;96     	
;;;97     }
00002e  bd0e              POP      {r1-r3,pc}
;;;98     
                          ENDP

                  |L13.48|
                          DCD      ||.data||
                  |L13.52|
                          DCD      ||.bss||+0x120

                          AREA ||i.smp_w5500_spiDMA_write_byte||, CODE, READONLY, ALIGN=2

                  smp_w5500_spiDMA_write_byte PROC
;;;74     
;;;75     void smp_w5500_spiDMA_write_byte(uint32_t AddrSel, uint8_t Value){
000000  b50e              PUSH     {r1-r3,lr}
;;;76     	uint8_t spi_data[4];
;;;77     	gu8W5500_SPI_Status = W5500_SPI_Busy;
000002  4b0d              LDR      r3,|L14.56|
000004  2201              MOVS     r2,#1
000006  705a              STRB     r2,[r3,#1]
;;;78     	AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
000008  f0400004          ORR      r0,r0,#4
;;;79     	spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
00000c  0c02              LSRS     r2,r0,#16
00000e  f88d2008          STRB     r2,[sp,#8]
;;;80     	spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
000012  0a02              LSRS     r2,r0,#8
000014  f88d2009          STRB     r2,[sp,#9]
;;;81     	spi_data[2] = (AddrSel & 0x000000FF) >> 0;
000018  f88d000a          STRB     r0,[sp,#0xa]
;;;82     	spi_data[3] = Value;
00001c  f88d100b          STRB     r1,[sp,#0xb]
;;;83     	smp_spi_master_send_recv(&SPI_W5500, spi_data, 4, 0, 0, &W5500_CS);
000020  4806              LDR      r0,|L14.60|
000022  2100              MOVS     r1,#0
000024  e9cd1000          STRD     r1,r0,[sp,#0]
000028  4803              LDR      r0,|L14.56|
00002a  460b              MOV      r3,r1
00002c  2204              MOVS     r2,#4
00002e  a902              ADD      r1,sp,#8
000030  3014              ADDS     r0,r0,#0x14
000032  f7fffffe          BL       smp_spi_master_send_recv
;;;84     
;;;85     }
000036  bd0e              POP      {r1-r3,pc}
;;;86     
                          ENDP

                  |L14.56|
                          DCD      ||.data||
                  |L14.60|
                          DCD      ||.bss||+0x120

                          AREA ||i.smp_w5500_spi_config||, CODE, READONLY, ALIGN=2

                  smp_w5500_spi_config PROC
;;;252    }
;;;253    void smp_w5500_spi_config(void){
000000  b530              PUSH     {r4,r5,lr}
000002  b087              SUB      sp,sp,#0x1c
;;;254    	GPIO_InitTypeDef GPIO_InitStruct = {0};
000004  2114              MOVS     r1,#0x14
000006  a802              ADD      r0,sp,#8
000008  f7fffffe          BL       __aeabi_memclr4
;;;255    	__HAL_RCC_GPIOB_CLK_ENABLE();
00000c  4827              LDR      r0,|L15.172|
00000e  6cc1              LDR      r1,[r0,#0x4c]
000010  f0410102          ORR      r1,r1,#2
000014  64c1              STR      r1,[r0,#0x4c]
000016  6cc1              LDR      r1,[r0,#0x4c]
000018  f0010102          AND      r1,r1,#2
00001c  9101              STR      r1,[sp,#4]
;;;256    	__HAL_RCC_GPIOD_CLK_ENABLE();
00001e  6cc1              LDR      r1,[r0,#0x4c]
000020  f0410108          ORR      r1,r1,#8
000024  64c1              STR      r1,[r0,#0x4c]
000026  6cc1              LDR      r1,[r0,#0x4c]
000028  f0010108          AND      r1,r1,#8
00002c  9101              STR      r1,[sp,#4]
;;;257    
;;;258    	
;;;259    	
;;;260    #ifdef PCB_VER_1
;;;261    	/*Configure GPIO pins : PE1 RST for PCB 1*/
;;;262    	__HAL_RCC_GPIOE_CLK_ENABLE();
00002e  6cc1              LDR      r1,[r0,#0x4c]
000030  f0410110          ORR      r1,r1,#0x10
000034  64c1              STR      r1,[r0,#0x4c]
000036  6cc0              LDR      r0,[r0,#0x4c]
000038  f0000010          AND      r0,r0,#0x10
00003c  9001              STR      r0,[sp,#4]
;;;263    	GPIO_InitStruct.Pin = GPIO_PIN_1;
00003e  2002              MOVS     r0,#2
000040  9002              STR      r0,[sp,#8]
;;;264    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
000042  2401              MOVS     r4,#1
000044  9403              STR      r4,[sp,#0xc]
;;;265    	GPIO_InitStruct.Pull = GPIO_NOPULL;
000046  2500              MOVS     r5,#0
000048  9504              STR      r5,[sp,#0x10]
;;;266    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
00004a  9505              STR      r5,[sp,#0x14]
;;;267    	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
00004c  a902              ADD      r1,sp,#8
00004e  4818              LDR      r0,|L15.176|
000050  f7fffffe          BL       HAL_GPIO_Init
;;;268    	
;;;269    	/*Configure GPIO pin : PB7 INT Pin for PCB 1 */  
;;;270    	GPIO_InitStruct.Pin = GPIO_PIN_7;
000054  2080              MOVS     r0,#0x80
000056  9002              STR      r0,[sp,#8]
;;;271    	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
000058  4816              LDR      r0,|L15.180|
00005a  9003              STR      r0,[sp,#0xc]
;;;272    	GPIO_InitStruct.Pull = GPIO_NOPULL;
00005c  9504              STR      r5,[sp,#0x10]
;;;273    	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
00005e  a902              ADD      r1,sp,#8
000060  4815              LDR      r0,|L15.184|
000062  f7fffffe          BL       HAL_GPIO_Init
;;;274    #else
;;;275    	/*Configure GPIO pins : PB6 RST */
;;;276    	GPIO_InitStruct.Pin = GPIO_PIN_6;
;;;277    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
;;;278    	GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;279    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
;;;280    	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
;;;281    	
;;;282    	/*Configure GPIO pin : PD8 INT Pin */  
;;;283    	GPIO_InitStruct.Pin = GPIO_PIN_8;
;;;284    	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
;;;285    	GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;286    	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
;;;287    #endif	
;;;288    	
;;;289    	/*EXTI interrupt init*/
;;;290    	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
000066  2200              MOVS     r2,#0
000068  4611              MOV      r1,r2
00006a  2017              MOVS     r0,#0x17
00006c  f7fffffe          BL       HAL_NVIC_SetPriority
;;;291    	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
000070  2017              MOVS     r0,#0x17
000072  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;292    	
;;;293    	PB12.port = SMP_GPIOB;
000076  4811              LDR      r0,|L15.188|
000078  7004              STRB     r4,[r0,#0]
;;;294    	PB12.pin = PIN12;	
00007a  210c              MOVS     r1,#0xc
00007c  7041              STRB     r1,[r0,#1]
;;;295    	
;;;296    	W5500_CS.spi_num = SPI_module2;
00007e  4810              LDR      r0,|L15.192|
000080  7004              STRB     r4,[r0,#0]
;;;297    	W5500_CS.cs_handler = PB12;	
000082  490e              LDR      r1,|L15.188|
000084  3820              SUBS     r0,r0,#0x20
000086  3954              SUBS     r1,r1,#0x54
000088  6d8a              LDR      r2,[r1,#0x58]  ; PB12
00008a  6d49              LDR      r1,[r1,#0x54]  ; PB12
00008c  e9c01209          STRD     r1,r2,[r0,#0x24]
;;;298    	smp_spi_master_cs_init(&W5500_CS);
000090  3020              ADDS     r0,r0,#0x20
000092  f7fffffe          BL       smp_spi_master_cs_init
;;;299    	
;;;300    	SPI_W5500.num = SPI_module2;
000096  4809              LDR      r0,|L15.188|
000098  3840              SUBS     r0,r0,#0x40
00009a  7004              STRB     r4,[r0,#0]
;;;301    	SPI_W5500.mode = SPI_mode0;
00009c  7045              STRB     r5,[r0,#1]
;;;302    	smp_spi_master_init(&SPI_W5500, spi_master_w5500_event_handler, false);
00009e  2200              MOVS     r2,#0
0000a0  4908              LDR      r1,|L15.196|
0000a2  f7fffffe          BL       smp_spi_master_init
;;;303    
;;;304    }
0000a6  b007              ADD      sp,sp,#0x1c
0000a8  bd30              POP      {r4,r5,pc}
;;;305    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L15.172|
                          DCD      0x40021000
                  |L15.176|
                          DCD      0x48001000
                  |L15.180|
                          DCD      0x10210000
                  |L15.184|
                          DCD      0x48000400
                  |L15.188|
                          DCD      ||.data||+0x54
                  |L15.192|
                          DCD      ||.bss||+0x120
                  |L15.196|
                          DCD      spi_master_w5500_event_handler

                          AREA ||i.spi_master_w5500_event_handler||, CODE, READONLY, ALIGN=2

                  spi_master_w5500_event_handler PROC
;;;124    
;;;125    void spi_master_w5500_event_handler(smp_spi_evt_type p_evt)
000000  4904              LDR      r1,|L16.20|
;;;126    {
;;;127    	switch(p_evt){
000002  2800              CMP      r0,#0
000004  d003              BEQ      |L16.14|
000006  2801              CMP      r0,#1
000008  d100              BNE      |L16.12|
;;;128    		case SMP_SPI_EVENT_DONE:
;;;129    			gu8W5500_SPI_Status = W5500_SPI_Idle;
;;;130    			break;
;;;131    		case SMP_SPI_EVENT_TRANSFER_BUSY:
;;;132    			gu8W5500_SPI_Status = W5500_SPI_Busy;	
00000a  7048              STRB     r0,[r1,#1]
                  |L16.12|
;;;133    			break;
;;;134    		case SMP_SPI_EVENT_TRANSFERR_ERROR:
;;;135    			break;
;;;136    		default:
;;;137    			break;
;;;138    	}
;;;139    }
00000c  4770              BX       lr
                  |L16.14|
00000e  2000              MOVS     r0,#0                 ;129
000010  7048              STRB     r0,[r1,#1]            ;129
000012  4770              BX       lr
;;;140    
                          ENDP

                  |L16.20|
                          DCD      ||.data||

                          AREA ||i.w5500_phyconf_transfer_to_uint8||, CODE, READONLY, ALIGN=1

                  w5500_phyconf_transfer_to_uint8 PROC
;;;191    }
;;;192    uint8_t w5500_phyconf_transfer_to_uint8(wiz_PhyConf phyconf){
000000  b501              PUSH     {r0,lr}
;;;193    	uint8_t ret = 0;
000002  2000              MOVS     r0,#0
;;;194    	if(phyconf.by == PHY_CONFBY_SW)
000004  f89d1000          LDRB     r1,[sp,#0]
000008  2901              CMP      r1,#1
00000a  d100              BNE      |L17.14|
;;;195    				ret |= PHYCFGR_OPMD;
00000c  2040              MOVS     r0,#0x40
                  |L17.14|
;;;196    			else
;;;197    				ret &= ~PHYCFGR_OPMD;
;;;198    			if(phyconf.mode == PHY_MODE_AUTONEGO)
00000e  f89d1001          LDRB     r1,[sp,#1]
000012  2901              CMP      r1,#1
000014  d00a              BEQ      |L17.44|
;;;199    				ret |= PHYCFGR_OPMDC_ALLA;
;;;200    			else{
;;;201    				if(phyconf.duplex == PHY_DUPLEX_FULL){
000016  f89d2003          LDRB     r2,[sp,#3]
;;;202    					if(phyconf.speed == PHY_SPEED_100)
00001a  f89d1002          LDRB     r1,[sp,#2]
00001e  2a01              CMP      r2,#1                 ;201
000020  d007              BEQ      |L17.50|
;;;203    						ret |= PHYCFGR_OPMDC_100F;
;;;204    					else
;;;205    						ret |= PHYCFGR_OPMDC_10F;
;;;206    				}else{
;;;207    					if(phyconf.speed == PHY_SPEED_100)
000022  2901              CMP      r1,#1
000024  d101              BNE      |L17.42|
;;;208    						ret |= PHYCFGR_OPMDC_100H;
000026  f0400010          ORR      r0,r0,#0x10
                  |L17.42|
;;;209    					else
;;;210    						ret |= PHYCFGR_OPMDC_10H;
;;;211    				}
;;;212    			}
;;;213    	return ret;
;;;214    } 
00002a  bd08              POP      {r3,pc}
                  |L17.44|
00002c  f0400038          ORR      r0,r0,#0x38           ;199
000030  bd08              POP      {r3,pc}
                  |L17.50|
000032  2901              CMP      r1,#1                 ;202
000034  d002              BEQ      |L17.60|
000036  f0400008          ORR      r0,r0,#8              ;205
00003a  bd08              POP      {r3,pc}
                  |L17.60|
00003c  f0400018          ORR      r0,r0,#0x18           ;203
000040  bd08              POP      {r3,pc}
;;;215    wiz_PhyConf w5500_uint8_transfer_to_phyconf(uint8_t value){
                          ENDP


                          AREA ||i.w5500_uint8_transfer_to_phyconf||, CODE, READONLY, ALIGN=1

                  w5500_uint8_transfer_to_phyconf PROC
;;;214    } 
;;;215    wiz_PhyConf w5500_uint8_transfer_to_phyconf(uint8_t value){
000000  b508              PUSH     {r3,lr}
;;;216    	wiz_PhyConf ret;
;;;217    	ret.by = (value & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
000002  f3c01180          UBFX     r1,r0,#6,#1
000006  f88d1000          STRB     r1,[sp,#0]
;;;218    	switch(value & PHYCFGR_OPMDC_ALLA)
00000a  f0000038          AND      r0,r0,#0x38
;;;219    	{
;;;220    		case PHYCFGR_OPMDC_ALLA:
;;;221    		case PHYCFGR_OPMDC_100FA: 
;;;222    			ret.mode = PHY_MODE_AUTONEGO;
00000e  2101              MOVS     r1,#1
000010  2200              MOVS     r2,#0
000012  2820              CMP      r0,#0x20              ;218
000014  d015              BEQ      |L18.66|
000016  2838              CMP      r0,#0x38              ;218
000018  d013              BEQ      |L18.66|
;;;223    			break;
;;;224    		default:
;;;225    			ret.mode = PHY_MODE_MANUAL;
00001a  f88d2001          STRB     r2,[sp,#1]
                  |L18.30|
;;;226    			break;
;;;227    	}
;;;228    	switch(value & PHYCFGR_OPMDC_ALLA)
00001e  2810              CMP      r0,#0x10
000020  d012              BEQ      |L18.72|
000022  2818              CMP      r0,#0x18
000024  d010              BEQ      |L18.72|
000026  2820              CMP      r0,#0x20
000028  d00e              BEQ      |L18.72|
;;;229    	{
;;;230    		case PHYCFGR_OPMDC_100FA:
;;;231    		case PHYCFGR_OPMDC_100F:
;;;232    		case PHYCFGR_OPMDC_100H:
;;;233    			ret.speed = PHY_SPEED_100;
;;;234    			break;
;;;235    		default:
;;;236    			ret.speed = PHY_SPEED_10;
00002a  f88d2002          STRB     r2,[sp,#2]
                  |L18.46|
;;;237    		break;
;;;238    		}
;;;239    		switch(value & PHYCFGR_OPMDC_ALLA)
00002e  2808              CMP      r0,#8
000030  d00d              BEQ      |L18.78|
000032  2818              CMP      r0,#0x18
000034  d00b              BEQ      |L18.78|
000036  2820              CMP      r0,#0x20
000038  d009              BEQ      |L18.78|
;;;240    		{
;;;241    			case PHYCFGR_OPMDC_100FA:
;;;242    			case PHYCFGR_OPMDC_100F:
;;;243    			case PHYCFGR_OPMDC_10F:
;;;244    				ret.duplex = PHY_DUPLEX_FULL;
;;;245    				break;
;;;246    			default:
;;;247    				ret.duplex = PHY_DUPLEX_HALF;
00003a  f88d2003          STRB     r2,[sp,#3]
                  |L18.62|
;;;248    				break;
;;;249    	}
;;;250    	return ret;
00003e  9800              LDR      r0,[sp,#0]
;;;251    
;;;252    }
000040  bd08              POP      {r3,pc}
                  |L18.66|
000042  f88d1001          STRB     r1,[sp,#1]            ;222
000046  e7ea              B        |L18.30|
                  |L18.72|
000048  f88d1002          STRB     r1,[sp,#2]            ;233
00004c  e7ef              B        |L18.46|
                  |L18.78|
00004e  f88d1003          STRB     r1,[sp,#3]            ;244
000052  e7f4              B        |L18.62|
;;;253    void smp_w5500_spi_config(void){
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  sock_remained_size
                          %        16
                  SocketHandleByteLen
                          %        16
                  W5500_tx_Buf
                          %        256
                  W5500_CS
                          %        12
                  TmpNetInfo
                          %        23
                  RemoteNetInfo
                          %        25
                  smpW5500Socket
                          %        288

                          AREA ||.data||, DATA, ALIGN=2

                  SocketEnableCount
000000  00                DCB      0x00
                  gu8W5500_SPI_Status
000001  00                DCB      0x00
                  gu8_W5500_Init_Steps
000002  10                DCB      0x10
                  SocketNum
000003  00                DCB      0x00
                  |symbol_number.67|
000004  00                DCB      0x00
                  ms_Count
000005  00                DCB      0x00
                  Step_RW_NetInfo
000006  00                DCB      0x00
                  smpResult
000007  00                DCB      0x00
                  |symbol_number.71|
000008  00                DCB      0x00
                  |symbol_number.72|
000009  00                DCB      0x00
                  Readbyte_value
00000a  00                DCB      0x00
                  W5500INT_Low
00000b  00                DCB      0x00
                  sock_any_port
00000c  c000              DCW      0xc000
                  sock_io_mode
00000e  0000              DCW      0x0000
                  sock_is_sending
000010  0000              DCW      0x0000
                  gu16Temp
000012  0000              DCB      0x00,0x00
                  SPI_W5500
000014  0000              DCB      0x00,0x00
                  DefIp
000016  c0a8              DCB      0xc0,0xa8
000018  0110              DCB      0x01,0x10
                  DefSn
00001a  ffff              DCB      0xff,0xff
00001c  ff00              DCB      0xff,0x00
                  DefGw
00001e  c0a8              DCB      0xc0,0xa8
000020  0101              DCB      0x01,0x01
                  DefDns
000022  0808              DCB      0x08,0x08
000024  08080000          DCB      0x08,0x08,0x00,0x00
                  TempSocket
                          DCD      0x00000000
                  DefMac
00002c  00f1bec4          DCB      0x00,0xf1,0xbe,0xc4
000030  a105              DCB      0xa1,0x05
                  sock_pack_info
000032  0000              DCB      0x00,0x00
                          DCD      0x00000000
000038  0000              DCB      0x00,0x00
                  gu8Socket_Sever_Step
00003a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000040  0000              DCB      0x00,0x00
                  socketStatus
000042  0000              DCB      0x00,0x00
                          DCD      0x00000000
000048  0000              DCB      0x00,0x00
                  Socket_Event_Handling_Status
00004a  0000              DCB      0x00,0x00
                          DCD      0x00000000
000050  00000000          DCB      0x00,0x00,0x00,0x00
                  PB12
                          %        8
                  InitSetNetInfo
                          DCD      0x00000900
000060  0006              DCW      0x0006
000062  0000              DCB      0x00,0x00
                          DCD      DefMac
                          DCD      0x00000100
00006c  0004              DCW      0x0004
00006e  0000              DCB      0x00,0x00
                          DCD      DefGw
                          DCD      0x00000500
000078  0004              DCW      0x0004
00007a  0000              DCB      0x00,0x00
                          DCD      DefSn
                          DCD      0x00000f00
000084  0004              DCW      0x0004
000086  0000              DCB      0x00,0x00
                          DCD      DefIp
                  InitReadNetInfo
                          DCD      0x00000900
000090  0006              DCW      0x0006
000092  0000              DCB      0x00,0x00
                          DCD      TmpNetInfo
                          DCD      0x00000100
00009c  0004              DCW      0x0004
00009e  0000              DCB      0x00,0x00
                          DCD      TmpNetInfo+0xe
                          DCD      0x00000500
0000a8  0004              DCW      0x0004
0000aa  0000              DCB      0x00,0x00
                          DCD      TmpNetInfo+0xa
                          DCD      0x00000f00
0000b4  0004              DCW      0x0004
0000b6  0000              DCB      0x00,0x00
                          DCD      TmpNetInfo+0x6

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\SMP\\smp_w5500_DMA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_smp_w5500_DMA_c_6e11ee33____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___15_smp_w5500_DMA_c_6e11ee33____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_smp_w5500_DMA_c_6e11ee33____REVSH|
#line 507
|__asm___15_smp_w5500_DMA_c_6e11ee33____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_smp_w5500_DMA_c_6e11ee33____RRX|
#line 694
|__asm___15_smp_w5500_DMA_c_6e11ee33____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
