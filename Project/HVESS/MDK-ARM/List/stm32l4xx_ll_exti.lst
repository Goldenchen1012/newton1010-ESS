L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_exti.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_exti.c
N  * @author  MCD Application Team
N  * @brief   EXTI LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_exti.h"
S#ifdef  USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined (EXTI)
S
S/** @defgroup EXTI_LL EXTI
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/** @addtogroup EXTI_LL_Private_Macros
S  * @{
S  */
S
S#define IS_LL_EXTI_LINE_0_31(__VALUE__)              (((__VALUE__) & ~LL_EXTI_LINE_ALL_0_31) == 0x00000000U)
S#define IS_LL_EXTI_LINE_32_63(__VALUE__)             (((__VALUE__) & ~LL_EXTI_LINE_ALL_32_63) == 0x00000000U)
S
S#define IS_LL_EXTI_MODE(__VALUE__)                   (((__VALUE__) == LL_EXTI_MODE_IT)            \
S                                                   || ((__VALUE__) == LL_EXTI_MODE_EVENT)         \
S                                                   || ((__VALUE__) == LL_EXTI_MODE_IT_EVENT))
X#define IS_LL_EXTI_MODE(__VALUE__)                   (((__VALUE__) == LL_EXTI_MODE_IT)                                                               || ((__VALUE__) == LL_EXTI_MODE_EVENT)                                                            || ((__VALUE__) == LL_EXTI_MODE_IT_EVENT))
S
S
S#define IS_LL_EXTI_TRIGGER(__VALUE__)                (((__VALUE__) == LL_EXTI_TRIGGER_NONE)       \
S                                                   || ((__VALUE__) == LL_EXTI_TRIGGER_RISING)     \
S                                                   || ((__VALUE__) == LL_EXTI_TRIGGER_FALLING)    \
S                                                   || ((__VALUE__) == LL_EXTI_TRIGGER_RISING_FALLING))
X#define IS_LL_EXTI_TRIGGER(__VALUE__)                (((__VALUE__) == LL_EXTI_TRIGGER_NONE)                                                          || ((__VALUE__) == LL_EXTI_TRIGGER_RISING)                                                        || ((__VALUE__) == LL_EXTI_TRIGGER_FALLING)                                                       || ((__VALUE__) == LL_EXTI_TRIGGER_RISING_FALLING))
S
S/**
S  * @}
S  */
S
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup EXTI_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup EXTI_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize the EXTI registers to their default reset values.
S  * @retval An ErrorStatus enumeration value:
S  *          - 0x00: EXTI registers are de-initialized
S  */
Suint32_t LL_EXTI_DeInit(void)
S{
S  /* Interrupt mask register set to default reset values */
S  LL_EXTI_WriteReg(IMR1,   0xFF820000U);
S  /* Event mask register set to default reset values */
S  LL_EXTI_WriteReg(EMR1,   0x00000000U);
S  /* Rising Trigger selection register set to default reset values */
S  LL_EXTI_WriteReg(RTSR1,  0x00000000U);
S  /* Falling Trigger selection register set to default reset values */
S  LL_EXTI_WriteReg(FTSR1,  0x00000000U);
S  /* Software interrupt event register set to default reset values */
S  LL_EXTI_WriteReg(SWIER1, 0x00000000U);
S  /* Pending register clear */
S  LL_EXTI_WriteReg(PR1,    0x007DFFFFU);
S
S  /* Interrupt mask register 2 set to default reset values */
S#if defined(LL_EXTI_LINE_40)
S  LL_EXTI_WriteReg(IMR2,        0x00000187U);
S#else
S  LL_EXTI_WriteReg(IMR2,        0x00000087U);
S#endif
S  /* Event mask register 2 set to default reset values */
S  LL_EXTI_WriteReg(EMR2,        0x00000000U);
S  /* Rising Trigger selection register 2 set to default reset values */
S  LL_EXTI_WriteReg(RTSR2,       0x00000000U);
S  /* Falling Trigger selection register 2 set to default reset values */
S  LL_EXTI_WriteReg(FTSR2,       0x00000000U);
S  /* Software interrupt event register 2 set to default reset values */
S  LL_EXTI_WriteReg(SWIER2,      0x00000000U);
S  /* Pending register 2 clear */
S  LL_EXTI_WriteReg(PR2,         0x00000078U);
S
S  return 0x00u;
S}
S
S/**
S  * @brief  Initialize the EXTI registers according to the specified parameters in EXTI_InitStruct.
S  * @param  EXTI_InitStruct pointer to a @ref LL_EXTI_InitTypeDef structure.
S  * @retval An ErrorStatus enumeration value:
S  *          - 0x00: EXTI registers are initialized
S  *          - any other calue : wrong configuration
S  */
Suint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
S{
S  uint32_t status = 0x00u;
S
S  /* Check the parameters */
S  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
S  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
S  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
S  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
S
S  /* ENABLE LineCommand */
S  if (EXTI_InitStruct->LineCommand != DISABLE)
S  {
S    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
S
S    /* Configure EXTI Lines in range from 0 to 31 */
S    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
S    {
S      switch (EXTI_InitStruct->Mode)
S      {
S        case LL_EXTI_MODE_IT:
S          /* First Disable Event on provided Lines */
S          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
S          /* Then Enable IT on provided Lines */
S          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
S          break;
S        case LL_EXTI_MODE_EVENT:
S          /* First Disable IT on provided Lines */
S          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
S          /* Then Enable Event on provided Lines */
S          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
S          break;
S        case LL_EXTI_MODE_IT_EVENT:
S          /* Directly Enable IT & Event on provided Lines */
S          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
S          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
S          break;
S        default:
S          status = 0x01u;
S          break;
S      }
S      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
S      {
S        switch (EXTI_InitStruct->Trigger)
S        {
S          case LL_EXTI_TRIGGER_RISING:
S            /* First Disable Falling Trigger on provided Lines */
S            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            /* Then Enable Rising Trigger on provided Lines */
S            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            break;
S          case LL_EXTI_TRIGGER_FALLING:
S            /* First Disable Rising Trigger on provided Lines */
S            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            /* Then Enable Falling Trigger on provided Lines */
S            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            break;
S          case LL_EXTI_TRIGGER_RISING_FALLING:
S            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
S            break;
S          default:
S            status |= 0x02u;
S            break;
S        }
S      }
S    }
S    /* Configure EXTI Lines in range from 32 to 63 */
S    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
S    {
S      switch (EXTI_InitStruct->Mode)
S      {
S        case LL_EXTI_MODE_IT:
S          /* First Disable Event on provided Lines */
S          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
S          /* Then Enable IT on provided Lines */
S          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
S          break;
S        case LL_EXTI_MODE_EVENT:
S          /* First Disable IT on provided Lines */
S          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
S          /* Then Enable Event on provided Lines */
S          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
S          break;
S        case LL_EXTI_MODE_IT_EVENT:
S          /* Directly Enable IT & Event on provided Lines */
S          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
S          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
S          break;
S        default:
S          status |= 0x04u;
S          break;
S      }
S      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
S      {
S        switch (EXTI_InitStruct->Trigger)
S        {
S          case LL_EXTI_TRIGGER_RISING:
S            /* First Disable Falling Trigger on provided Lines */
S            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            /* Then Enable IT on provided Lines */
S            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            break;
S          case LL_EXTI_TRIGGER_FALLING:
S            /* First Disable Rising Trigger on provided Lines */
S            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            /* Then Enable Falling Trigger on provided Lines */
S            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            break;
S          case LL_EXTI_TRIGGER_RISING_FALLING:
S            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
S            break;
S          default:
S            status = ERROR;
S            break;
S        }
S      }
S    }
S  }
S  /* DISABLE LineCommand */
S  else
S  {
S    /* De-configure EXTI Lines in range from 0 to 31 */
S    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
S    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
S    /* De-configure EXTI Lines in range from 32 to 63 */
S    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
S    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
S  }
S
S  return status;
S}
S
S/**
S  * @brief  Set each @ref LL_EXTI_InitTypeDef field to default value.
S  * @param  EXTI_InitStruct Pointer to a @ref LL_EXTI_InitTypeDef structure.
S  * @retval None
S  */
Svoid LL_EXTI_StructInit(LL_EXTI_InitTypeDef *EXTI_InitStruct)
S{
S  EXTI_InitStruct->Line_0_31      = LL_EXTI_LINE_NONE;
S  EXTI_InitStruct->Line_32_63     = LL_EXTI_LINE_NONE;
S  EXTI_InitStruct->LineCommand    = DISABLE;
S  EXTI_InitStruct->Mode           = LL_EXTI_MODE_IT;
S  EXTI_InitStruct->Trigger        = LL_EXTI_TRIGGER_FALLING;
S}
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* defined (EXTI) */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
