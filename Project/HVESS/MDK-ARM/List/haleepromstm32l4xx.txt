; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\haleepromstm32l4xx.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\haleepromstm32l4xx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\HAL\HalEEPromSTM32L4xx.c]
                          THUMB

                          AREA ||i.GetBank||, CODE, READONLY, ALIGN=2

                  GetBank PROC
;;;63       */
;;;64     static uint32_t GetBank(uint32_t Addr)
000000  b530              PUSH     {r4,r5,lr}
;;;65     {
;;;66       uint32_t bank = 0;
;;;67       
;;;68       if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
000002  4913              LDR      r1,|L1.80|
000004  6809              LDR      r1,[r1,#0]
;;;69       {
;;;70       	/* No Bank swap */
;;;71         if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
000006  f44f1380          MOV      r3,#0x100000
00000a  05cd              LSLS     r5,r1,#23             ;68
00000c  4911              LDR      r1,|L1.84|
00000e  f04f6400          MOV      r4,#0x8000000
000012  680a              LDR      r2,[r1,#0]
000014  ea6f0102          MVN      r1,r2
000018  d40c              BMI      |L1.52|
00001a  0409              LSLS     r1,r1,#16
00001c  0c09              LSRS     r1,r1,#16
00001e  d001              BEQ      |L1.36|
000020  0411              LSLS     r1,r2,#16
000022  098b              LSRS     r3,r1,#6
                  |L1.36|
000024  eb040153          ADD      r1,r4,r3,LSR #1
000028  4281              CMP      r1,r0
00002a  d901              BLS      |L1.48|
;;;72         {
;;;73           bank = FLASH_BANK_1;
00002c  2001              MOVS     r0,#1
;;;74         }
;;;75         else
;;;76         {
;;;77           bank = FLASH_BANK_2;
;;;78         }
;;;79       }
;;;80       else
;;;81       {
;;;82       	/* Bank swap */
;;;83         if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
;;;84         {
;;;85           bank = FLASH_BANK_2;
;;;86         }
;;;87         else
;;;88         {
;;;89           bank = FLASH_BANK_1;
;;;90         }
;;;91       }
;;;92       
;;;93       return bank;
;;;94     }
00002e  bd30              POP      {r4,r5,pc}
                  |L1.48|
000030  2002              MOVS     r0,#2                 ;77
000032  bd30              POP      {r4,r5,pc}
                  |L1.52|
000034  0409              LSLS     r1,r1,#16             ;83
000036  0c09              LSRS     r1,r1,#16             ;83
000038  d001              BEQ      |L1.62|
00003a  0411              LSLS     r1,r2,#16             ;83
00003c  098b              LSRS     r3,r1,#6              ;83
                  |L1.62|
00003e  eb040153          ADD      r1,r4,r3,LSR #1       ;83
000042  4281              CMP      r1,r0                 ;83
000044  d901              BLS      |L1.74|
000046  2002              MOVS     r0,#2                 ;85
000048  bd30              POP      {r4,r5,pc}
                  |L1.74|
00004a  2001              MOVS     r0,#1                 ;89
00004c  bd30              POP      {r4,r5,pc}
;;;95     
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40010000
                  |L1.84|
                          DCD      0x1fff75e0

                          AREA ||i.GetPage||, CODE, READONLY, ALIGN=2

                  GetPage PROC
;;;40       */
;;;41     static uint32_t GetPage(uint32_t Addr)
000000  b530              PUSH     {r4,r5,lr}
;;;42     {
;;;43       uint32_t page = 0;
;;;44       
;;;45       if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
000002  4910              LDR      r1,|L2.68|
000004  f44f1380          MOV      r3,#0x100000
000008  6809              LDR      r1,[r1,#0]
00000a  43ca              MVNS     r2,r1
00000c  0414              LSLS     r4,r2,#16
00000e  0c24              LSRS     r4,r4,#16
000010  d00b              BEQ      |L2.42|
000012  040c              LSLS     r4,r1,#16
000014  09a4              LSRS     r4,r4,#6
                  |L2.22|
000016  f04f6500          MOV      r5,#0x8000000
00001a  eb050454          ADD      r4,r5,r4,LSR #1
00001e  4284              CMP      r4,r0
000020  d905              BLS      |L2.46|
;;;46       {
;;;47         /* Bank 1 */
;;;48         page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
000022  f1a06000          SUB      r0,r0,#0x8000000
000026  0ac0              LSRS     r0,r0,#11
;;;49       }
;;;50       else
;;;51       {
;;;52         /* Bank 2 */
;;;53         page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
;;;54       }
;;;55       
;;;56       return page;
;;;57     }
000028  bd30              POP      {r4,r5,pc}
                  |L2.42|
00002a  461c              MOV      r4,r3                 ;45
00002c  e7f3              B        |L2.22|
                  |L2.46|
00002e  0412              LSLS     r2,r2,#16             ;53
000030  0c12              LSRS     r2,r2,#16             ;53
000032  d001              BEQ      |L2.56|
000034  0409              LSLS     r1,r1,#16             ;53
000036  098b              LSRS     r3,r1,#6              ;53
                  |L2.56|
000038  eba00053          SUB      r0,r0,r3,LSR #1       ;53
00003c  f1a06000          SUB      r0,r0,#0x8000000      ;53
000040  0ac0              LSRS     r0,r0,#11             ;53
000042  bd30              POP      {r4,r5,pc}
;;;58     
                          ENDP

                  |L2.68|
                          DCD      0x1fff75e0

                          AREA ||i.HalEePromErase||, CODE, READONLY, ALIGN=2

                  HalEePromErase PROC
;;;96     #define	ERASE_TRY_TIMES	2
;;;97     tErrCode HalEePromErase(tHalEeProm *pEeProm)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;98     {
000004  4605              MOV      r5,r0
;;;99     	static uint32_t FirstPage = 0, NbOfPages = 0, BankNumber = 0;
;;;100    	static uint32_t Address = 0, PAGEError = 0;
;;;101    	__IO uint32_t data32 = 0 , MemoryProgramStatus = 0;
000006  2700              MOVS     r7,#0
000008  9701              STR      r7,[sp,#4]
00000a  9700              STR      r7,[sp,#0]
;;;102    	uint8_t		trytimes;
;;;103      for(trytimes=0; trytimes<ERASE_TRY_TIMES; trytimes++)
00000c  2400              MOVS     r4,#0
;;;104      { 
;;;105    	HAL_FLASH_Unlock();
;;;106    
;;;107      	/* Clear OPTVERR bit set on virgin samples */
;;;108      	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_BSY | FLASH_FLAG_OPTVERR | 
00000e  f8df9070          LDR      r9,|L3.128|
000012  f8dfa070          LDR      r10,|L3.132|
;;;109    						FLASH_FLAG_PROGERR | FLASH_FLAG_PGAERR |
;;;110    						FLASH_FLAG_OPERR 
;;;111    						); 
;;;112      	/* Get the 1st page to erase */
;;;113      	FirstPage = GetPage(pEeProm->StartAddress);
000016  4e1c              LDR      r6,|L3.136|
;;;114      	/* Get the number of pages to erase from 1st page */
;;;115      	NbOfPages = GetPage(pEeProm->StartAddress + pEeProm->Length) - FirstPage + 1;
;;;116      	/* Get the bank */
;;;117      	BankNumber = GetBank(pEeProm->StartAddress);
;;;118      	/* Fill EraseInit structure*/
;;;119      	EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
000018  f8df8070          LDR      r8,|L3.140|
                  |L3.28|
00001c  f7fffffe          BL       HAL_FLASH_Unlock
000020  f8ca9010          STR      r9,[r10,#0x10]        ;108
000024  6828              LDR      r0,[r5,#0]            ;113
000026  f7fffffe          BL       GetPage
00002a  6030              STR      r0,[r6,#0]            ;113  ; FirstPage
00002c  8929              LDRH     r1,[r5,#8]            ;115
00002e  6828              LDR      r0,[r5,#0]            ;115
000030  4408              ADD      r0,r0,r1              ;115
000032  f7fffffe          BL       GetPage
000036  6831              LDR      r1,[r6,#0]            ;115  ; FirstPage
000038  1a40              SUBS     r0,r0,r1              ;115
00003a  1c40              ADDS     r0,r0,#1              ;115
00003c  6070              STR      r0,[r6,#4]            ;115  ; NbOfPages
00003e  6828              LDR      r0,[r5,#0]            ;117
000040  f7fffffe          BL       GetBank
000044  60b0              STR      r0,[r6,#8]            ;117  ; BankNumber
000046  f8c87000          STR      r7,[r8,#0]  ; EraseInitStruct
;;;120      	EraseInitStruct.Banks       = BankNumber;
00004a  f8c80004          STR      r0,[r8,#4]  ; EraseInitStruct
;;;121      	EraseInitStruct.Page        = FirstPage;
00004e  6830              LDR      r0,[r6,#0]  ; FirstPage
000050  f8c80008          STR      r0,[r8,#8]  ; EraseInitStruct
;;;122      	EraseInitStruct.NbPages     = NbOfPages;
000054  6870              LDR      r0,[r6,#4]  ; NbOfPages
000056  f8c8000c          STR      r0,[r8,#0xc]  ; EraseInitStruct
;;;123      	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
00005a  490b              LDR      r1,|L3.136|
00005c  480b              LDR      r0,|L3.140|
00005e  310c              ADDS     r1,r1,#0xc
000060  f7fffffe          BL       HAL_FLASHEx_Erase
000064  b108              CBZ      r0,|L3.106|
;;;124      	{
;;;125      		if(trytimes == (ERASE_TRY_TIMES-1))
000066  2c01              CMP      r4,#1
000068  d006              BEQ      |L3.120|
                  |L3.106|
00006a  1c64              ADDS     r4,r4,#1              ;103
00006c  b2e4              UXTB     r4,r4                 ;103
00006e  2c02              CMP      r4,#2                 ;103
000070  d3d4              BCC      |L3.28|
;;;126      		{
;;;127    	 		return RES_ERROR_FAIL;
;;;128    	 	}
;;;129    	}
;;;130      }
;;;131    	return RES_SUCCESS;
000072  2000              MOVS     r0,#0
                  |L3.116|
;;;132    }
000074  e8bd87fc          POP      {r2-r10,pc}
                  |L3.120|
000078  f06f0016          MVN      r0,#0x16              ;127
00007c  e7fa              B        |L3.116|
;;;133    tErrCode HalEePromWrite(tHalEeProm *pEeProm)
                          ENDP

00007e  0000              DCW      0x0000
                  |L3.128|
                          DCD      0x0001802a
                  |L3.132|
                          DCD      0x40022000
                  |L3.136|
                          DCD      ||.data||
                  |L3.140|
                          DCD      ||.bss||

                          AREA ||i.HalEePromRead||, CODE, READONLY, ALIGN=1

                  HalEePromRead PROC
;;;158    }
;;;159    tErrCode HalEePromRead(tHalEeProm *pEeProm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;160    {
;;;161    	uint8_t		AligmentStatus;
;;;162    	uint8_t		u8;
;;;163    	uint32_t	i,address;
;;;164    	union{
;;;165    		uint8_t		b[4];
;;;166    		uint32_t	dat;
;;;167    	}U32Dat;
;;;168    	//char	str[100];
;;;169    	
;;;170    	address = pEeProm->StartAddress;
000002  6803              LDR      r3,[r0,#0]
;;;171    	if((address&0x03))
000004  0799              LSLS     r1,r3,#30
000006  d002              BEQ      |L4.14|
;;;172    		return RES_ERROR_INVALID_PARAM;
000008  f06f0002          MVN      r0,#2
;;;173    		
;;;174    	if(((uint32_t)pEeProm->pDataBuffer & 0x07) == 0)
;;;175    		AligmentStatus = 1;
;;;176    	else
;;;177    		AligmentStatus = 0;	
;;;178    //	sprintf(str,"%.8lX %.8lX %d",address, pEeProm->StartAddress,pEeProm->Length);
;;;179    //	HalRtcDebugMsg(str);
;;;180    	
;;;181    	for(i=0; i<pEeProm->Length; )
;;;182    	{
;;;183    		U32Dat.dat = *(__IO uint32_t *)(address);
;;;184    		address += 4;
;;;185    		for(u8=0; u8<4; u8++)
;;;186    			pEeProm->pDataBuffer[i++] = U32Dat.b[u8];
;;;187    	}	
;;;188    	return RES_SUCCESS;
;;;189    }
00000c  bdf8              POP      {r3-r7,pc}
                  |L4.14|
00000e  2200              MOVS     r2,#0                 ;181
000010  466c              MOV      r4,sp                 ;167
000012  e00b              B        |L4.44|
                  |L4.20|
000014  cb02              LDM      r3!,{r1}              ;183
000016  9100              STR      r1,[sp,#0]            ;183
000018  2100              MOVS     r1,#0                 ;185
                  |L4.26|
00001a  68c7              LDR      r7,[r0,#0xc]          ;186
00001c  4615              MOV      r5,r2                 ;186
00001e  5c66              LDRB     r6,[r4,r1]            ;186
000020  1c52              ADDS     r2,r2,#1              ;186
000022  557e              STRB     r6,[r7,r5]            ;186
000024  1c49              ADDS     r1,r1,#1              ;185
000026  b2c9              UXTB     r1,r1                 ;185
000028  2904              CMP      r1,#4                 ;185
00002a  d3f6              BCC      |L4.26|
                  |L4.44|
00002c  8901              LDRH     r1,[r0,#8]            ;181
00002e  4291              CMP      r1,r2                 ;181
000030  d8f0              BHI      |L4.20|
000032  2000              MOVS     r0,#0                 ;188
000034  bdf8              POP      {r3-r7,pc}
;;;190    
                          ENDP


                          AREA ||i.HalEePromWrite||, CODE, READONLY, ALIGN=2

                  HalEePromWrite PROC
;;;132    }
;;;133    tErrCode HalEePromWrite(tHalEeProm *pEeProm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;134    {
000004  4606              MOV      r6,r0
;;;135    	uint8_t		u8;
;;;136    	uint32_t	i,address;
;;;137    	union{
;;;138    		uint8_t		b[8];
;;;139    		uint64_t	dat;
;;;140    	}U64Dat;
;;;141    
;;;142    	HAL_FLASH_Unlock();
000006  f7fffffe          BL       HAL_FLASH_Unlock
;;;143      __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS); 
00000a  4816              LDR      r0,|L5.100|
00000c  6981              LDR      r1,[r0,#0x18]
00000e  f0414140          ORR      r1,r1,#0xc0000000
000012  6181              STR      r1,[r0,#0x18]
000014  f24c31fa          MOV      r1,#0xc3fa
000018  6101              STR      r1,[r0,#0x10]
;;;144    
;;;145    	address = pEeProm->StartAddress;
00001a  6835              LDR      r5,[r6,#0]
;;;146    	if((address&0x07))
00001c  0768              LSLS     r0,r5,#29
00001e  d003              BEQ      |L5.40|
;;;147    		return RES_ERROR_INVALID_PARAM;
000020  f06f0002          MVN      r0,#2
                  |L5.36|
;;;148    	for(i=0; i<pEeProm->Length; )
;;;149    	{
;;;150    		for(u8=0; u8<8; u8++)
;;;151    			U64Dat.b[u8] = pEeProm->pDataBuffer[i++];
;;;152    		//dat = *(uint64_t *)&pEeProm->pDataBuffer[i];
;;;153    	    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, U64Dat.dat) != HAL_OK)
;;;154    	    	return RES_ERROR_FAIL;
;;;155    		address += 8;
;;;156    	}
;;;157    	return RES_SUCCESS;	
;;;158    }
000024  e8bd81fc          POP      {r2-r8,pc}
                  |L5.40|
000028  2400              MOVS     r4,#0                 ;148
00002a  466f              MOV      r7,sp                 ;140
00002c  e014              B        |L5.88|
                  |L5.46|
00002e  2200              MOVS     r2,#0                 ;150
000030  68f0              LDR      r0,[r6,#0xc]          ;151
                  |L5.50|
000032  4621              MOV      r1,r4                 ;151
000034  1c64              ADDS     r4,r4,#1              ;151
000036  5c41              LDRB     r1,[r0,r1]            ;151
000038  54b9              STRB     r1,[r7,r2]            ;151
00003a  1c52              ADDS     r2,r2,#1              ;150
00003c  b2d2              UXTB     r2,r2                 ;150
00003e  2a08              CMP      r2,#8                 ;150
000040  d3f7              BCC      |L5.50|
000042  e9dd2300          LDRD     r2,r3,[sp,#0]         ;153
000046  4629              MOV      r1,r5                 ;153
000048  2000              MOVS     r0,#0                 ;153
00004a  f7fffffe          BL       HAL_FLASH_Program
00004e  b110              CBZ      r0,|L5.86|
000050  f06f0016          MVN      r0,#0x16              ;154
000054  e7e6              B        |L5.36|
                  |L5.86|
000056  3508              ADDS     r5,r5,#8              ;155
                  |L5.88|
000058  8930              LDRH     r0,[r6,#8]            ;148
00005a  42a0              CMP      r0,r4                 ;148
00005c  d8e7              BHI      |L5.46|
00005e  2000              MOVS     r0,#0                 ;157
000060  e7e0              B        |L5.36|
;;;159    tErrCode HalEePromRead(tHalEeProm *pEeProm)
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
                          DCD      0x40022000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  EraseInitStruct
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  FirstPage
                          DCD      0x00000000
                  NbOfPages
                          DCD      0x00000000
                  BankNumber
                          DCD      0x00000000
                  PAGEError
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\HAL\\HalEEPromSTM32L4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____REVSH|
#line 507
|__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____RRX|
#line 694
|__asm___20_HalEEPromSTM32L4xx_c_b9fe9e03____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
