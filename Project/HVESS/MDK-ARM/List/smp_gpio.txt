; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_gpio.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_gpio.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\SMP\smp_gpio.c]
                          THUMB

                          AREA ||i.SMP_GPIO_MODE||, CODE, READONLY, ALIGN=2

                  SMP_GPIO_MODE PROC
;;;91     
;;;92     uint32_t SMP_GPIO_MODE(gpio_mode mode)
000000  2807              CMP      r0,#7
;;;93     {
;;;94     	switch(mode){
000002  d209              BCS      |L1.24|
000004  e8dff000          TBB      [pc,r0]
000008  0406080a          DCB      0x04,0x06,0x08,0x0a
00000c  0c0e1000          DCB      0x0c,0x0e,0x10,0x00
;;;95     		case GPIO_MODE_INPUT:									return GPIO_MODE_INPUT;
000010  2000              MOVS     r0,#0
;;;96     		case SMP_GPIO_MODE_OUTPUT_PP:					return GPIO_MODE_OUTPUT_PP;
;;;97     		default:
;;;98     		case SMP_GPIO_MODE_OUTPUT_OD:					return GPIO_MODE_OUTPUT_OD;
;;;99     		case SMP_GPIO_MODE_ANALOG:						return GPIO_MODE_ANALOG;
;;;100    		case SMP_GPIO_MODE_IT_RISING:					return GPIO_MODE_IT_RISING;
;;;101    		case SMP_GPIO_MODE_IT_FALLING:				return GPIO_MODE_IT_FALLING;
;;;102    		case SMP_GPIO_MODE_IT_RISING_FALLING:	return GPIO_MODE_IT_RISING_FALLING;
;;;103    	}
;;;104    }
000012  4770              BX       lr
000014  2001              MOVS     r0,#1                 ;96
000016  4770              BX       lr
                  |L1.24|
000018  2011              MOVS     r0,#0x11              ;98
00001a  4770              BX       lr
00001c  2003              MOVS     r0,#3                 ;99
00001e  4770              BX       lr
000020  4802              LDR      r0,|L1.44|
000022  4770              BX       lr
000024  4802              LDR      r0,|L1.48|
000026  4770              BX       lr
000028  4802              LDR      r0,|L1.52|
00002a  4770              BX       lr
;;;105    
                          ENDP

                  |L1.44|
                          DCD      0x10110000
                  |L1.48|
                          DCD      0x10210000
                  |L1.52|
                          DCD      0x10310000

                          AREA ||i.SMP_GPIO_PIN||, CODE, READONLY, ALIGN=1

                  SMP_GPIO_PIN PROC
;;;105    
;;;106    uint16_t SMP_GPIO_PIN(gpio_pin pin)
000000  2810              CMP      r0,#0x10
;;;107    {
;;;108    	switch(pin){
000002  d209              BCS      |L2.24|
000004  e8dff000          TBB      [pc,r0]
000008  080a0c0e          DCB      0x08,0x0a,0x0c,0x0e
00000c  10121416          DCB      0x10,0x12,0x14,0x16
000010  181b1e21          DCB      0x18,0x1b,0x1e,0x21
000014  24272a2d          DCB      0x24,0x27,0x2a,0x2d
                  |L2.24|
;;;109    		default:
;;;110    		case PIN0:	return GPIO_PIN_0;
000018  2001              MOVS     r0,#1
;;;111    		case PIN1:	return GPIO_PIN_1;
;;;112    		case PIN2:	return GPIO_PIN_2;
;;;113    		case PIN3:	return GPIO_PIN_3;
;;;114    		case PIN4:	return GPIO_PIN_4;
;;;115    		case PIN5:	return GPIO_PIN_5;
;;;116    		case PIN6:	return GPIO_PIN_6;
;;;117    		case PIN7:	return GPIO_PIN_7;
;;;118    		case PIN8:	return GPIO_PIN_8;
;;;119    		case PIN9:	return GPIO_PIN_9;
;;;120    		case PIN10:	return GPIO_PIN_10;
;;;121    		case PIN11:	return GPIO_PIN_11;
;;;122    		case PIN12:	return GPIO_PIN_12;
;;;123    		case PIN13:	return GPIO_PIN_13;
;;;124    		case PIN14:	return GPIO_PIN_14;
;;;125    		case PIN15:	return GPIO_PIN_15;			
;;;126    	}
;;;127    }
00001a  4770              BX       lr
00001c  2002              MOVS     r0,#2                 ;111
00001e  4770              BX       lr
000020  2004              MOVS     r0,#4                 ;112
000022  4770              BX       lr
000024  2008              MOVS     r0,#8                 ;113
000026  4770              BX       lr
000028  2010              MOVS     r0,#0x10              ;114
00002a  4770              BX       lr
00002c  2020              MOVS     r0,#0x20              ;115
00002e  4770              BX       lr
000030  2040              MOVS     r0,#0x40              ;116
000032  4770              BX       lr
000034  2080              MOVS     r0,#0x80              ;117
000036  4770              BX       lr
000038  f44f7080          MOV      r0,#0x100             ;118
00003c  4770              BX       lr
00003e  f44f7000          MOV      r0,#0x200             ;119
000042  4770              BX       lr
000044  f44f6080          MOV      r0,#0x400             ;120
000048  4770              BX       lr
00004a  f44f6000          MOV      r0,#0x800             ;121
00004e  4770              BX       lr
000050  f44f5080          MOV      r0,#0x1000            ;122
000054  4770              BX       lr
000056  f44f5000          MOV      r0,#0x2000            ;123
00005a  4770              BX       lr
00005c  f44f4080          MOV      r0,#0x4000            ;124
000060  4770              BX       lr
000062  f44f4000          MOV      r0,#0x8000            ;125
000066  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i.SMP_GPIO_PORT||, CODE, READONLY, ALIGN=2

                  SMP_GPIO_PORT PROC
;;;128    
;;;129    GPIO_TypeDef* SMP_GPIO_PORT(gpio_port port)
000000  2807              CMP      r0,#7
;;;130    {
;;;131    	switch(port){
000002  d205              BCS      |L3.16|
000004  e8dff000          TBB      [pc,r0]
000008  0407090b          DCB      0x04,0x07,0x09,0x0b
00000c  0d0f1100          DCB      0x0d,0x0f,0x11,0x00
                  |L3.16|
;;;132    		default:
;;;133    		case SMP_GPIOA:	return GPIOA;
000010  f04f4090          MOV      r0,#0x48000000
;;;134    		case SMP_GPIOB:	return GPIOB;
;;;135    		case SMP_GPIOC:	return GPIOC;
;;;136    		case SMP_GPIOD:	return GPIOD;
;;;137    		case SMP_GPIOE:	return GPIOE;
;;;138    		case SMP_GPIOF:	return GPIOF;
;;;139    		case SMP_GPIOG:	return GPIOG;
;;;140    	}
;;;141    }
000014  4770              BX       lr
000016  4806              LDR      r0,|L3.48|
000018  4770              BX       lr
00001a  4806              LDR      r0,|L3.52|
00001c  4770              BX       lr
00001e  4806              LDR      r0,|L3.56|
000020  4770              BX       lr
000022  4806              LDR      r0,|L3.60|
000024  4770              BX       lr
000026  4806              LDR      r0,|L3.64|
000028  4770              BX       lr
00002a  4806              LDR      r0,|L3.68|
00002c  4770              BX       lr
;;;142    
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      0x48000400
                  |L3.52|
                          DCD      0x48000800
                  |L3.56|
                          DCD      0x48000c00
                  |L3.60|
                          DCD      0x48001000
                  |L3.64|
                          DCD      0x48001400
                  |L3.68|
                          DCD      0x48001800

                          AREA ||i.smp_gpio_deinit||, CODE, READONLY, ALIGN=2

                  smp_gpio_deinit PROC
;;;53     
;;;54     int8_t smp_gpio_deinit(smp_gpio_t *p_gpio)
000000  b510              PUSH     {r4,lr}
;;;55     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;56     	GPIO_InitTypeDef  GPIO_InitStruct;
;;;57     	/* Enable the GPIO Clock */
;;;58     	SMP_GPIO_CLK_ENABLE(p_gpio->port);
000006  4937              LDR      r1,|L4.228|
000008  7820              LDRB     r0,[r4,#0]
00000a  2800              CMP      r0,#0
00000c  d00c              BEQ      |L4.40|
00000e  2801              CMP      r0,#1
000010  d013              BEQ      |L4.58|
000012  2802              CMP      r0,#2
000014  d01a              BEQ      |L4.76|
000016  2803              CMP      r0,#3
000018  d021              BEQ      |L4.94|
00001a  2804              CMP      r0,#4
00001c  d028              BEQ      |L4.112|
00001e  2805              CMP      r0,#5
000020  d02f              BEQ      |L4.130|
000022  2806              CMP      r0,#6
000024  d036              BEQ      |L4.148|
000026  e03f              B        |L4.168|
                  |L4.40|
000028  6cc8              LDR      r0,[r1,#0x4c]
00002a  f0400001          ORR      r0,r0,#1
00002e  64c8              STR      r0,[r1,#0x4c]
000030  6cc8              LDR      r0,[r1,#0x4c]
000032  f0000001          AND      r0,r0,#1
000036  9000              STR      r0,[sp,#0]
000038  e036              B        |L4.168|
                  |L4.58|
00003a  6cc8              LDR      r0,[r1,#0x4c]
00003c  f0400002          ORR      r0,r0,#2
000040  64c8              STR      r0,[r1,#0x4c]
000042  6cc8              LDR      r0,[r1,#0x4c]
000044  f0000002          AND      r0,r0,#2
000048  9000              STR      r0,[sp,#0]
00004a  e02d              B        |L4.168|
                  |L4.76|
00004c  6cc8              LDR      r0,[r1,#0x4c]
00004e  f0400004          ORR      r0,r0,#4
000052  64c8              STR      r0,[r1,#0x4c]
000054  6cc8              LDR      r0,[r1,#0x4c]
000056  f0000004          AND      r0,r0,#4
00005a  9000              STR      r0,[sp,#0]
00005c  e024              B        |L4.168|
                  |L4.94|
00005e  6cc8              LDR      r0,[r1,#0x4c]
000060  f0400008          ORR      r0,r0,#8
000064  64c8              STR      r0,[r1,#0x4c]
000066  6cc8              LDR      r0,[r1,#0x4c]
000068  f0000008          AND      r0,r0,#8
00006c  9000              STR      r0,[sp,#0]
00006e  e01b              B        |L4.168|
                  |L4.112|
000070  6cc8              LDR      r0,[r1,#0x4c]
000072  f0400010          ORR      r0,r0,#0x10
000076  64c8              STR      r0,[r1,#0x4c]
000078  6cc8              LDR      r0,[r1,#0x4c]
00007a  f0000010          AND      r0,r0,#0x10
00007e  9000              STR      r0,[sp,#0]
000080  e012              B        |L4.168|
                  |L4.130|
000082  6cc8              LDR      r0,[r1,#0x4c]
000084  f0400020          ORR      r0,r0,#0x20
000088  64c8              STR      r0,[r1,#0x4c]
00008a  6cc8              LDR      r0,[r1,#0x4c]
00008c  f0000020          AND      r0,r0,#0x20
000090  9000              STR      r0,[sp,#0]
000092  e009              B        |L4.168|
                  |L4.148|
000094  6cc8              LDR      r0,[r1,#0x4c]
000096  f0400040          ORR      r0,r0,#0x40
00009a  64c8              STR      r0,[r1,#0x4c]
00009c  6cc8              LDR      r0,[r1,#0x4c]
00009e  f0000040          AND      r0,r0,#0x40
0000a2  9000              STR      r0,[sp,#0]
0000a4  f7fffffe          BL       HAL_PWREx_EnableVddIO2
                  |L4.168|
;;;59     	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
0000a8  2003              MOVS     r0,#3
0000aa  9002              STR      r0,[sp,#8]
;;;60     	GPIO_InitStruct.Pull = GPIO_NOPULL;
0000ac  2000              MOVS     r0,#0
0000ae  9003              STR      r0,[sp,#0xc]
;;;61     	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
0000b0  2002              MOVS     r0,#2
0000b2  9004              STR      r0,[sp,#0x10]
;;;62     	GPIO_InitStruct.Pin = SMP_GPIO_PIN(p_gpio->pin);
0000b4  7860              LDRB     r0,[r4,#1]
0000b6  f7fffffe          BL       SMP_GPIO_PIN
0000ba  9001              STR      r0,[sp,#4]
;;;63     	HAL_GPIO_Init(SMP_GPIO_PORT(p_gpio->port), &GPIO_InitStruct);
0000bc  7820              LDRB     r0,[r4,#0]
0000be  f7fffffe          BL       SMP_GPIO_PORT
0000c2  a901              ADD      r1,sp,#4
0000c4  f7fffffe          BL       HAL_GPIO_Init
;;;64     	HAL_GPIO_DeInit(SMP_GPIO_PORT(p_gpio->port), SMP_GPIO_PIN(p_gpio->pin));	
0000c8  7860              LDRB     r0,[r4,#1]
0000ca  f7fffffe          BL       SMP_GPIO_PIN
0000ce  4602              MOV      r2,r0
0000d0  7820              LDRB     r0,[r4,#0]
0000d2  f7fffffe          BL       SMP_GPIO_PORT
0000d6  4611              MOV      r1,r2
0000d8  f7fffffe          BL       HAL_GPIO_DeInit
;;;65     	return SMP_SUCCESS;
;;;66     }
0000dc  b006              ADD      sp,sp,#0x18
0000de  2000              MOVS     r0,#0                 ;65
0000e0  bd10              POP      {r4,pc}
;;;67     
                          ENDP

0000e2  0000              DCW      0x0000
                  |L4.228|
                          DCD      0x40021000

                          AREA ||i.smp_gpio_get_state||, CODE, READONLY, ALIGN=1

                  smp_gpio_get_state PROC
;;;85     
;;;86     int8_t smp_gpio_get_state(smp_gpio_t *p_gpio, smp_gpio_state *state)
000000  b510              PUSH     {r4,lr}
;;;87     {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;88     	*state = (smp_gpio_state)HAL_GPIO_ReadPin(SMP_GPIO_PORT(p_gpio->port), SMP_GPIO_PIN(p_gpio->pin));
000006  7850              LDRB     r0,[r2,#1]
000008  f7fffffe          BL       SMP_GPIO_PIN
00000c  4603              MOV      r3,r0
00000e  7810              LDRB     r0,[r2,#0]
000010  f7fffffe          BL       SMP_GPIO_PORT
000014  4619              MOV      r1,r3
000016  f7fffffe          BL       HAL_GPIO_ReadPin
00001a  7020              STRB     r0,[r4,#0]
;;;89     	return SMP_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;90     }
00001e  bd10              POP      {r4,pc}
;;;91     
                          ENDP


                          AREA ||i.smp_gpio_init||, CODE, READONLY, ALIGN=2

                  smp_gpio_init PROC
;;;40     											   
;;;41     int8_t smp_gpio_init(smp_gpio_t *p_gpio)
000000  b510              PUSH     {r4,lr}
;;;42     {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;43     	GPIO_InitTypeDef  GPIO_InitStruct;
;;;44     	/* Enable the GPIO Clock */
;;;45     	SMP_GPIO_CLK_ENABLE(p_gpio->port);
000006  4a33              LDR      r2,|L6.212|
000008  7821              LDRB     r1,[r4,#0]
00000a  2900              CMP      r1,#0
00000c  d00c              BEQ      |L6.40|
00000e  2901              CMP      r1,#1
000010  d013              BEQ      |L6.58|
000012  2902              CMP      r1,#2
000014  d01a              BEQ      |L6.76|
000016  2903              CMP      r1,#3
000018  d021              BEQ      |L6.94|
00001a  2904              CMP      r1,#4
00001c  d028              BEQ      |L6.112|
00001e  2905              CMP      r1,#5
000020  d02f              BEQ      |L6.130|
000022  2906              CMP      r1,#6
000024  d036              BEQ      |L6.148|
000026  e03f              B        |L6.168|
                  |L6.40|
000028  6cd0              LDR      r0,[r2,#0x4c]
00002a  f0400001          ORR      r0,r0,#1
00002e  64d0              STR      r0,[r2,#0x4c]
000030  6cd0              LDR      r0,[r2,#0x4c]
000032  f0000001          AND      r0,r0,#1
000036  9000              STR      r0,[sp,#0]
000038  e036              B        |L6.168|
                  |L6.58|
00003a  6cd0              LDR      r0,[r2,#0x4c]
00003c  f0400002          ORR      r0,r0,#2
000040  64d0              STR      r0,[r2,#0x4c]
000042  6cd0              LDR      r0,[r2,#0x4c]
000044  f0000002          AND      r0,r0,#2
000048  9000              STR      r0,[sp,#0]
00004a  e02d              B        |L6.168|
                  |L6.76|
00004c  6cd0              LDR      r0,[r2,#0x4c]
00004e  f0400004          ORR      r0,r0,#4
000052  64d0              STR      r0,[r2,#0x4c]
000054  6cd0              LDR      r0,[r2,#0x4c]
000056  f0000004          AND      r0,r0,#4
00005a  9000              STR      r0,[sp,#0]
00005c  e024              B        |L6.168|
                  |L6.94|
00005e  6cd0              LDR      r0,[r2,#0x4c]
000060  f0400008          ORR      r0,r0,#8
000064  64d0              STR      r0,[r2,#0x4c]
000066  6cd0              LDR      r0,[r2,#0x4c]
000068  f0000008          AND      r0,r0,#8
00006c  9000              STR      r0,[sp,#0]
00006e  e01b              B        |L6.168|
                  |L6.112|
000070  6cd0              LDR      r0,[r2,#0x4c]
000072  f0400010          ORR      r0,r0,#0x10
000076  64d0              STR      r0,[r2,#0x4c]
000078  6cd0              LDR      r0,[r2,#0x4c]
00007a  f0000010          AND      r0,r0,#0x10
00007e  9000              STR      r0,[sp,#0]
000080  e012              B        |L6.168|
                  |L6.130|
000082  6cd0              LDR      r0,[r2,#0x4c]
000084  f0400020          ORR      r0,r0,#0x20
000088  64d0              STR      r0,[r2,#0x4c]
00008a  6cd0              LDR      r0,[r2,#0x4c]
00008c  f0000020          AND      r0,r0,#0x20
000090  9000              STR      r0,[sp,#0]
000092  e009              B        |L6.168|
                  |L6.148|
000094  6cd0              LDR      r0,[r2,#0x4c]
000096  f0400040          ORR      r0,r0,#0x40
00009a  64d0              STR      r0,[r2,#0x4c]
00009c  6cd0              LDR      r0,[r2,#0x4c]
00009e  f0000040          AND      r0,r0,#0x40
0000a2  9000              STR      r0,[sp,#0]
0000a4  f7fffffe          BL       HAL_PWREx_EnableVddIO2
                  |L6.168|
;;;46     	GPIO_InitStruct.Mode = SMP_GPIO_MODE(p_gpio->mode);
0000a8  78a0              LDRB     r0,[r4,#2]
0000aa  f7fffffe          BL       SMP_GPIO_MODE
0000ae  9002              STR      r0,[sp,#8]
;;;47     	GPIO_InitStruct.Pull = GPIO_PULLUP;
0000b0  2001              MOVS     r0,#1
0000b2  9003              STR      r0,[sp,#0xc]
;;;48     	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
0000b4  2002              MOVS     r0,#2
0000b6  9004              STR      r0,[sp,#0x10]
;;;49     	GPIO_InitStruct.Pin = SMP_GPIO_PIN(p_gpio->pin);
0000b8  7860              LDRB     r0,[r4,#1]
0000ba  f7fffffe          BL       SMP_GPIO_PIN
0000be  9001              STR      r0,[sp,#4]
;;;50     	HAL_GPIO_Init(SMP_GPIO_PORT(p_gpio->port), &GPIO_InitStruct);
0000c0  7820              LDRB     r0,[r4,#0]
0000c2  f7fffffe          BL       SMP_GPIO_PORT
0000c6  a901              ADD      r1,sp,#4
0000c8  f7fffffe          BL       HAL_GPIO_Init
;;;51     	return SMP_SUCCESS;
;;;52     }
0000cc  b006              ADD      sp,sp,#0x18
0000ce  2000              MOVS     r0,#0                 ;51
0000d0  bd10              POP      {r4,pc}
;;;53     
                          ENDP

0000d2  0000              DCW      0x0000
                  |L6.212|
                          DCD      0x40021000

                          AREA ||i.smp_gpio_set_state||, CODE, READONLY, ALIGN=1

                  smp_gpio_set_state PROC
;;;67     
;;;68     int8_t smp_gpio_set_state(smp_gpio_t *p_gpio, smp_gpio_state state)
000000  b510              PUSH     {r4,lr}
;;;69     {
000002  4602              MOV      r2,r0
;;;70     	switch(state){
000004  2900              CMP      r1,#0
000006  d006              BEQ      |L7.22|
000008  2901              CMP      r1,#1
00000a  d010              BEQ      |L7.46|
00000c  2902              CMP      r1,#2
00000e  d01a              BEQ      |L7.70|
;;;71     		case GPIO_ACTIVE_LOW:
;;;72     			HAL_GPIO_WritePin(SMP_GPIO_PORT(p_gpio->port), SMP_GPIO_PIN(p_gpio->pin), GPIO_PIN_RESET);
;;;73     			break;
;;;74     		case GPIO_ACTIVE_HIGH:
;;;75     			HAL_GPIO_WritePin(SMP_GPIO_PORT(p_gpio->port), SMP_GPIO_PIN(p_gpio->pin), GPIO_PIN_SET);
;;;76     			break;
;;;77     		case GPIO_ACTIVE_TOGGLE:
;;;78     			HAL_GPIO_TogglePin(SMP_GPIO_PORT(p_gpio->port), SMP_GPIO_PIN(p_gpio->pin));
;;;79     			break;		
;;;80     		default: 
;;;81     			return SMP_ERROR_INVALID_PARAM;
000010  f06f0002          MVN      r0,#2
;;;82     	}
;;;83     	return SMP_SUCCESS;
;;;84     }
000014  bd10              POP      {r4,pc}
                  |L7.22|
000016  7850              LDRB     r0,[r2,#1]            ;72
000018  f7fffffe          BL       SMP_GPIO_PIN
00001c  4603              MOV      r3,r0                 ;72
00001e  7810              LDRB     r0,[r2,#0]            ;72
000020  f7fffffe          BL       SMP_GPIO_PORT
000024  2200              MOVS     r2,#0                 ;72
000026  4619              MOV      r1,r3                 ;72
000028  f7fffffe          BL       HAL_GPIO_WritePin
00002c  e015              B        |L7.90|
                  |L7.46|
00002e  7850              LDRB     r0,[r2,#1]            ;75
000030  f7fffffe          BL       SMP_GPIO_PIN
000034  4603              MOV      r3,r0                 ;75
000036  7810              LDRB     r0,[r2,#0]            ;75
000038  f7fffffe          BL       SMP_GPIO_PORT
00003c  2201              MOVS     r2,#1                 ;75
00003e  4619              MOV      r1,r3                 ;75
000040  f7fffffe          BL       HAL_GPIO_WritePin
000044  e009              B        |L7.90|
                  |L7.70|
000046  7850              LDRB     r0,[r2,#1]            ;78
000048  f7fffffe          BL       SMP_GPIO_PIN
00004c  4603              MOV      r3,r0                 ;78
00004e  7810              LDRB     r0,[r2,#0]            ;78
000050  f7fffffe          BL       SMP_GPIO_PORT
000054  4619              MOV      r1,r3                 ;78
000056  f7fffffe          BL       HAL_GPIO_TogglePin
                  |L7.90|
00005a  2000              MOVS     r0,#0                 ;83
00005c  bd10              POP      {r4,pc}
;;;85     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\SMP\\smp_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_smp_gpio_c_26271e2e____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___10_smp_gpio_c_26271e2e____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_smp_gpio_c_26271e2e____REVSH|
#line 507
|__asm___10_smp_gpio_c_26271e2e____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_smp_gpio_c_26271e2e____RRX|
#line 694
|__asm___10_smp_gpio_c_26271e2e____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
