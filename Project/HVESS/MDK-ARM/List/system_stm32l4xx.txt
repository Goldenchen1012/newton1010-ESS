; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\system_stm32l4xx.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\system_stm32l4xx.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\User\system_stm32l4xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;258      */
;;;259    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
;;;261      uint32_t tmp = 0, msirange = 0, pllvco = 0, pllr = 2, pllsource = 0, pllm = 2;
;;;262    
;;;263      /* Get MSI Range frequency--------------------------------------------------*/
;;;264      if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
000002  4c26              LDR      r4,|L1.156|
000004  6820              LDR      r0,[r4,#0]
000006  0700              LSLS     r0,r0,#28
000008  d404              BMI      |L1.20|
;;;265      { /* MSISRANGE from RCC_CSR applies */
;;;266        msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
00000a  f8d40094          LDR      r0,[r4,#0x94]
00000e  f3c02003          UBFX     r0,r0,#8,#4
000012  e002              B        |L1.26|
                  |L1.20|
;;;267      }
;;;268      else
;;;269      { /* MSIRANGE from RCC_CR applies */
;;;270        msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
000014  6820              LDR      r0,[r4,#0]
000016  f3c01003          UBFX     r0,r0,#4,#4
                  |L1.26|
;;;271      }
;;;272      /*MSI frequency range in HZ*/
;;;273      msirange = MSIRangeTable[msirange];
00001a  4921              LDR      r1,|L1.160|
00001c  f8511020          LDR      r1,[r1,r0,LSL #2]
;;;274    
;;;275      /* Get SYSCLK source -------------------------------------------------------*/
;;;276      switch (RCC->CFGR & RCC_CFGR_SWS)
000020  68a0              LDR      r0,[r4,#8]
;;;277      {
;;;278        case 0x00:  /* MSI used as system clock source */
;;;279          SystemCoreClock = msirange;
000022  4a20              LDR      r2,|L1.164|
000024  f010000c          ANDS     r0,r0,#0xc            ;276
000028  d012              BEQ      |L1.80|
;;;280          break;
;;;281    
;;;282        case 0x04:  /* HSI used as system clock source */
;;;283          SystemCoreClock = HSI_VALUE;
00002a  4d1f              LDR      r5,|L1.168|
00002c  2804              CMP      r0,#4                 ;276
00002e  d011              BEQ      |L1.84|
;;;284          break;
;;;285    
;;;286        case 0x08:  /* HSE used as system clock source */
;;;287          SystemCoreClock = HSE_VALUE;
000030  106e              ASRS     r6,r5,#1
000032  2808              CMP      r0,#8                 ;276
000034  d010              BEQ      |L1.88|
000036  280c              CMP      r0,#0xc               ;276
000038  d010              BEQ      |L1.92|
;;;288          break;
;;;289    
;;;290        case 0x0C:  /* PLL used as system clock  source */
;;;291          /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
;;;292             SYSCLK = PLL_VCO / PLLR
;;;293             */
;;;294          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
;;;295          pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
;;;296    
;;;297          switch (pllsource)
;;;298          {
;;;299            case 0x02:  /* HSI used as PLL clock source */
;;;300              pllvco = (HSI_VALUE / pllm);
;;;301              break;
;;;302    
;;;303            case 0x03:  /* HSE used as PLL clock source */
;;;304              pllvco = (HSE_VALUE / pllm);
;;;305              break;
;;;306    
;;;307            default:    /* MSI used as PLL clock source */
;;;308              pllvco = (msirange / pllm);
;;;309              break;
;;;310          }
;;;311          pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
;;;312          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
;;;313          SystemCoreClock = pllvco/pllr;
;;;314          break;
;;;315    
;;;316        default:
;;;317          SystemCoreClock = msirange;
00003a  6011              STR      r1,[r2,#0]  ; SystemCoreClock
                  |L1.60|
;;;318          break;
;;;319      }
;;;320      /* Compute HCLK clock frequency --------------------------------------------*/
;;;321      /* Get HCLK prescaler */
;;;322      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00003c  68a0              LDR      r0,[r4,#8]
00003e  4918              LDR      r1,|L1.160|
000040  f3c01003          UBFX     r0,r0,#4,#4
000044  3910              SUBS     r1,r1,#0x10
000046  5c08              LDRB     r0,[r1,r0]
;;;323      /* HCLK clock frequency */
;;;324      SystemCoreClock >>= tmp;
000048  6811              LDR      r1,[r2,#0]  ; SystemCoreClock
00004a  40c1              LSRS     r1,r1,r0
00004c  6011              STR      r1,[r2,#0]  ; SystemCoreClock
;;;325    }
00004e  bd70              POP      {r4-r6,pc}
                  |L1.80|
000050  6011              STR      r1,[r2,#0]            ;279  ; SystemCoreClock
000052  e7f3              B        |L1.60|
                  |L1.84|
000054  6015              STR      r5,[r2,#0]            ;283  ; SystemCoreClock
000056  e7f1              B        |L1.60|
                  |L1.88|
000058  6016              STR      r6,[r2,#0]            ;287  ; SystemCoreClock
00005a  e7ef              B        |L1.60|
                  |L1.92|
00005c  68e0              LDR      r0,[r4,#0xc]          ;294
00005e  f0000303          AND      r3,r0,#3              ;294
000062  68e0              LDR      r0,[r4,#0xc]          ;295
000064  f3c01002          UBFX     r0,r0,#4,#3           ;295
000068  1c40              ADDS     r0,r0,#1              ;295
00006a  2b02              CMP      r3,#2                 ;297
00006c  d010              BEQ      |L1.144|
00006e  2b03              CMP      r3,#3                 ;297
000070  d011              BEQ      |L1.150|
000072  fbb1f0f0          UDIV     r0,r1,r0              ;308
                  |L1.118|
000076  68e1              LDR      r1,[r4,#0xc]          ;311
000078  f3c12106          UBFX     r1,r1,#8,#7           ;311
00007c  4341              MULS     r1,r0,r1              ;311
00007e  68e0              LDR      r0,[r4,#0xc]          ;312
000080  f3c06041          UBFX     r0,r0,#25,#2          ;312
000084  1c40              ADDS     r0,r0,#1              ;312
000086  0040              LSLS     r0,r0,#1              ;312
000088  fbb1f0f0          UDIV     r0,r1,r0              ;313
00008c  6010              STR      r0,[r2,#0]            ;313  ; SystemCoreClock
00008e  e7d5              B        |L1.60|
                  |L1.144|
000090  fbb5f0f0          UDIV     r0,r5,r0              ;300
000094  e7ef              B        |L1.118|
                  |L1.150|
000096  fbb6f0f0          UDIV     r0,r6,r0              ;304
00009a  e7ec              B        |L1.118|
;;;326    
                          ENDP

                  |L1.156|
                          DCD      0x40021000
                  |L1.160|
                          DCD      ||.constdata||+0x10
                  |L1.164|
                          DCD      ||.data||
                  |L1.168|
                          DCD      0x00f42400

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;183    
;;;184    void SystemInit(void)
000000  480d              LDR      r0,|L2.56|
;;;185    {
;;;186      /* FPU settings ------------------------------------------------------------*/
;;;187      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;188        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  6801              LDR      r1,[r0,#0]
000004  f4410170          ORR      r1,r1,#0xf00000
000008  6001              STR      r1,[r0,#0]
;;;189      #endif
;;;190      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;191      /* Set MSION bit */
;;;192      RCC->CR |= RCC_CR_MSION;
00000a  480c              LDR      r0,|L2.60|
00000c  6801              LDR      r1,[r0,#0]
00000e  f0410101          ORR      r1,r1,#1
000012  6001              STR      r1,[r0,#0]
;;;193    
;;;194      /* Reset CFGR register */
;;;195      RCC->CFGR = 0x00000000;
000014  2100              MOVS     r1,#0
000016  6081              STR      r1,[r0,#8]
;;;196    
;;;197      /* Reset HSEON, CSSON , HSION, and PLLON bits */
;;;198      RCC->CR &= (uint32_t)0xEAF6FFFF;
000018  6802              LDR      r2,[r0,#0]
00001a  4b09              LDR      r3,|L2.64|
00001c  401a              ANDS     r2,r2,r3
00001e  6002              STR      r2,[r0,#0]
;;;199    
;;;200      /* Reset PLLCFGR register */
;;;201      RCC->PLLCFGR = 0x00001000;
000020  1482              ASRS     r2,r0,#18
000022  60c2              STR      r2,[r0,#0xc]
;;;202    
;;;203      /* Reset HSEBYP bit */
;;;204      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  6802              LDR      r2,[r0,#0]
000026  f4222280          BIC      r2,r2,#0x40000
00002a  6002              STR      r2,[r0,#0]
;;;205    
;;;206      /* Disable all interrupts */
;;;207      RCC->CIER = 0x00000000;
00002c  6181              STR      r1,[r0,#0x18]
;;;208    
;;;209      /* Configure the Vector Table location add offset address ------------------*/
;;;210    #ifdef VECT_TAB_SRAM
;;;211      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;212    #else
;;;213      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00002e  4902              LDR      r1,|L2.56|
000030  03c0              LSLS     r0,r0,#15
000032  3980              SUBS     r1,r1,#0x80
000034  6008              STR      r0,[r1,#0]
;;;214    #endif
;;;215    }
000036  4770              BX       lr
;;;216    
                          ENDP

                  |L2.56|
                          DCD      0xe000ed88
                  |L2.60|
                          DCD      0x40021000
                  |L2.64|
                          DCD      0xeaf6ffff

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  AHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  MSIRangeTable
                          DCD      0x000186a0
                          DCD      0x00030d40
                          DCD      0x00061a80
                          DCD      0x000c3500
                          DCD      0x000f4240
                          DCD      0x001e8480
                          DCD      0x003d0900
                          DCD      0x007a1200
                          DCD      0x00f42400
                          DCD      0x016e3600
                          DCD      0x01e84800
                          DCD      0x02dc6c00

                          AREA ||area_number.6||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.6||, ||.constdata||
                  APBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x003d0900

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\User\\system_stm32l4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_system_stm32l4xx_c_5d646a67____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____REVSH|
#line 507
|__asm___18_system_stm32l4xx_c_5d646a67____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32l4xx_c_5d646a67____RRX|
#line 694
|__asm___18_system_stm32l4xx_c_5d646a67____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
