L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_pka.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_pka.c
N  * @author  MCD Application Team
N  * @brief   PKA LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_pka.h"
S#include "stm32l4xx_ll_bus.h"
S
S#ifdef  USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined(PKA)
S
S/** @addtogroup PKA_LL
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/** @defgroup PKA_LL_Private_Macros PKA Private Constants
S  * @{
S  */
S#define IS_LL_PKA_MODE(__VALUE__)     (((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM_MOD_EXP) ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM)          ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_EXP)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM_ECC)      ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ECC_KP_PRIMITIVE)          ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ECDSA_SIGNATURE)           ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ECDSA_VERIFICATION)        ||\
S                                      ((__VALUE__) == LL_PKA_MODE_POINT_CHECK)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_RSA_CRT_EXP)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_INV)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_ADD)            ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_SUB)            ||\
S                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_MUL)            ||\
S                                      ((__VALUE__) == LL_PKA_MODE_COMPARISON)                ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_REDUC)             ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_ADD)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_SUB)               ||\
S                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_MUL))
X#define IS_LL_PKA_MODE(__VALUE__)     (((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM_MOD_EXP) ||                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM)          ||                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_EXP)               ||                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_PARAM_ECC)      ||                                      ((__VALUE__) == LL_PKA_MODE_ECC_KP_PRIMITIVE)          ||                                      ((__VALUE__) == LL_PKA_MODE_ECDSA_SIGNATURE)           ||                                      ((__VALUE__) == LL_PKA_MODE_ECDSA_VERIFICATION)        ||                                      ((__VALUE__) == LL_PKA_MODE_POINT_CHECK)               ||                                      ((__VALUE__) == LL_PKA_MODE_RSA_CRT_EXP)               ||                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_INV)               ||                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_ADD)            ||                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_SUB)            ||                                      ((__VALUE__) == LL_PKA_MODE_ARITHMETIC_MUL)            ||                                      ((__VALUE__) == LL_PKA_MODE_COMPARISON)                ||                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_REDUC)             ||                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_ADD)               ||                                      ((__VALUE__) == LL_PKA_MODE_MODULAR_SUB)               ||                                      ((__VALUE__) == LL_PKA_MODE_MONTGOMERY_MUL))
S/**
S  * @}
S  */
S
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup PKA_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup PKA_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize PKA registers (Registers restored to their default values).
S  * @param  PKAx PKA Instance.
S  * @retval ErrorStatus
S  *          - SUCCESS: PKA registers are de-initialized
S  *          - ERROR: PKA registers are not de-initialized
S  */
SErrorStatus LL_PKA_DeInit(PKA_TypeDef *PKAx)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check the parameters */
S  assert_param(IS_PKA_ALL_INSTANCE(PKAx));
S
S  if (PKAx == PKA)
S  {
S    /* Force PKA reset */
S    LL_AHB2_GRP1_ForceReset(LL_AHB2_GRP1_PERIPH_PKA);
S
S    /* Release PKA reset */
S    LL_AHB2_GRP1_ReleaseReset(LL_AHB2_GRP1_PERIPH_PKA);
S  }
S  else
S  {
S    status = ERROR;
S  }
S
S  return (status);
S}
S
S/**
S  * @brief  Initialize PKA registers according to the specified parameters in PKA_InitStruct.
S  * @param  PKAx PKA Instance.
S  * @param  PKA_InitStruct pointer to a @ref LL_PKA_InitTypeDef structure
S  *         that contains the configuration information for the specified PKA peripheral.
S  * @retval ErrorStatus
S  *          - SUCCESS: PKA registers are initialized according to PKA_InitStruct content
S  *          - ERROR:   Not applicable
S  */
SErrorStatus LL_PKA_Init(PKA_TypeDef *PKAx, LL_PKA_InitTypeDef *PKA_InitStruct)
S{
S  assert_param(IS_PKA_ALL_INSTANCE(PKAx));
S  assert_param(IS_LL_PKA_MODE(PKA_InitStruct->Mode));
S
S  LL_PKA_Config(PKAx, PKA_InitStruct->Mode);
S
S  return (SUCCESS);
S}
S
S/**
S  * @brief Set each @ref LL_PKA_InitTypeDef field to default value.
S  * @param PKA_InitStruct pointer to a @ref LL_PKA_InitTypeDef structure
S  *                       whose fields will be set to default values.
S  * @retval None
S  */
S
Svoid LL_PKA_StructInit(LL_PKA_InitTypeDef *PKA_InitStruct)
S{
S  /* Reset PKA init structure parameters values */
S  PKA_InitStruct->Mode       = LL_PKA_MODE_MONTGOMERY_PARAM_MOD_EXP;
S}
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* defined (PKA) */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
