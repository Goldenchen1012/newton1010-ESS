; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_fifo_flash.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_fifo_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Lib\SMP\smp_fifo_flash.c]
                          THUMB

                          AREA ||i.smp_fifo_flash_clean||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_clean PROC
;;;106    
;;;107    int8_t smp_fifo_flash_clean(smp_fifo_flash_t *p_fifo)
000000  b510              PUSH     {r4,lr}
;;;108    {
000002  4604              MOV      r4,r0
;;;109    	memset(p_fifo->buffer_addr,0,p_fifo->buffer_size);
000004  88a1              LDRH     r1,[r4,#4]
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       __aeabi_memclr4
;;;110    	p_fifo->in=0;
00000c  2000              MOVS     r0,#0
00000e  60a0              STR      r0,[r4,#8]
;;;111    	p_fifo->out=0;	
000010  60e0              STR      r0,[r4,#0xc]
;;;112    	return SMP_SUCCESS;
;;;113    }
000012  bd10              POP      {r4,pc}
;;;114    
                          ENDP


                          AREA ||i.smp_fifo_flash_get_size||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_get_size PROC
;;;93     #endif
;;;94     int8_t smp_fifo_flash_get_size(smp_fifo_flash_t *p_fifo, uint16_t *size)
000000  e9d02302          LDRD     r2,r3,[r0,#8]
;;;95     {
;;;96       if(p_fifo->in==p_fifo->out){
000004  429a              CMP      r2,r3
000006  d105              BNE      |L2.20|
;;;97     		*size = 0;
000008  f04f0000          MOV      r0,#0
00000c  8008              STRH     r0,[r1,#0]
;;;98     		return SMP_ERROR_RESOURCES; //Buf empty
00000e  f06f000d          MVN      r0,#0xd
;;;99     	}else if(p_fifo->in>p_fifo->out){
;;;100    		*size = p_fifo->in-p_fifo->out;
;;;101    	}else{
;;;102    		*size = (p_fifo->buffer_size-p_fifo->out)+(p_fifo->in);
;;;103    	}	
;;;104    	return SMP_SUCCESS;
;;;105    }
000012  4770              BX       lr
                  |L2.20|
000014  d903              BLS      |L2.30|
000016  eba20003          SUB      r0,r2,r3              ;100
00001a  8008              STRH     r0,[r1,#0]            ;100
00001c  e004              B        |L2.40|
                  |L2.30|
00001e  8880              LDRH     r0,[r0,#4]            ;102
000020  eba00003          SUB      r0,r0,r3              ;102
000024  4410              ADD      r0,r0,r2              ;102
000026  8008              STRH     r0,[r1,#0]            ;102
                  |L2.40|
000028  f04f0000          MOV      r0,#0                 ;104
00002c  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||i.smp_fifo_flash_open||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_open PROC
;;;28     
;;;29     int8_t smp_fifo_flash_open(smp_fifo_flash_t *p_fifo)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	if(p_fifo!=NULL){
000002  2800              CMP      r0,#0
000004  d003              BEQ      |L3.14|
;;;32     		smp_fifo_flash_clean(p_fifo);
000006  f7fffffe          BL       smp_fifo_flash_clean
;;;33     	}else{
;;;34     		return SMP_ERROR_NULL;
;;;35     	}	
;;;36     	
;;;37     	return SMP_SUCCESS;
00000a  2000              MOVS     r0,#0
;;;38     }
00000c  bd10              POP      {r4,pc}
                  |L3.14|
00000e  f06f000a          MVN      r0,#0xa               ;34
000012  bd10              POP      {r4,pc}
;;;39     
                          ENDP


                          AREA ||i.smp_fifo_flash_pop||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_pop PROC
;;;50     
;;;51     int8_t smp_fifo_flash_pop(smp_fifo_flash_t *p_fifo, smp_flash_package *pFlashPkg)
000000  b510              PUSH     {r4,lr}
;;;52     {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;53     	if(p_fifo->in==p_fifo->out){
000006  e9d41002          LDRD     r1,r0,[r4,#8]
00000a  4281              CMP      r1,r0
00000c  d102              BNE      |L4.20|
;;;54     		return SMP_ERROR_RESOURCES; //Buf empty
00000e  f06f000d          MVN      r0,#0xd
;;;55     	}else{
;;;56     		memcpy(pFlashPkg, &p_fifo->buffer_addr[p_fifo->out], sizeof(smp_flash_package)); 
;;;57     		p_fifo->out=(p_fifo->out+1)%p_fifo->buffer_size;
;;;58     	}		
;;;59     	return SMP_SUCCESS;
;;;60     }
000012  bd10              POP      {r4,pc}
                  |L4.20|
000014  6821              LDR      r1,[r4,#0]            ;56
000016  eb001000          ADD      r0,r0,r0,LSL #4       ;56
00001a  eb011100          ADD      r1,r1,r0,LSL #4       ;56
00001e  f44f7288          MOV      r2,#0x110             ;56
000022  4618              MOV      r0,r3                 ;56
000024  f7fffffe          BL       __aeabi_memcpy4
000028  68e0              LDR      r0,[r4,#0xc]          ;57
00002a  88a1              LDRH     r1,[r4,#4]            ;57
00002c  1c40              ADDS     r0,r0,#1              ;57
00002e  fbb0f2f1          UDIV     r2,r0,r1              ;57
000032  fb010012          MLS      r0,r1,r2,r0           ;57
000036  60e0              STR      r0,[r4,#0xc]          ;57
000038  2000              MOVS     r0,#0                 ;59
00003a  bd10              POP      {r4,pc}
;;;61     
                          ENDP


                          AREA ||i.smp_fifo_flash_push||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_push PROC
;;;39     
;;;40     int8_t smp_fifo_flash_push(smp_fifo_flash_t *p_fifo, smp_flash_package *pFlashPkg)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42     	if((p_fifo->in+1)%p_fifo->buffer_size==p_fifo->out){
000004  68a0              LDR      r0,[r4,#8]
000006  88a2              LDRH     r2,[r4,#4]
000008  4603              MOV      r3,r0
00000a  1c40              ADDS     r0,r0,#1
00000c  fbb0f5f2          UDIV     r5,r0,r2
000010  fb020015          MLS      r0,r2,r5,r0
000014  68e2              LDR      r2,[r4,#0xc]
000016  4290              CMP      r0,r2
000018  d102              BNE      |L5.32|
;;;43     		return SMP_ERROR_FULL; //Buf full
00001a  f06f0012          MVN      r0,#0x12
;;;44     	}else{
;;;45     		memcpy(&p_fifo->buffer_addr[p_fifo->in] ,pFlashPkg, sizeof(smp_flash_package)); 
;;;46     		p_fifo->in=(p_fifo->in+1)%p_fifo->buffer_size;
;;;47     	}
;;;48     	return SMP_SUCCESS;
;;;49     }
00001e  bd70              POP      {r4-r6,pc}
                  |L5.32|
000020  6822              LDR      r2,[r4,#0]            ;45
000022  eb031003          ADD      r0,r3,r3,LSL #4       ;45
000026  eb021000          ADD      r0,r2,r0,LSL #4       ;45
00002a  f44f7288          MOV      r2,#0x110             ;45
00002e  f7fffffe          BL       __aeabi_memcpy4
000032  68a0              LDR      r0,[r4,#8]            ;46
000034  88a1              LDRH     r1,[r4,#4]            ;46
000036  1c40              ADDS     r0,r0,#1              ;46
000038  fbb0f2f1          UDIV     r2,r0,r1              ;46
00003c  fb010012          MLS      r0,r1,r2,r0           ;46
000040  60a0              STR      r0,[r4,#8]            ;46
000042  2000              MOVS     r0,#0                 ;48
000044  bd70              POP      {r4-r6,pc}
;;;50     
                          ENDP


                          AREA ||i.smp_fifo_flash_read||, CODE, READONLY, ALIGN=1

                  smp_fifo_flash_read PROC
;;;61     
;;;62     int8_t smp_fifo_flash_read(smp_fifo_flash_t *p_fifo, smp_flash_package *pFlashPkg)
000000  b510              PUSH     {r4,lr}
;;;63     {
000002  460b              MOV      r3,r1
;;;64     	if(p_fifo->in==p_fifo->out){
000004  e9d02102          LDRD     r2,r1,[r0,#8]
000008  428a              CMP      r2,r1
00000a  d102              BNE      |L6.18|
;;;65     		return SMP_ERROR_RESOURCES; //Buf empty
00000c  f06f000d          MVN      r0,#0xd
;;;66     	}else{
;;;67     		memcpy(pFlashPkg, &p_fifo->buffer_addr[p_fifo->out], sizeof(smp_flash_package)); 
;;;68     	}		
;;;69     	return SMP_SUCCESS;
;;;70     }
000010  bd10              POP      {r4,pc}
                  |L6.18|
000012  6800              LDR      r0,[r0,#0]            ;67
000014  eb011101          ADD      r1,r1,r1,LSL #4       ;67
000018  eb001101          ADD      r1,r0,r1,LSL #4       ;67
00001c  f44f7288          MOV      r2,#0x110             ;67
000020  4618              MOV      r0,r3                 ;67
000022  f7fffffe          BL       __aeabi_memcpy4
000026  2000              MOVS     r0,#0                 ;69
000028  bd10              POP      {r4,pc}
;;;71     #if	0
                          ENDP

