L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_rng.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_rng.c
N  * @author  MCD Application Team
N  * @brief   RNG LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_rng.h"
S#include "stm32l4xx_ll_bus.h"
S
S#ifdef  USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined (RNG)
S
S/** @addtogroup RNG_LL
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S#if defined(RNG_CR_CED)
S/** @addtogroup RNG_LL_Private_Macros
S  * @{
S  */
S#define IS_LL_RNG_CED(__MODE__) (((__MODE__) == LL_RNG_CED_ENABLE) || \
S                                 ((__MODE__) == LL_RNG_CED_DISABLE))
X#define IS_LL_RNG_CED(__MODE__) (((__MODE__) == LL_RNG_CED_ENABLE) ||                                  ((__MODE__) == LL_RNG_CED_DISABLE))
S
S#if defined(RNG_CR_CONDRST)
S#define IS_LL_RNG_CLOCK_DIVIDER(__CLOCK_DIV__) ((__CLOCK_DIV__) <=0x0Fu)
S
S
S#define IS_LL_RNG_NIST_COMPLIANCE(__NIST_COMPLIANCE__) (((__NIST_COMPLIANCE__) == LL_RNG_NIST_COMPLIANT) || \
S                                                     ((__NIST_COMPLIANCE__) == LL_RNG_NOTNIST_COMPLIANT))
X#define IS_LL_RNG_NIST_COMPLIANCE(__NIST_COMPLIANCE__) (((__NIST_COMPLIANCE__) == LL_RNG_NIST_COMPLIANT) ||                                                      ((__NIST_COMPLIANCE__) == LL_RNG_NOTNIST_COMPLIANT))
S
S#define IS_LL_RNG_CONFIG1 (__CONFIG1__) ((__CONFIG1__) <= 0x3FUL)
S
S#define IS_LL_RNG_CONFIG2 (__CONFIG2__) ((__CONFIG2__) <= 0x07UL)
S
S#define IS_LL_RNG_CONFIG3 (__CONFIG3__) ((__CONFIG3__) <= 0xFUL)
S#endif /* end of RNG_CR_CONDRST*/
S/**
S  * @}
S  */
S#endif
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup RNG_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup RNG_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize RNG registers (Registers restored to their default values).
S  * @param  RNGx RNG Instance
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: RNG registers are de-initialized
S  *          - ERROR: not applicable
S  */
SErrorStatus LL_RNG_DeInit(RNG_TypeDef *RNGx)
S{
S  /* Check the parameters */
S  assert_param(IS_RNG_ALL_INSTANCE(RNGx));
S  /* Enable RNG reset state */
S  LL_AHB2_GRP1_ForceReset(LL_AHB2_GRP1_PERIPH_RNG);
S
S  /* Release RNG from reset state */
S  LL_AHB2_GRP1_ReleaseReset(LL_AHB2_GRP1_PERIPH_RNG);
S  return (SUCCESS);
S}
S
S#if defined(RNG_CR_CED)
S/**
S  * @brief  Initialize RNG registers according to the specified parameters in RNG_InitStruct.
S  * @param  RNGx RNG Instance
S  * @param  RNG_InitStruct pointer to a LL_RNG_InitTypeDef structure
S  *         that contains the configuration information for the specified RNG peripheral.
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: RNG registers are initialized according to RNG_InitStruct content
S  *          - ERROR: not applicable
S  */
SErrorStatus LL_RNG_Init(RNG_TypeDef *RNGx, LL_RNG_InitTypeDef *RNG_InitStruct)
S{
S  /* Check the parameters */
S  assert_param(IS_RNG_ALL_INSTANCE(RNGx));
S  assert_param(IS_LL_RNG_CED(RNG_InitStruct->ClockErrorDetection));
S
S#if defined(RNG_CR_CONDRST)
S  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
S  MODIFY_REG(RNGx->CR, RNG_CR_CED | RNG_CR_CONDRST, RNG_InitStruct->ClockErrorDetection | RNG_CR_CONDRST);
S  /* Writing bits CONDRST=0*/
S  CLEAR_BIT(RNGx->CR, RNG_CR_CONDRST);
S#else
S  /* Clock Error Detection configuration */
S  MODIFY_REG(RNGx->CR, RNG_CR_CED, RNG_InitStruct->ClockErrorDetection);
S#endif
S
S  return (SUCCESS);
S}
S
S/**
S  * @brief Set each @ref LL_RNG_InitTypeDef field to default value.
S  * @param RNG_InitStruct pointer to a @ref LL_RNG_InitTypeDef structure
S  *                       whose fields will be set to default values.
S  * @retval None
S  */
Svoid LL_RNG_StructInit(LL_RNG_InitTypeDef *RNG_InitStruct)
S{
S  /* Set RNG_InitStruct fields to default values */
S  RNG_InitStruct->ClockErrorDetection = LL_RNG_CED_ENABLE;
S
S}
S#endif
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* RNG */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
