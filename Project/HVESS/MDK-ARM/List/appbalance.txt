; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\appbalance.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\appbalance.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\APP\AppBalance.c]
                          THUMB

                          AREA ||i.appBalanceCheck||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  appBalanceCheck PROC
;;;258    
;;;259    static void appBalanceCheck(void)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;260    {	
000004  b0a9              SUB      sp,sp,#0xa4
;;;261    	tScuProtectPar	mVoltageCondition;
;;;262    	uint8_t		MaxNtcTemp_1C;
;;;263    	uint16_t	DutySet;
;;;264    	uint16_t	DutyRest;
;;;265    	uint16_t	TempSet;
;;;266    	uint16_t	TempRelease;
;;;267    	
;;;268    	uint16_t	CellVoltage,DeltaVoltage;
;;;269    	uint16_t	MinCellVoltage;
;;;270    	uint16_t	MaxCellVoltage;
;;;271    	
;;;272    	uint16_t	SetVoltage,ReleaseVoltage;
;;;273    	uint16_t	DeltaSet,DeltaRelease;
;;;274    	
;;;275    	uint16_t	cell,index,i;
;;;276    	BYTE	B,b;
;;;277    	BYTE	diff;
;;;278    	BYTE	dat;
;;;279    	char	str[100];
;;;280    	
;;;281    	if(appGaugeGetCurrentMode() == APP_SCU_GAUGE_CHARGE_MODE)
000006  f7fffffe          BL       appGaugeGetCurrentMode
00000a  2802              CMP      r0,#2
00000c  d007              BEQ      |L1.30|
;;;282    	{
;;;283    		apiSysParGetBalanceChg(&mVoltageCondition);
;;;284    	}
;;;285    	else if(appGaugeGetCurrentMode() == APP_SCU_GAUGE_RELEASE_MODE)
00000e  f7fffffe          BL       appGaugeGetCurrentMode
000012  b140              CBZ      r0,|L1.38|
;;;286    	{
;;;287    		apiSysParGetBalanceRlx(&mVoltageCondition);
;;;288    	}
;;;289    	else
;;;290    	{
;;;291    		nextBalanceCheckProcess();
000014  f7fffffe          BL       nextBalanceCheckProcess
                  |L1.24|
;;;292    		return;
;;;293    	}
;;;294    	
;;;295    	SetVoltage = mVoltageCondition.SetValue.l;
;;;296    	ReleaseVoltage = mVoltageCondition.STime.l;
;;;297    	DeltaSet = mVoltageCondition.RelValue.l;
;;;298    	DeltaRelease = mVoltageCondition.RTime.l;
;;;299    	
;;;300    	apiSysParGetBalanceDuty(&mDutyCondition);
;;;301    
;;;302    	DutySet = mDutyCondition.SetValue.l;
;;;303    	DutyRest = mDutyCondition.STime.l;
;;;304    	TempSet = mDutyCondition.RelValue.l;
;;;305    	TempRelease = mDutyCondition.RTime.l;
;;;306    
;;;307    	MaxNtcTemp_1C = LibNtcVoltageToTemperature(HalAfeGetMaxNtcTempAdc()) / 100;
;;;308    	MinCellVoltage = halAfeGetMinCellVoltage();
;;;309    	MaxCellVoltage = halAfeGetMaxCellVoltage();
;;;310    
;;;311    
;;;312    	sprintf(str,"%d %d %d %d %d %d %d %d %d %d %d",
;;;313    			SetVoltage,
;;;314    			ReleaseVoltage,
;;;315    			DeltaSet,
;;;316    			DeltaRelease,
;;;317    			DutySet,
;;;318    			DutyRest,
;;;319    			TempSet,
;;;320    			TempRelease,
;;;321    			MaxNtcTemp_1C,
;;;322    			MinCellVoltage,
;;;323    			MaxCellVoltage
;;;324    			);
;;;325    	//appBalanceDebugMsg(str);
;;;326    	//---------------------------------------------
;;;327    	//
;;;328    	if(MinCellVoltage <= SetVoltage || 
;;;329    	   MaxNtcTemp_1C >= TempSet)
;;;330    	 {
;;;331    	 	if(MaxCellVoltage < ReleaseVoltage || 
;;;332       	   		MaxNtcTemp_1C > TempRelease)
;;;333    		{	
;;;334    			appBalanceClearAllFlag();
;;;335    			nextBalanceCheckProcess();
;;;336    			return;
;;;337    		}
;;;338    		appBalanceCheckRelease(MinCellVoltage, DeltaRelease);
;;;339    		nextBalanceCheckProcess();
;;;340    		return;
;;;341    	}
;;;342    	appBalanceCheckSet(MinCellVoltage, DeltaSet);
;;;343    	
;;;344    	//-------------------------------------------------------------
;;;345    	if(MaxCellVoltage < ReleaseVoltage || 
;;;346       	   MaxNtcTemp_1C > TempRelease)
;;;347    	{	
;;;348    		appBalanceClearAllFlag();
;;;349    		nextBalanceCheckProcess();
;;;350    		return;
;;;351    	}
;;;352    	appBalanceCheckRelease(MinCellVoltage, DeltaRelease);
;;;353    	nextBalanceCheckProcess();
;;;354    }
000018  b029              ADD      sp,sp,#0xa4
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.30|
00001e  a825              ADD      r0,sp,#0x94           ;283
000020  f7fffffe          BL       apiSysParGetBalanceChg
000024  e002              B        |L1.44|
                  |L1.38|
000026  a825              ADD      r0,sp,#0x94           ;287
000028  f7fffffe          BL       apiSysParGetBalanceRlx
                  |L1.44|
00002c  9825              LDR      r0,[sp,#0x94]         ;295
00002e  fa1ff980          UXTH     r9,r0                 ;295
000032  9826              LDR      r0,[sp,#0x98]         ;296
000034  b287              UXTH     r7,r0                 ;296
000036  9827              LDR      r0,[sp,#0x9c]         ;297
000038  fa1ffa80          UXTH     r10,r0                ;297
00003c  9828              LDR      r0,[sp,#0xa0]         ;298
00003e  b280              UXTH     r0,r0                 ;298
000040  9022              STR      r0,[sp,#0x88]         ;298
000042  482b              LDR      r0,|L1.240|
000044  f7fffffe          BL       apiSysParGetBalanceDuty
000048  4829              LDR      r0,|L1.240|
00004a  8801              LDRH     r1,[r0,#0]            ;302  ; mDutyCondition
00004c  b28a              UXTH     r2,r1                 ;302
00004e  9224              STR      r2,[sp,#0x90]         ;302
000050  8881              LDRH     r1,[r0,#4]            ;303  ; mDutyCondition
000052  b289              UXTH     r1,r1                 ;303
000054  9123              STR      r1,[sp,#0x8c]         ;303
000056  8901              LDRH     r1,[r0,#8]            ;304  ; mDutyCondition
000058  fa1ff881          UXTH     r8,r1                 ;304
00005c  8980              LDRH     r0,[r0,#0xc]          ;305  ; mDutyCondition
00005e  b285              UXTH     r5,r0                 ;305
000060  f7fffffe          BL       HalAfeGetMaxNtcTempAdc
000064  f7fffffe          BL       LibNtcVoltageToTemperature
000068  2164              MOVS     r1,#0x64              ;307
00006a  fbb0f0f1          UDIV     r0,r0,r1              ;307
00006e  b2c4              UXTB     r4,r0                 ;307
000070  f7fffffe          BL       halAfeGetMinCellVoltage
000074  4683              MOV      r11,r0                ;308
000076  f7fffffe          BL       halAfeGetMaxCellVoltage
00007a  4606              MOV      r6,r0                 ;309
00007c  e9cdb607          STRD     r11,r6,[sp,#0x1c]     ;312
000080  e9cd5405          STRD     r5,r4,[sp,#0x14]      ;312
000084  a822              ADD      r0,sp,#0x88           ;312
000086  463b              MOV      r3,r7                 ;312
000088  c807              LDM      r0,{r0-r2}            ;312
00008a  e9cda000          STRD     r10,r0,[sp,#0]        ;312
00008e  e9cd1803          STRD     r1,r8,[sp,#0xc]       ;312
000092  9202              STR      r2,[sp,#8]            ;312
000094  464a              MOV      r2,r9                 ;312
000096  a117              ADR      r1,|L1.244|
000098  a809              ADD      r0,sp,#0x24           ;312
00009a  f7fffffe          BL       __2sprintf
00009e  45cb              CMP      r11,r9                ;328
0000a0  d901              BLS      |L1.166|
0000a2  4544              CMP      r4,r8                 ;329
0000a4  d30f              BCC      |L1.198|
                  |L1.166|
0000a6  42be              CMP      r6,r7                 ;331
0000a8  d301              BCC      |L1.174|
0000aa  42ac              CMP      r4,r5                 ;332
0000ac  d904              BLS      |L1.184|
                  |L1.174|
0000ae  f7fffffe          BL       appBalanceClearAllFlag
0000b2  f7fffffe          BL       nextBalanceCheckProcess
0000b6  e7af              B        |L1.24|
                  |L1.184|
0000b8  4658              MOV      r0,r11                ;338
0000ba  9922              LDR      r1,[sp,#0x88]         ;338
0000bc  f7fffffe          BL       appBalanceCheckRelease
0000c0  f7fffffe          BL       nextBalanceCheckProcess
0000c4  e7a8              B        |L1.24|
                  |L1.198|
0000c6  4651              MOV      r1,r10                ;342
0000c8  4658              MOV      r0,r11                ;342
0000ca  f7fffffe          BL       appBalanceCheckSet
0000ce  42be              CMP      r6,r7                 ;345
0000d0  d301              BCC      |L1.214|
0000d2  42ac              CMP      r4,r5                 ;346
0000d4  d904              BLS      |L1.224|
                  |L1.214|
0000d6  f7fffffe          BL       appBalanceClearAllFlag
0000da  f7fffffe          BL       nextBalanceCheckProcess
0000de  e79b              B        |L1.24|
                  |L1.224|
0000e0  4658              MOV      r0,r11                ;352
0000e2  9922              LDR      r1,[sp,#0x88]         ;352
0000e4  f7fffffe          BL       appBalanceCheckRelease
0000e8  f7fffffe          BL       nextBalanceCheckProcess
0000ec  e794              B        |L1.24|
;;;355    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L1.240|
                          DCD      ||.bss||+0x68
                  |L1.244|
0000f4  25642025          DCB      "%d %d %d %d %d %d %d %d %d %d %d",0
0000f8  64202564
0000fc  20256420
000100  25642025
000104  64202564
000108  20256420
00010c  25642025
000110  64202564
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.appBalanceCheckEvent||, CODE, READONLY, ALIGN=2

                  appBalanceCheckEvent PROC
;;;128    
;;;129    static void appBalanceCheckEvent(void)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;130    {
;;;131    	uint16_t	index, cell;
;;;132    	uint8_t		B,b;
;;;133    	uint8_t		diff,dat;
;;;134    	
;;;135    	B = 0;
000004  2500              MOVS     r5,#0
;;;136    	for(cell=0; cell<balanceCellNumber(); cell+=8,B++)
000006  2600              MOVS     r6,#0
;;;137    	{  
;;;138    		diff = BalanceFlag[B] ^ BalanceFlagTemp[B];
000008  f8dfa0dc          LDR      r10,|L2.232|
;;;139    		if(diff)
;;;140    		{
;;;141    			dat = BalanceFlag[B];
;;;142    			index = cell;
;;;143    			for(b=0; b<8; b++,index++)
;;;144    			{
;;;145    				if(index >= balanceCellNumber())
;;;146    					break;
;;;147    								
;;;148    				if(diff & BitsTab[b])
;;;149    				{
;;;150    					if(dat & BitsTab[b])
;;;151    					{
;;;152    						if(EvtHandler)
00000c  4f35              LDR      r7,|L2.228|
00000e  f10a0b33          ADD      r11,r10,#0x33         ;138
000012  e05e              B        |L2.210|
                  |L2.20|
000014  f81a8005          LDRB     r8,[r10,r5]           ;138
000018  f81b0005          LDRB     r0,[r11,r5]           ;138
00001c  46c1              MOV      r9,r8                 ;138
00001e  ea880800          EOR      r8,r8,r0              ;138
000022  f1b80f00          CMP      r8,#0                 ;139
000026  d04c              BEQ      |L2.194|
000028  9600              STR      r6,[sp,#0]            ;142
00002a  2400              MOVS     r4,#0                 ;143
                  |L2.44|
00002c  f7fffffe          BL       apiSysParGetCellNumber
000030  f8bd1000          LDRH     r1,[sp,#0]            ;145
000034  4288              CMP      r0,r1                 ;145
000036  d944              BLS      |L2.194|
000038  482c              LDR      r0,|L2.236|
00003a  5d00              LDRB     r0,[r0,r4]            ;148
00003c  ea100f08          TST      r0,r8                 ;148
000040  d037              BEQ      |L2.178|
000042  ea100f09          TST      r0,r9                 ;150
000046  d01a              BEQ      |L2.126|
000048  68b8              LDR      r0,[r7,#8]  ; EvtHandler
00004a  b330              CBZ      r0,|L2.154|
;;;153    						{
;;;154    							switch(appGaugeGetCurrentMode())
00004c  f7fffffe          BL       appGaugeGetCurrentMode
000050  b178              CBZ      r0,|L2.114|
000052  2801              CMP      r0,#1
000054  d007              BEQ      |L2.102|
000056  2802              CMP      r0,#2
000058  d12b              BNE      |L2.178|
;;;155    							{
;;;156    							case APP_SCU_GAUGE_CHARGE_MODE:
;;;157    								EvtHandler(0,APP_CHG_BALANCE_SET, &index);
00005a  2101              MOVS     r1,#1
00005c  68bb              LDR      r3,[r7,#8]  ; EvtHandler
00005e  466a              MOV      r2,sp
000060  2000              MOVS     r0,#0
000062  4798              BLX      r3
;;;158    								break;
000064  e025              B        |L2.178|
                  |L2.102|
;;;159    							case APP_SCU_GAUGE_DISCHARGE_MODE:
;;;160    								EvtHandler(0,APP_DHG_BALANCE_SET, &index);
000066  2103              MOVS     r1,#3
000068  68bb              LDR      r3,[r7,#8]  ; EvtHandler
00006a  466a              MOV      r2,sp
00006c  2000              MOVS     r0,#0
00006e  4798              BLX      r3
;;;161    								break;
000070  e01f              B        |L2.178|
                  |L2.114|
;;;162    							case APP_SCU_GAUGE_RELEASE_MODE:
;;;163    								EvtHandler(0,APP_RLX_BALANCE_SET, &index);
000072  2105              MOVS     r1,#5
000074  68bb              LDR      r3,[r7,#8]  ; EvtHandler
000076  466a              MOV      r2,sp
000078  2000              MOVS     r0,#0
00007a  4798              BLX      r3
;;;164    								break;
00007c  e019              B        |L2.178|
                  |L2.126|
;;;165    							}
;;;166    						}
;;;167    					}
;;;168    					else			//Balance Release
;;;169    					{
;;;170    						if(EvtHandler)
00007e  68b8              LDR      r0,[r7,#8]  ; EvtHandler
000080  b158              CBZ      r0,|L2.154|
;;;171    						{
;;;172    							switch(appGaugeGetCurrentMode())
000082  f7fffffe          BL       appGaugeGetCurrentMode
000086  b178              CBZ      r0,|L2.168|
000088  2801              CMP      r0,#1
00008a  d007              BEQ      |L2.156|
00008c  2802              CMP      r0,#2
00008e  d110              BNE      |L2.178|
;;;173    							{
;;;174    							case APP_SCU_GAUGE_CHARGE_MODE:
;;;175    								EvtHandler(0,APP_CHG_BALANCE_RELEASE, &index);
000090  2102              MOVS     r1,#2
000092  68bb              LDR      r3,[r7,#8]  ; EvtHandler
000094  466a              MOV      r2,sp
000096  2000              MOVS     r0,#0
000098  4798              BLX      r3
                  |L2.154|
;;;176    								break;
00009a  e00a              B        |L2.178|
                  |L2.156|
;;;177    							case APP_SCU_GAUGE_DISCHARGE_MODE:
;;;178    								EvtHandler(0,APP_DHG_BALANCE_RELEASE, &index);
00009c  2104              MOVS     r1,#4
00009e  68bb              LDR      r3,[r7,#8]  ; EvtHandler
0000a0  466a              MOV      r2,sp
0000a2  2000              MOVS     r0,#0
0000a4  4798              BLX      r3
;;;179    								break;
0000a6  e004              B        |L2.178|
                  |L2.168|
;;;180    							case APP_SCU_GAUGE_RELEASE_MODE:
;;;181    								EvtHandler(0,APP_RLX_BALANCE_RELEASE, &index);
0000a8  2106              MOVS     r1,#6
0000aa  68bb              LDR      r3,[r7,#8]  ; EvtHandler
0000ac  466a              MOV      r2,sp
0000ae  2000              MOVS     r0,#0
0000b0  4798              BLX      r3
                  |L2.178|
0000b2  1c64              ADDS     r4,r4,#1              ;143
0000b4  b2e4              UXTB     r4,r4                 ;143
0000b6  f8bd0000          LDRH     r0,[sp,#0]            ;143
0000ba  1c40              ADDS     r0,r0,#1              ;143
0000bc  9000              STR      r0,[sp,#0]            ;143
0000be  2c08              CMP      r4,#8                 ;143
0000c0  d3b4              BCC      |L2.44|
                  |L2.194|
;;;182    								break;
;;;183    							}
;;;184    						}
;;;185    					}	//if(dat&0x01)
;;;186    				}	//if(diff&0x01)
;;;187    			}
;;;188    		}
;;;189    		BalanceFlagTemp[B] = BalanceFlag[B];
0000c2  f81a0005          LDRB     r0,[r10,r5]
0000c6  f80b0005          STRB     r0,[r11,r5]
0000ca  3608              ADDS     r6,r6,#8              ;136
0000cc  b2b6              UXTH     r6,r6                 ;136
0000ce  1c6d              ADDS     r5,r5,#1              ;136
0000d0  b2ed              UXTB     r5,r5                 ;136
                  |L2.210|
0000d2  f7fffffe          BL       apiSysParGetCellNumber
0000d6  42b0              CMP      r0,r6                 ;136
0000d8  d89c              BHI      |L2.20|
;;;190    	}
;;;191    	
;;;192    	balanceFunProcessor = setupPhysicalBalancePosition;
0000da  4805              LDR      r0,|L2.240|
0000dc  6078              STR      r0,[r7,#4]  ; balanceFunProcessor
;;;193    }
0000de  e8bd8ff8          POP      {r3-r11,pc}
;;;194    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L2.228|
                          DCD      ||.data||
                  |L2.232|
                          DCD      ||.bss||
                  |L2.236|
                          DCD      ||.constdata||
                  |L2.240|
                          DCD      setupPhysicalBalancePosition

                          AREA ||i.appBalanceCheckRelease||, CODE, READONLY, ALIGN=2

                  appBalanceCheckRelease PROC
;;;222    }
;;;223    static void appBalanceCheckRelease(uint16_t MinCellVoltage, uint16_t DeltaRelease)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;224    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;225    	uint16_t	cell;
;;;226    	uint16_t	CellVoltage,DeltaVoltage;
;;;227    	
;;;228    	for(cell=0; cell<balanceCellNumber(); cell++)
000008  2400              MOVS     r4,#0
00000a  e016              B        |L3.58|
                  |L3.12|
;;;229    	{
;;;230    		//---------------------------------------------------
;;;231    		//	check release
;;;232    		CellVoltage = halAfeGetCellVoltage(cell);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       halAfeGetCellVoltage
;;;233    		if(CellVoltage >= MinCellVoltage)
000012  42a8              CMP      r0,r5
000014  d301              BCC      |L3.26|
;;;234    			DeltaVoltage = CellVoltage - MinCellVoltage;
000016  1b40              SUBS     r0,r0,r5
000018  b286              UXTH     r6,r0
                  |L3.26|
;;;235    		else
;;;236    			CellVoltage = 0;	
;;;237    
;;;238    		if(DeltaVoltage < DeltaRelease)
00001a  42be              CMP      r6,r7
00001c  d20b              BCS      |L3.54|
;;;239    		{	
;;;240    			BYTE	B,b;	
;;;241    			B = cell / 8;
00001e  f3c400c7          UBFX     r0,r4,#3,#8
;;;242    			b = cell & 0x07;
000022  f0040207          AND      r2,r4,#7
;;;243    			BalanceFlag[B] &= BitsTabMask[b];
000026  4908              LDR      r1,|L3.72|
000028  f8dfc020          LDR      r12,|L3.76|
00002c  5c0b              LDRB     r3,[r1,r0]
00002e  f81c2002          LDRB     r2,[r12,r2]
000032  4013              ANDS     r3,r3,r2
000034  540b              STRB     r3,[r1,r0]
                  |L3.54|
000036  1c64              ADDS     r4,r4,#1              ;228
000038  b2a4              UXTH     r4,r4                 ;228
                  |L3.58|
00003a  f7fffffe          BL       apiSysParGetCellNumber
00003e  42a0              CMP      r0,r4                 ;228
000040  d8e4              BHI      |L3.12|
;;;244    			
;;;245    		//	sprintf(str,"Release Balance %d",cell+1);
;;;246    		//	appBalanceDebugMsg(str);
;;;247    		}
;;;248    	}	
;;;249    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;250    static void appBalanceClearAllFlag(void)
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      ||.bss||
                  |L3.76|
                          DCD      ||.constdata||+0x8

                          AREA ||i.appBalanceCheckSet||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  appBalanceCheckSet PROC
;;;194    
;;;195    static void appBalanceCheckSet(uint16_t MinCellVoltage, uint16_t DeltaSet)
000000  b5f0              PUSH     {r4-r7,lr}
;;;196    {
000002  b09b              SUB      sp,sp,#0x6c
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;197    	uint16_t	cell;
;;;198    	uint16_t	CellVoltage,DeltaVoltage;
;;;199    	char		str[100];
;;;200    
;;;201    	for(cell=0; cell<balanceCellNumber(); cell++)
000008  2400              MOVS     r4,#0
00000a  e021              B        |L4.80|
                  |L4.12|
;;;202    	{		
;;;203    		CellVoltage = halAfeGetCellVoltage(cell);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       halAfeGetCellVoltage
000012  4603              MOV      r3,r0
;;;204    		if(CellVoltage >= MinCellVoltage)
000014  42ab              CMP      r3,r5
000016  d302              BCC      |L4.30|
;;;205    			DeltaVoltage = CellVoltage - MinCellVoltage;		
000018  1b58              SUBS     r0,r3,r5
00001a  b280              UXTH     r0,r0
00001c  e000              B        |L4.32|
                  |L4.30|
;;;206    		else
;;;207    			DeltaVoltage = 0;
00001e  2000              MOVS     r0,#0
                  |L4.32|
;;;208    		if(DeltaVoltage > DeltaSet)
000020  42b0              CMP      r0,r6
000022  d913              BLS      |L4.76|
;;;209    		{
;;;210    			BYTE	B,b;
;;;211    
;;;212    			B = cell/8;
000024  f3c400c7          UBFX     r0,r4,#3,#8
;;;213    			b = cell & 0x07;
000028  f0040207          AND      r2,r4,#7
;;;214    			BalanceFlag[B] |= BitsTab[b];
00002c  490b              LDR      r1,|L4.92|
00002e  f8dfc030          LDR      r12,|L4.96|
000032  5c0f              LDRB     r7,[r1,r0]
000034  f81c2002          LDRB     r2,[r12,r2]
000038  4317              ORRS     r7,r7,r2
00003a  540f              STRB     r7,[r1,r0]
;;;215    			if(cell == 10)
00003c  2c0a              CMP      r4,#0xa
00003e  d105              BNE      |L4.76|
;;;216    			{					
;;;217    				sprintf(str,"Set Balance %d %d %d",cell+1, CellVoltage, MinCellVoltage);
000040  220b              MOVS     r2,#0xb
000042  a108              ADR      r1,|L4.100|
000044  a802              ADD      r0,sp,#8
000046  9500              STR      r5,[sp,#0]
000048  f7fffffe          BL       __2sprintf
                  |L4.76|
00004c  1c64              ADDS     r4,r4,#1              ;201
00004e  b2a4              UXTH     r4,r4                 ;201
                  |L4.80|
000050  f7fffffe          BL       apiSysParGetCellNumber
000054  42a0              CMP      r0,r4                 ;201
000056  d8d9              BHI      |L4.12|
;;;218    				//appBalanceDebugMsg(str);
;;;219    			}
;;;220    		}		
;;;221    	}
;;;222    }
000058  b01b              ADD      sp,sp,#0x6c
00005a  bdf0              POP      {r4-r7,pc}
;;;223    static void appBalanceCheckRelease(uint16_t MinCellVoltage, uint16_t DeltaRelease)
                          ENDP

                  |L4.92|
                          DCD      ||.bss||
                  |L4.96|
                          DCD      ||.constdata||
                  |L4.100|
000064  53657420          DCB      "Set Balance %d %d %d",0
000068  42616c61
00006c  6e636520
000070  25642025
000074  64202564
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.appBalanceClearAllFlag||, CODE, READONLY, ALIGN=2

                  appBalanceClearAllFlag PROC
;;;249    }
;;;250    static void appBalanceClearAllFlag(void)
000000  2133              MOVS     r1,#0x33
;;;251    {
;;;252    	memset(&BalanceFlag, 0, sizeof(BalanceFlag));
000002  4801              LDR      r0,|L5.8|
000004  f7ffbffe          B.W      __aeabi_memclr4
;;;253    }
;;;254    static void nextBalanceCheckProcess(void)
                          ENDP

                  |L5.8|
                          DCD      ||.bss||

                          AREA ||i.appBalanceIsBalanceSet||, CODE, READONLY, ALIGN=2

                  appBalanceIsBalanceSet PROC
;;;396    /* Public function prototypes -----------------------------------------------*/
;;;397    uint8_t	appBalanceIsBalanceSet(uint16_t cell)
000000  f3c001c7          UBFX     r1,r0,#3,#8
;;;398    {
;;;399    	uint8_t	B,b;
;;;400    
;;;401    	B = cell / 8;
;;;402    	b = cell & 0x07;
000004  f0000007          AND      r0,r0,#7
;;;403    	if(BalanceFlag[B] & BitsTab[b])
000008  4a04              LDR      r2,|L6.28|
00000a  5c51              LDRB     r1,[r2,r1]
00000c  4a04              LDR      r2,|L6.32|
00000e  5c10              LDRB     r0,[r2,r0]
000010  4201              TST      r1,r0
000012  d001              BEQ      |L6.24|
;;;404    		return 1;
000014  2001              MOVS     r0,#1
;;;405    	else
;;;406    		return 0;
;;;407    }
000016  4770              BX       lr
                  |L6.24|
000018  2000              MOVS     r0,#0                 ;406
00001a  4770              BX       lr
;;;408    
                          ENDP

                  |L6.28|
                          DCD      ||.bss||
                  |L6.32|
                          DCD      ||.constdata||

                          AREA ||i.appBalanceOpen||, CODE, READONLY, ALIGN=2

                  appBalanceOpen PROC
;;;408    
;;;409    void appBalanceOpen(tAppBalanceEvtHandler evtHandler)
000000  4903              LDR      r1,|L7.16|
;;;410    {  	
;;;411    	EvtHandler = evtHandler;
000002  6088              STR      r0,[r1,#8]  ; EvtHandler
;;;412    	balanceFunProcessor = 0;
000004  2000              MOVS     r0,#0
000006  6048              STR      r0,[r1,#4]  ; balanceFunProcessor
;;;413    	LibSwTimerOpen(appBalanceSwTimerHandler, 0);
000008  2100              MOVS     r1,#0
00000a  4802              LDR      r0,|L7.20|
00000c  f7ffbffe          B.W      LibSwTimerOpen
;;;414    }
;;;415    
                          ENDP

                  |L7.16|
                          DCD      ||.data||
                  |L7.20|
                          DCD      appBalanceSwTimerHandler

                          AREA ||i.appBalanceSwTimerHandler||, CODE, READONLY, ALIGN=2

                  appBalanceSwTimerHandler PROC
;;;356    
;;;357    static void appBalanceSwTimerHandler(__far void *dest, uint16_t evt, void *vDataPtr)
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359    //	GPIOD->ODR |= GPIO_PIN_14;
;;;360    	if(evt == LIB_SW_TIMER_EVT_SW_1MS)
;;;361    	{
;;;362    		if(balanceFunProcessor)
000002  4c1c              LDR      r4,|L8.116|
000004  290a              CMP      r1,#0xa               ;360
000006  d007              BEQ      |L8.24|
;;;363    			balanceFunProcessor();
;;;364    	}
;;;365    	else if(evt == LIB_SW_TIMER_EVT_SW_1S)
000008  290d              CMP      r1,#0xd
00000a  d131              BNE      |L8.112|
;;;366    	{
;;;367    		apiSysParGetBalanceDuty(&mDutyCondition);
00000c  481a              LDR      r0,|L8.120|
00000e  f7fffffe          BL       apiSysParGetBalanceDuty
;;;368    
;;;369    		if(!balanceFunProcessor)
000012  6860              LDR      r0,[r4,#4]  ; balanceFunProcessor
000014  b130              CBZ      r0,|L8.36|
000016  e007              B        |L8.40|
                  |L8.24|
000018  6860              LDR      r0,[r4,#4]            ;362  ; balanceFunProcessor
00001a  2800              CMP      r0,#0                 ;362
00001c  d028              BEQ      |L8.112|
00001e  e8bd4010          POP      {r4,lr}               ;363
000022  4700              BX       r0                    ;363
                  |L8.36|
;;;370    			balanceFunProcessor = appBalanceCheck;
000024  4815              LDR      r0,|L8.124|
000026  6060              STR      r0,[r4,#4]  ; balanceFunProcessor
                  |L8.40|
;;;371    
;;;372    		if(mDutyCondition.SetValue.l == 0)
000028  4813              LDR      r0,|L8.120|
00002a  6801              LDR      r1,[r0,#0]  ; mDutyCondition
00002c  b161              CBZ      r1,|L8.72|
;;;373    			halAfeSetBalanceOnFlag(0);
;;;374    		else if(mDutyCondition.SetValue.l !=0 && mDutyCondition.STime.l == 0)
00002e  6842              LDR      r2,[r0,#4]  ; mDutyCondition
000030  b17a              CBZ      r2,|L8.82|
;;;375    			halAfeSetBalanceOnFlag(1);
;;;376    		else
;;;377    		{
;;;378    			BalanceDutyCount++;
000032  8820              LDRH     r0,[r4,#0]  ; BalanceDutyCount
000034  1c40              ADDS     r0,r0,#1
000036  b280              UXTH     r0,r0
000038  8020              STRH     r0,[r4,#0]
;;;379    			if(BalanceDutyCount ==  mDutyCondition.SetValue.l)
00003a  4281              CMP      r1,r0
00003c  d10e              BNE      |L8.92|
;;;380    			{
;;;381    				halAfeSetBalanceOnFlag(0);
00003e  e8bd4010          POP      {r4,lr}
000042  2000              MOVS     r0,#0
000044  f7ffbffe          B.W      halAfeSetBalanceOnFlag
                  |L8.72|
000048  e8bd4010          POP      {r4,lr}               ;373
00004c  2000              MOVS     r0,#0                 ;373
00004e  f7ffbffe          B.W      halAfeSetBalanceOnFlag
                  |L8.82|
000052  e8bd4010          POP      {r4,lr}               ;375
000056  2001              MOVS     r0,#1                 ;375
000058  f7ffbffe          B.W      halAfeSetBalanceOnFlag
                  |L8.92|
;;;382    				//appBalanceDebugMsg("Balance Switch = 0");
;;;383    			}
;;;384    			else if(BalanceDutyCount >= (mDutyCondition.SetValue.l + mDutyCondition.STime.l))
00005c  4411              ADD      r1,r1,r2
00005e  4281              CMP      r1,r0
000060  d806              BHI      |L8.112|
;;;385    			{
;;;386    				BalanceDutyCount = 0;
000062  2000              MOVS     r0,#0
000064  8020              STRH     r0,[r4,#0]
;;;387    				halAfeSetBalanceOnFlag(1);
000066  e8bd4010          POP      {r4,lr}
00006a  2001              MOVS     r0,#1
00006c  f7ffbffe          B.W      halAfeSetBalanceOnFlag
                  |L8.112|
;;;388    				//appBalanceDebugMsg("Balance Switch = 1");
;;;389    			}
;;;390    		}
;;;391    	}
;;;392    //	GPIOD->ODR &= ~GPIO_PIN_14;
;;;393    }
000070  bd10              POP      {r4,pc}
;;;394    
                          ENDP

000072  0000              DCW      0x0000
                  |L8.116|
                          DCD      ||.data||
                  |L8.120|
                          DCD      ||.bss||+0x68
                  |L8.124|
                          DCD      appBalanceCheck

                          AREA ||i.getPhysicalCellPosition||, CODE, READONLY, ALIGN=1

                  getPhysicalCellPosition PROC
;;;53     /* Private function prototypes -----------------------------------------------*/
;;;54     static uint8_t getPhysicalCellPosition(uint16_t CellIndex, uint8_t *BmuIndex,uint8_t *Position)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;55     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;56     	uint8_t		bmu;
;;;57     	uint32_t	CellFlag;
;;;58     	uint8_t		i;
;;;59     	uint16_t	CellNum = 0;
00000a  2400              MOVS     r4,#0
;;;60     
;;;61     	for(bmu=0; bmu<balanceBmuNumber(); bmu++)
00000c  2500              MOVS     r5,#0
00000e  e016              B        |L9.62|
                  |L9.16|
;;;62     	{
;;;63     		CellFlag = apiSysParGetCellFlag(bmu);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       apiSysParGetCellFlag
;;;64     		for(i=0; i<32; i++)
000016  2300              MOVS     r3,#0
                  |L9.24|
;;;65     		{
;;;66     			if(CellFlag & 0x01)
000018  07c1              LSLS     r1,r0,#31
00001a  d009              BEQ      |L9.48|
;;;67     			{
;;;68     				if(CellNum == CellIndex)
00001c  42b4              CMP      r4,r6
00001e  d105              BNE      |L9.44|
;;;69     				{
;;;70     					*BmuIndex = bmu;
000020  703d              STRB     r5,[r7,#0]
;;;71     					*Position = i;
000022  f8883000          STRB     r3,[r8,#0]
;;;72     					return 1;
000026  2001              MOVS     r0,#1
                  |L9.40|
;;;73     				}
;;;74     				CellNum++;
;;;75     			}
;;;76     			CellFlag >>= 1;
;;;77     		}
;;;78     	}
;;;79     	return 0;
;;;80     }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L9.44|
00002c  1c64              ADDS     r4,r4,#1              ;74
00002e  b2a4              UXTH     r4,r4                 ;74
                  |L9.48|
000030  0840              LSRS     r0,r0,#1              ;76
000032  1c5b              ADDS     r3,r3,#1              ;64
000034  b2db              UXTB     r3,r3                 ;64
000036  2b20              CMP      r3,#0x20              ;64
000038  d3ee              BCC      |L9.24|
00003a  1c6d              ADDS     r5,r5,#1              ;61
00003c  b2ed              UXTB     r5,r5                 ;61
                  |L9.62|
00003e  f7fffffe          BL       apiSysParGetBmuNumber
000042  42a8              CMP      r0,r5                 ;61
000044  d8e4              BHI      |L9.16|
000046  2000              MOVS     r0,#0                 ;79
000048  e7ee              B        |L9.40|
;;;81     static void setupPhysicalBalancePosition(void)
                          ENDP


                          AREA ||i.nextBalanceCheckProcess||, CODE, READONLY, ALIGN=2

                  nextBalanceCheckProcess PROC
;;;253    }
;;;254    static void nextBalanceCheckProcess(void)
000000  4902              LDR      r1,|L10.12|
;;;255    {
;;;256    	balanceFunProcessor = appBalanceCheckEvent;
000002  4801              LDR      r0,|L10.8|
000004  6048              STR      r0,[r1,#4]  ; balanceFunProcessor
;;;257    }
000006  4770              BX       lr
;;;258    
                          ENDP

                  |L10.8|
                          DCD      appBalanceCheckEvent
                  |L10.12|
                          DCD      ||.data||

                          AREA ||i.setupPhysicalBalancePosition||, CODE, READONLY, ALIGN=2

                  setupPhysicalBalancePosition PROC
;;;80     }
;;;81     static void setupPhysicalBalancePosition(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;82     {
000004  b0c2              SUB      sp,sp,#0x108
;;;83     	uint8_t		Bmu,Position;
;;;84     	uint16_t	index, cell;
;;;85     	uint8_t		B,b;
;;;86     	uint8_t		diff,dat;
;;;87     	uint32_t	PhysicialPosition[64];
;;;88     	char	str[100];
;;;89     	uint8_t		flag = 0;
;;;90     	memset(&PhysicialPosition, 0, sizeof(PhysicialPosition));
000006  f44f7180          MOV      r1,#0x100
00000a  4668              MOV      r0,sp
00000c  f7fffffe          BL       __aeabi_memclr4
;;;91     
;;;92     	//appBalanceDebugMsg("setupPhysicalBalancePosition");
;;;93     	
;;;94     	B = 0;
000010  2600              MOVS     r6,#0
;;;95     	for(cell=0; cell<balanceCellNumber(); B++)
000012  2500              MOVS     r5,#0
000014  46e9              MOV      r9,sp                 ;87
000016  e028              B        |L11.106|
                  |L11.24|
;;;96     	{
;;;97     		for(b=0; b<8; b++,cell++)
000018  2400              MOVS     r4,#0
;;;98     		{
;;;99     			if(cell >= balanceCellNumber())
;;;100    				break;
;;;101    			if(!getPhysicalCellPosition(cell, &Bmu, &Position))
;;;102    				continue;
;;;103    			if(!flag)
;;;104    			{
;;;105    				//sprintf(str,"chk balance %d %d %d",cell, Bmu, Position);
;;;106    				//appBalanceDebugMsg(str);
;;;107    			}
;;;108    			flag = 1;
;;;109    			if(BalanceFlag[B] & BitsTab[b])
00001a  f8df8088          LDR      r8,|L11.164|
00001e  f8dfa088          LDR      r10,|L11.168|
000022  2701              MOVS     r7,#1                 ;108
                  |L11.36|
000024  f7fffffe          BL       apiSysParGetCellNumber
000028  42a8              CMP      r0,r5                 ;99
00002a  d91c              BLS      |L11.102|
00002c  aa40              ADD      r2,sp,#0x100          ;101
00002e  a941              ADD      r1,sp,#0x104          ;101
000030  4628              MOV      r0,r5                 ;101
000032  f7fffffe          BL       getPhysicalCellPosition
000036  b180              CBZ      r0,|L11.90|
000038  f8180006          LDRB     r0,[r8,r6]
00003c  f81a1004          LDRB     r1,[r10,r4]
000040  4208              TST      r0,r1
000042  d00a              BEQ      |L11.90|
;;;110    			{
;;;111    				PhysicialPosition[Bmu] |= (1 << Position);
000044  f89d0104          LDRB     r0,[sp,#0x104]
000048  f89d2100          LDRB     r2,[sp,#0x100]
00004c  f8591020          LDR      r1,[r9,r0,LSL #2]
000050  fa07f202          LSL      r2,r7,r2
000054  4311              ORRS     r1,r1,r2
000056  f8491020          STR      r1,[r9,r0,LSL #2]
                  |L11.90|
00005a  1c64              ADDS     r4,r4,#1              ;97
00005c  b2e4              UXTB     r4,r4                 ;97
00005e  1c6d              ADDS     r5,r5,#1              ;97
000060  b2ad              UXTH     r5,r5                 ;97
000062  2c08              CMP      r4,#8                 ;97
000064  d3de              BCC      |L11.36|
                  |L11.102|
000066  1c76              ADDS     r6,r6,#1              ;95
000068  b2f6              UXTB     r6,r6                 ;95
                  |L11.106|
00006a  f7fffffe          BL       apiSysParGetCellNumber
00006e  42a8              CMP      r0,r5                 ;95
000070  d8d2              BHI      |L11.24|
;;;112    				//sprintf(str,"Balance %d %d",Bmu, Position);
;;;113    				//appBalanceDebugMsg(str);
;;;114    			}
;;;115    		}
;;;116    	}	
;;;117    	for(Bmu=0; Bmu < balanceBmuNumber(); Bmu++)
000072  2400              MOVS     r4,#0
000074  9441              STR      r4,[sp,#0x104]
000076  e008              B        |L11.138|
                  |L11.120|
;;;118    	{
;;;119    		uint32_t	d;
;;;120    		halAfeSetPhysicalBalancePosition(Bmu, PhysicialPosition[Bmu]);
000078  f8391020          LDRH     r1,[r9,r0,LSL #2]
00007c  b289              UXTH     r1,r1
00007e  f7fffffe          BL       halAfeSetPhysicalBalancePosition
000082  f89d0104          LDRB     r0,[sp,#0x104]        ;117
000086  1c40              ADDS     r0,r0,#1              ;117
000088  9041              STR      r0,[sp,#0x104]        ;117
                  |L11.138|
00008a  f7fffffe          BL       apiSysParGetBmuNumber
00008e  4601              MOV      r1,r0                 ;117
000090  f89d0104          LDRB     r0,[sp,#0x104]        ;117
000094  4281              CMP      r1,r0                 ;117
000096  d8ef              BHI      |L11.120|
;;;121    		//sprintf(str,"Physical: %d %.8lX",Bmu, PhysicialPosition[Bmu]);
;;;122    		//appBalanceDebugMsg(str);
;;;123    		//for(d=0; d<5000; d++);
;;;124    	}
;;;125    	//HalAfeSetPhysicalBalancePosition
;;;126    	balanceFunProcessor = 0;
000098  4804              LDR      r0,|L11.172|
00009a  6044              STR      r4,[r0,#4]  ; balanceFunProcessor
;;;127    }
00009c  b042              ADD      sp,sp,#0x108
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;128    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      ||.bss||
                  |L11.168|
                          DCD      ||.constdata||
                  |L11.172|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  BalanceFlag
                          %        51
                  BalanceFlagTemp
                          %        53
                  mDutyCondition
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  BitsTab
000000  01020408          DCB      0x01,0x02,0x04,0x08
000004  10204080          DCB      0x10,0x20,0x40,0x80
                  BitsTabMask
000008  fefdfbf7          DCB      0xfe,0xfd,0xfb,0xf7
00000c  efdfbf7f          DCB      0xef,0xdf,0xbf,0x7f

                          AREA ||.data||, DATA, ALIGN=2

                  BalanceDutyCount
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  balanceFunProcessor
                          DCD      0x00000000
                  EvtHandler
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\APP\\AppBalance.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_AppBalance_c_226d9e4c____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___12_AppBalance_c_226d9e4c____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_AppBalance_c_226d9e4c____REVSH|
#line 507
|__asm___12_AppBalance_c_226d9e4c____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___12_AppBalance_c_226d9e4c____RRX|
#line 694
|__asm___12_AppBalance_c_226d9e4c____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
