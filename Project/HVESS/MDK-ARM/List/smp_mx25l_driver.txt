; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_mx25l_driver.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_mx25l_driver.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\SMP\smp_MX25L_Driver.c]
                          THUMB

                          AREA ||i.MX25L_SPI_1_event_handler||, CODE, READONLY, ALIGN=2

                  MX25L_SPI_1_event_handler PROC
;;;414    
;;;415    void MX25L_SPI_1_event_handler(smp_spi_evt_type p_evt)
000000  b500              PUSH     {lr}
;;;416    {
000002  b0c5              SUB      sp,sp,#0x114
;;;417    	smp_flash_package	FlashPkg;
;;;418    	
;;;419    	switch(p_evt){
000004  2800              CMP      r0,#0
000006  d114              BNE      |L1.50|
;;;420    		case SMP_SPI_EVENT_DONE:	
;;;421    			if(UseDMAFlag == false){
000008  4811              LDR      r0,|L1.80|
00000a  7800              LDRB     r0,[r0,#0]  ; UseDMAFlag
00000c  2800              CMP      r0,#0
00000e  d010              BEQ      |L1.50|
;;;422    				return;
;;;423    			}
;;;424    			smp_fifo_flash_pop(&flash_read_fifo, &FlashPkg);
000010  a901              ADD      r1,sp,#4
000012  4810              LDR      r0,|L1.84|
000014  f7fffffe          BL       smp_fifo_flash_pop
;;;425    			
;;;426    			if(FlashPkg.command == MX25L_READ){
000018  f89d0004          LDRB     r0,[sp,#4]
00001c  2803              CMP      r0,#3
00001e  d00a              BEQ      |L1.54|
;;;427    				FlashPkg.flash_callback(SMP_FLASH_EVENT_READ_DONE);
;;;428    			}else if(FlashPkg.command == MX25L_FAST_READ){
000020  280b              CMP      r0,#0xb
000022  d00c              BEQ      |L1.62|
;;;429    				FlashPkg.flash_callback(SMP_FLASH_EVENT_READ_DONE);
;;;430    			}else if(FlashPkg.command == MX25L_PP){
000024  2802              CMP      r0,#2
000026  d00e              BEQ      |L1.70|
;;;431    				FlashPkg.flash_callback(SMP_FLASH_EVENT_WRITE_DONE);
;;;432    			}else if(FlashPkg.command == (MX25L_SE|MX25L_BE64|MX25L_CE)){
000028  28ff              CMP      r0,#0xff
00002a  d102              BNE      |L1.50|
;;;433    				FlashPkg.flash_callback(SMP_FLASH_EVENT_ERASE_DONE);
00002c  9944              LDR      r1,[sp,#0x110]
00002e  2002              MOVS     r0,#2
000030  4788              BLX      r1
                  |L1.50|
;;;434    			}
;;;435    
;;;436    		break;
;;;437    		default:
;;;438    		break;
;;;439    	}
;;;440    }
000032  b045              ADD      sp,sp,#0x114
000034  bd00              POP      {pc}
                  |L1.54|
000036  9944              LDR      r1,[sp,#0x110]        ;427
000038  2000              MOVS     r0,#0                 ;427
00003a  4788              BLX      r1                    ;427
00003c  e7f9              B        |L1.50|
                  |L1.62|
00003e  9944              LDR      r1,[sp,#0x110]        ;429
000040  2000              MOVS     r0,#0                 ;429
000042  4788              BLX      r1                    ;429
000044  e7f5              B        |L1.50|
                  |L1.70|
000046  9944              LDR      r1,[sp,#0x110]        ;431
000048  2001              MOVS     r0,#1                 ;431
00004a  4788              BLX      r1                    ;431
00004c  e7f1              B        |L1.50|
;;;441    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      ||.data||
                  |L1.84|
                          DCD      ||.bss||

                          AREA ||i.MX25L_SPI_send_command||, CODE, READONLY, ALIGN=2

                  MX25L_SPI_send_command PROC
;;;388    
;;;389    void MX25L_SPI_send_command(void)
000000  b530              PUSH     {r4,r5,lr}
;;;390    {
000002  b0c7              SUB      sp,sp,#0x11c
;;;391    	smp_flash_package	FlashPkg;
;;;392    	uint16_t size = 0;
000004  2500              MOVS     r5,#0
000006  9502              STR      r5,[sp,#8]
;;;393    	smp_fifo_flash_get_size(&flash_read_fifo,&size);
000008  a902              ADD      r1,sp,#8
00000a  482f              LDR      r0,|L2.200|
00000c  f7fffffe          BL       smp_fifo_flash_get_size
;;;394    	if(size > 0){
000010  f8bd0008          LDRH     r0,[sp,#8]
000014  2800              CMP      r0,#0
000016  d028              BEQ      |L2.106|
;;;395    		smp_mx25l_flash_write_enable();
000018  f7fffffe          BL       smp_mx25l_flash_write_enable
;;;396    		smp_fifo_flash_read(&flash_read_fifo, &FlashPkg);
00001c  a903              ADD      r1,sp,#0xc
00001e  482a              LDR      r0,|L2.200|
000020  f7fffffe          BL       smp_fifo_flash_read
;;;397    		MX25L_tx_data[0] = FlashPkg.command;
000024  4828              LDR      r0,|L2.200|
000026  f89d100c          LDRB     r1,[sp,#0xc]
00002a  301c              ADDS     r0,r0,#0x1c
00002c  7001              STRB     r1,[r0,#0]
;;;398    		memcpy(&MX25L_tx_data[1], FlashPkg.addr, 3);
00002e  4a26              LDR      r2,|L2.200|
000030  f8bd300d          LDRH     r3,[sp,#0xd]
000034  f8a2301d          STRH     r3,[r2,#0x1d]
000038  f89d300f          LDRB     r3,[sp,#0xf]
00003c  77d3              STRB     r3,[r2,#0x1f]
;;;399    		UseDMAFlag = true;
00003e  4b23              LDR      r3,|L2.204|
000040  2201              MOVS     r2,#1
000042  701a              STRB     r2,[r3,#0]
;;;400    		if(FlashPkg.command == MX25L_READ){
;;;401    			smp_spi_master_send_recv(&MX25L_SPI_1, (uint8_t* )&FlashPkg , 4 , MX25L_rx_data, FlashPkg.R_W_bytes, &MX25L_CS0);
000044  f1a0040c          SUB      r4,r0,#0xc
000048  2903              CMP      r1,#3                 ;400
00004a  d010              BEQ      |L2.110|
;;;402    		}else if(FlashPkg.command == MX25L_FAST_READ){
00004c  290b              CMP      r1,#0xb
00004e  d01a              BEQ      |L2.134|
;;;403    			smp_spi_master_send_recv(&MX25L_SPI_1, (uint8_t* )&FlashPkg , 5 , FlashPkg.read_buffer, FlashPkg.R_W_bytes, &MX25L_CS0);
;;;404    		}else if(FlashPkg.command == MX25L_PP){
000050  2902              CMP      r1,#2
000052  d024              BEQ      |L2.158|
;;;405    			memcpy(&MX25L_tx_data[4], FlashPkg.page_buffer, 256);
;;;406    			smp_spi_master_send_recv(&MX25L_SPI_1, MX25L_tx_data , FlashPkg.R_W_bytes + 4 , 0, 0, &MX25L_CS0);		
;;;407    		}else if(FlashPkg.command == MX25L_SE){
000054  2920              CMP      r1,#0x20
000056  d108              BNE      |L2.106|
;;;408    			smp_spi_master_send_recv(&MX25L_SPI_1, (uint8_t *)&FlashPkg , 4 , 0, 0, &MX25L_CS0);
000058  481c              LDR      r0,|L2.204|
00005a  e9cd5400          STRD     r5,r4,[sp,#0]
00005e  2300              MOVS     r3,#0
000060  2204              MOVS     r2,#4
000062  a903              ADD      r1,sp,#0xc
000064  1c40              ADDS     r0,r0,#1
000066  f7fffffe          BL       smp_spi_master_send_recv
                  |L2.106|
;;;409    		
;;;410    		}
;;;411    	}	
;;;412    
;;;413    }
00006a  b047              ADD      sp,sp,#0x11c
00006c  bd30              POP      {r4,r5,pc}
                  |L2.110|
00006e  f8bd0012          LDRH     r0,[sp,#0x12]         ;401
000072  e9cd0400          STRD     r0,r4,[sp,#0]         ;401
000076  4815              LDR      r0,|L2.204|
000078  4b15              LDR      r3,|L2.208|
00007a  2204              MOVS     r2,#4                 ;401
00007c  a903              ADD      r1,sp,#0xc            ;401
00007e  1c40              ADDS     r0,r0,#1              ;401
000080  f7fffffe          BL       smp_spi_master_send_recv
000084  e7f1              B        |L2.106|
                  |L2.134|
000086  f8bd0012          LDRH     r0,[sp,#0x12]         ;403
00008a  e9cd0400          STRD     r0,r4,[sp,#0]         ;403
00008e  480f              LDR      r0,|L2.204|
000090  2205              MOVS     r2,#5                 ;403
000092  a903              ADD      r1,sp,#0xc            ;403
000094  1c40              ADDS     r0,r0,#1              ;403
000096  9b45              LDR      r3,[sp,#0x114]        ;403
000098  f7fffffe          BL       smp_spi_master_send_recv
00009c  e7e5              B        |L2.106|
                  |L2.158|
00009e  f44f7280          MOV      r2,#0x100             ;405
0000a2  a905              ADD      r1,sp,#0x14           ;405
0000a4  1d00              ADDS     r0,r0,#4              ;405
0000a6  f7fffffe          BL       __aeabi_memcpy4
0000aa  f8bd0012          LDRH     r0,[sp,#0x12]         ;406
0000ae  e9cd5400          STRD     r5,r4,[sp,#0]         ;406
0000b2  1d00              ADDS     r0,r0,#4              ;406
0000b4  b282              UXTH     r2,r0                 ;406
0000b6  4904              LDR      r1,|L2.200|
0000b8  4804              LDR      r0,|L2.204|
0000ba  2300              MOVS     r3,#0                 ;406
0000bc  311c              ADDS     r1,r1,#0x1c           ;406
0000be  1c40              ADDS     r0,r0,#1              ;406
0000c0  f7fffffe          BL       smp_spi_master_send_recv
0000c4  e7d1              B        |L2.106|
;;;414    
                          ENDP

0000c6  0000              DCW      0x0000
                  |L2.200|
                          DCD      ||.bss||
                  |L2.204|
                          DCD      ||.data||
                  |L2.208|
                          DCD      ||.bss||+0x11c

                          AREA ||i.flash_fifo_init||, CODE, READONLY, ALIGN=1

                  flash_fifo_init PROC
;;;101    													
;;;102    int8_t flash_fifo_init(smp_fifo_flash_t * p_fifo, smp_flash_package * p_buf, uint16_t buf_size)
000000  2900              CMP      r1,#0
;;;103    {
000002  d007              BEQ      |L3.20|
;;;104        // Check buffer for null pointer.
;;;105        if (p_buf == NULL){
;;;106            return SMP_ERROR_NULL;
;;;107        }
;;;108        p_fifo->buffer_addr   = (smp_flash_package *)p_buf;
000004  6001              STR      r1,[r0,#0]
;;;109        p_fifo->buffer_size 	= buf_size - 1;
000006  1e52              SUBS     r2,r2,#1
000008  8082              STRH     r2,[r0,#4]
;;;110        p_fifo->in      			= 0;
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;111        p_fifo->out     			= 0;
00000e  60c1              STR      r1,[r0,#0xc]
;;;112    
;;;113        return SMP_SUCCESS;
000010  2000              MOVS     r0,#0
;;;114    }
000012  4770              BX       lr
                  |L3.20|
000014  f06f000a          MVN      r0,#0xa               ;106
000018  4770              BX       lr
;;;115    
                          ENDP


                          AREA ||i.smp_mx25l_flash_block_erase||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_block_erase PROC
;;;314    
;;;315    int8_t smp_mx25l_flash_block_erase(uint8_t *flash_addr , smp_flash_event_t smp_flash_event_handle)
000000  b500              PUSH     {lr}
;;;316    { 
000002  b0c5              SUB      sp,sp,#0x114
;;;317    	/* Send "block erase (BE)" command 64k bytes*/
;;;318    	smp_flash_package	FlashPkg;
;;;319    	FlashPkg.command = MX25L_BE64;
000004  22d8              MOVS     r2,#0xd8
000006  f88d2004          STRB     r2,[sp,#4]
;;;320    	memcpy(FlashPkg.addr, flash_addr, 3);
00000a  8802              LDRH     r2,[r0,#0]
00000c  f8ad2005          STRH     r2,[sp,#5]
000010  7880              LDRB     r0,[r0,#2]
000012  f88d0007          STRB     r0,[sp,#7]
;;;321    	FlashPkg.flash_callback = smp_flash_event_handle;
000016  9144              STR      r1,[sp,#0x110]
;;;322    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
000018  a901              ADD      r1,sp,#4
00001a  4805              LDR      r0,|L4.48|
00001c  f7fffffe          BL       smp_fifo_flash_push
000020  b118              CBZ      r0,|L4.42|
;;;323    		return SMP_SUCCESS;
;;;324    	}
;;;325      return SMP_ERROR_RESOURCES;
000022  f06f000d          MVN      r0,#0xd
                  |L4.38|
;;;326    }
000026  b045              ADD      sp,sp,#0x114
000028  bd00              POP      {pc}
                  |L4.42|
00002a  2000              MOVS     r0,#0                 ;323
00002c  e7fb              B        |L4.38|
;;;327    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_chip_erase||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_chip_erase PROC
;;;327    
;;;328    int8_t smp_mx25l_flash_chip_erase(smp_flash_event_t smp_flash_event_handle)
000000  b500              PUSH     {lr}
;;;329    {
000002  b0c5              SUB      sp,sp,#0x114
;;;330      /* Send "Chip erase (CE)" command */
;;;331    	smp_flash_package	FlashPkg;
;;;332    	FlashPkg.command = MX25L_CE;
000004  21c7              MOVS     r1,#0xc7
000006  f88d1004          STRB     r1,[sp,#4]
;;;333    	FlashPkg.flash_callback = smp_flash_event_handle;
00000a  9044              STR      r0,[sp,#0x110]
;;;334    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
00000c  a901              ADD      r1,sp,#4
00000e  4805              LDR      r0,|L5.36|
000010  f7fffffe          BL       smp_fifo_flash_push
000014  b118              CBZ      r0,|L5.30|
;;;335    		return SMP_SUCCESS;
;;;336    	}
;;;337      return SMP_ERROR_RESOURCES;
000016  f06f000d          MVN      r0,#0xd
                  |L5.26|
;;;338    }
00001a  b045              ADD      sp,sp,#0x114
00001c  bd00              POP      {pc}
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;335
000020  e7fb              B        |L5.26|
;;;339    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_deep_power_down||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_deep_power_down PROC
;;;368    
;;;369    int8_t smp_mx25l_flash_deep_power_down(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;370    {
;;;371      /* Send "Deep power-down (DP)" command */
;;;372    	int8_t tempstate;
;;;373    	MX25L_tx_data[0] = MX25L_DP;
000002  4909              LDR      r1,|L6.40|
000004  20b9              MOVS     r0,#0xb9
000006  7008              STRB     r0,[r1,#0]
;;;374    	UseDMAFlag = false;
000008  4908              LDR      r1,|L6.44|
00000a  2000              MOVS     r0,#0
00000c  7008              STRB     r0,[r1,#0]
;;;375    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , 0, 0 , &MX25L_CS0);
00000e  4906              LDR      r1,|L6.40|
000010  2300              MOVS     r3,#0
000012  390c              SUBS     r1,r1,#0xc
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  4804              LDR      r0,|L6.44|
00001a  2201              MOVS     r2,#1
00001c  310c              ADDS     r1,r1,#0xc
00001e  1c40              ADDS     r0,r0,#1
000020  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;376      return tempstate;
;;;377    }
000024  bd1c              POP      {r2-r4,pc}
;;;378    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      ||.bss||+0x1c
                  |L6.44|
                          DCD      ||.data||

                          AREA ||i.smp_mx25l_flash_fast_read_data_bytes_addr||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_fast_read_data_bytes_addr PROC
;;;235    
;;;236    int8_t smp_mx25l_flash_fast_read_data_bytes_addr(uint8_t *flash_addr ,uint8_t *buffer, uint16_t read_byte_num , smp_flash_event_t smp_flash_event_handle)
000000  b510              PUSH     {r4,lr}
;;;237    {
000002  b0c4              SUB      sp,sp,#0x110
;;;238      /* Send "read data bytes (READ)" command */
;;;239    	smp_flash_package	FlashPkg;
;;;240    	FlashPkg.command = MX25L_FAST_READ;
000004  240b              MOVS     r4,#0xb
000006  f88d4000          STRB     r4,[sp,#0]
;;;241    	memcpy(FlashPkg.addr, flash_addr, 3);
00000a  8804              LDRH     r4,[r0,#0]
00000c  f8ad4001          STRH     r4,[sp,#1]
000010  7880              LDRB     r0,[r0,#2]
000012  f88d0003          STRB     r0,[sp,#3]
;;;242    	FlashPkg.read_buffer = buffer;
000016  9142              STR      r1,[sp,#0x108]
;;;243    	FlashPkg.Dummy = MX25L_DUMMY;
000018  20ff              MOVS     r0,#0xff
00001a  f88d0004          STRB     r0,[sp,#4]
;;;244    	FlashPkg.R_W_bytes = read_byte_num;
00001e  f8ad2006          STRH     r2,[sp,#6]
;;;245    	FlashPkg.flash_callback = smp_flash_event_handle;
000022  9343              STR      r3,[sp,#0x10c]
;;;246    	
;;;247    	#ifdef MX25LXXX_DEBUG_PRINTF 
;;;248    	printf("flash read addr 0x%02x%02x%02x\r\n",FlashPkg.addr[0],FlashPkg.addr[1],FlashPkg.addr[2]);
;;;249    	#endif 
;;;250    	
;;;251    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
000024  4669              MOV      r1,sp
000026  4805              LDR      r0,|L7.60|
000028  f7fffffe          BL       smp_fifo_flash_push
00002c  b118              CBZ      r0,|L7.54|
;;;252    		return SMP_SUCCESS;
;;;253    	}
;;;254      return SMP_ERROR_RESOURCES;
00002e  f06f000d          MVN      r0,#0xd
                  |L7.50|
;;;255    }
000032  b044              ADD      sp,sp,#0x110
000034  bd10              POP      {r4,pc}
                  |L7.54|
000036  2000              MOVS     r0,#0                 ;252
000038  e7fb              B        |L7.50|
;;;256    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_fast_read_data_bytes_page||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_fast_read_data_bytes_page PROC
;;;256    
;;;257    int8_t smp_mx25l_flash_fast_read_data_bytes_page(uint16_t page , uint8_t *buffer , uint16_t read_byte_num , smp_flash_event_t smp_flash_event_handle)
000000  b510              PUSH     {r4,lr}
;;;258    {
000002  b0c4              SUB      sp,sp,#0x110
;;;259      /* Send "read data bytes (READ)" command */
;;;260    	smp_flash_package	FlashPkg;
;;;261    	FlashPkg.command = MX25L_FAST_READ;
000004  240b              MOVS     r4,#0xb
000006  f88d4000          STRB     r4,[sp,#0]
;;;262      FlashPkg.addr[0] = (uint8_t)((page << MX25L_MX25L6433F_PAGE_SHIFT) >> 16) ;
00000a  0a04              LSRS     r4,r0,#8
00000c  f88d4001          STRB     r4,[sp,#1]
;;;263    	FlashPkg.addr[1] = (uint8_t)((page << MX25L_MX25L6433F_PAGE_SHIFT) >> 8) ;
000010  f88d0002          STRB     r0,[sp,#2]
;;;264    	FlashPkg.addr[2] = (uint8_t)(page << MX25L_MX25L6433F_PAGE_SHIFT);
000014  2000              MOVS     r0,#0
000016  f88d0003          STRB     r0,[sp,#3]
;;;265    	
;;;266    	#ifdef MX25LXXX_DEBUG_PRINTF 
;;;267    	printf("flash read page 0x%x\r\n",page);
;;;268    	printf("flash read addr 0x%02x%02x%02x\r\n",FlashPkg.addr[0],FlashPkg.addr[1],FlashPkg.addr[2]);
;;;269    	#endif
;;;270    	
;;;271    	FlashPkg.read_buffer = buffer;
00001a  9142              STR      r1,[sp,#0x108]
;;;272    	FlashPkg.Dummy = MX25L_DUMMY;
00001c  20ff              MOVS     r0,#0xff
00001e  f88d0004          STRB     r0,[sp,#4]
;;;273    	FlashPkg.R_W_bytes = read_byte_num;
000022  f8ad2006          STRH     r2,[sp,#6]
;;;274    	FlashPkg.flash_callback = smp_flash_event_handle;
000026  9343              STR      r3,[sp,#0x10c]
;;;275    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
000028  4669              MOV      r1,sp
00002a  4805              LDR      r0,|L8.64|
00002c  f7fffffe          BL       smp_fifo_flash_push
000030  b118              CBZ      r0,|L8.58|
;;;276    		return SMP_SUCCESS;
;;;277    	}
;;;278      return SMP_ERROR_RESOURCES;
000032  f06f000d          MVN      r0,#0xd
                  |L8.54|
;;;279    }
000036  b044              ADD      sp,sp,#0x110
000038  bd10              POP      {r4,pc}
                  |L8.58|
00003a  2000              MOVS     r0,#0                 ;276
00003c  e7fb              B        |L8.54|
;;;280    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_init||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_init PROC
;;;115    
;;;116    int8_t smp_mx25l_flash_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;117    {
;;;118    	//initial MX25L write protection pin
;;;119    	MX25L_write_protection_handler.port = BSP_MX25L_WRITE_PROTECTON_GPIO_PORT;
000002  4820              LDR      r0,|L9.132|
000004  2401              MOVS     r4,#1
000006  7004              STRB     r4,[r0,#0]
;;;120    	MX25L_write_protection_handler.pin = BSP_MX25L_WRITE_PROTECTON_PIN;
000008  2104              MOVS     r1,#4
00000a  7041              STRB     r1,[r0,#1]
;;;121    	MX25L_write_protection_handler.mode = SMP_GPIO_MODE_OUTPUT_OD;	
00000c  2102              MOVS     r1,#2
00000e  7081              STRB     r1,[r0,#2]
;;;122    	
;;;123    	#ifdef MX25LXXX_DEBUG_PRINTF 
;;;124    	printf("flash init\r\n");
;;;125    	#endif 
;;;126    	
;;;127    	if(smp_gpio_init(&MX25L_write_protection_handler) != HAL_OK){
000010  f7fffffe          BL       smp_gpio_init
;;;128    		return SMP_ERROR_NOT_FOUND;
000014  1ea5              SUBS     r5,r4,#2
000016  b108              CBZ      r0,|L9.28|
000018  4628              MOV      r0,r5
;;;129    	}
;;;130    	smp_gpio_set_state(&MX25L_write_protection_handler, GPIO_ACTIVE_HIGH);
;;;131    	
;;;132    	// CS Initial
;;;133    	MX25L_PIN.port = BSP_MX25L_CS_GPIO_PORT;
;;;134    	MX25L_PIN.pin = BSP_MX25L_CS_PIN;	
;;;135    	MX25L_CS0.spi_num = SPI_module2;
;;;136    	MX25L_CS0.cs_handler = MX25L_PIN;	
;;;137    	smp_spi_master_cs_init(&MX25L_CS0);
;;;138    	
;;;139    	MX25L_SPI_1.num = SPI_module2;
;;;140    	MX25L_SPI_1.mode = SPI_mode0;
;;;141    	if(smp_spi_master_init(&MX25L_SPI_1, MX25L_SPI_1_event_handler, false) != SMP_SUCCESS){
;;;142    		return SMP_ERROR_NOT_FOUND;
;;;143    	}
;;;144    	// Configure buffer RX buffer.
;;;145    	flash_fifo_init(&flash_read_fifo, mDavinci_flash.buffers.rx_buf, mDavinci_flash.buffers.rx_buf_size);
;;;146    	smp_fifo_flash_open(&flash_read_fifo);
;;;147    	
;;;148    	return SMP_SUCCESS;	
;;;149    }
00001a  bd70              POP      {r4-r6,pc}
                  |L9.28|
00001c  2101              MOVS     r1,#1                 ;130
00001e  4819              LDR      r0,|L9.132|
000020  f7fffffe          BL       smp_gpio_set_state
000024  4917              LDR      r1,|L9.132|
000026  3108              ADDS     r1,r1,#8              ;133
000028  700c              STRB     r4,[r1,#0]            ;133
00002a  2003              MOVS     r0,#3                 ;134
00002c  7048              STRB     r0,[r1,#1]            ;134
00002e  4816              LDR      r0,|L9.136|
000030  7004              STRB     r4,[r0,#0]            ;135
000032  4a14              LDR      r2,|L9.132|
000034  f1a00110          SUB      r1,r0,#0x10           ;136
000038  3a0c              SUBS     r2,r2,#0xc            ;136
00003a  e9d20205          LDRD     r0,r2,[r2,#0x14]      ;136
00003e  e9c10205          STRD     r0,r2,[r1,#0x14]      ;136
000042  4811              LDR      r0,|L9.136|
000044  f7fffffe          BL       smp_spi_master_cs_init
000048  490e              LDR      r1,|L9.132|
00004a  390b              SUBS     r1,r1,#0xb            ;139
00004c  700c              STRB     r4,[r1,#0]            ;139
00004e  2000              MOVS     r0,#0                 ;140
000050  7048              STRB     r0,[r1,#1]            ;140
000052  480c              LDR      r0,|L9.132|
000054  2200              MOVS     r2,#0                 ;141
000056  490d              LDR      r1,|L9.140|
000058  380b              SUBS     r0,r0,#0xb            ;141
00005a  f7fffffe          BL       smp_spi_master_init
00005e  b108              CBZ      r0,|L9.100|
000060  4628              MOV      r0,r5                 ;142
000062  bd70              POP      {r4-r6,pc}
                  |L9.100|
000064  4807              LDR      r0,|L9.132|
000066  3808              SUBS     r0,r0,#8              ;145
000068  8881              LDRH     r1,[r0,#4]            ;145  ; mDavinci_flash
00006a  b28a              UXTH     r2,r1                 ;145
00006c  6801              LDR      r1,[r0,#0]            ;145  ; mDavinci_flash
00006e  4806              LDR      r0,|L9.136|
000070  3810              SUBS     r0,r0,#0x10           ;145
000072  f7fffffe          BL       flash_fifo_init
000076  4804              LDR      r0,|L9.136|
000078  3810              SUBS     r0,r0,#0x10           ;146
00007a  f7fffffe          BL       smp_fifo_flash_open
00007e  2000              MOVS     r0,#0                 ;148
000080  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP

000082  0000              DCW      0x0000
                  |L9.132|
                          DCD      ||.data||+0xc
                  |L9.136|
                          DCD      ||.bss||+0x10
                  |L9.140|
                          DCD      MX25L_SPI_1_event_handler

                          AREA ||i.smp_mx25l_flash_page_program||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_page_program PROC
;;;339    
;;;340    int8_t smp_mx25l_flash_page_program(uint16_t page,uint8_t *buffer,uint16_t write_byte_num,smp_flash_event_t smp_flash_event_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;341    {
000002  b0c4              SUB      sp,sp,#0x110
000004  4615              MOV      r5,r2
000006  461e              MOV      r6,r3
;;;342      /* Send "page program (PP)" command */
;;;343    	uint32_t addr = 0;
;;;344    	smp_flash_package	FlashPkg;
;;;345    	FlashPkg.command = MX25L_PP;
000008  2202              MOVS     r2,#2
00000a  f88d2000          STRB     r2,[sp,#0]
;;;346    	addr = page << MX25L_MX25L6433F_PAGE_SHIFT;
00000e  0200              LSLS     r0,r0,#8
;;;347    	if(addr > 0x7FFF00){
000010  4a11              LDR      r2,|L10.88|
000012  4290              CMP      r0,r2
000014  d903              BLS      |L10.30|
;;;348    		return SMP_ERROR_INVALID_PARAM;
000016  f06f0002          MVN      r0,#2
                  |L10.26|
;;;349    	}
;;;350    	FlashPkg.addr[0] = (uint8_t)(addr >> 16) ;
;;;351    	FlashPkg.addr[1] = (uint8_t)(addr >> 8) ;
;;;352    	FlashPkg.addr[2] = (uint8_t)addr;
;;;353    	memcpy(FlashPkg.page_buffer, buffer, 256);
;;;354    	
;;;355    	#ifdef MX25LXXX_DEBUG_PRINTF 
;;;356    	printf("flash wr page 0x%x\r\n",page);
;;;357    	printf("flash wr addr 0x%02x%02x%02x\r\n",FlashPkg.addr[0],FlashPkg.addr[1],FlashPkg.addr[2]);
;;;358    	#endif
;;;359    	
;;;360    	FlashPkg.Dummy = 0;
;;;361    	FlashPkg.R_W_bytes = write_byte_num;
;;;362    	FlashPkg.flash_callback = smp_flash_event_handle;
;;;363    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
;;;364    		return SMP_SUCCESS;
;;;365    	}
;;;366      return SMP_ERROR_RESOURCES;
;;;367    }
00001a  b044              ADD      sp,sp,#0x110
00001c  bd70              POP      {r4-r6,pc}
                  |L10.30|
00001e  0c02              LSRS     r2,r0,#16             ;350
000020  f88d2001          STRB     r2,[sp,#1]            ;350
000024  0a00              LSRS     r0,r0,#8              ;351
000026  f88d0002          STRB     r0,[sp,#2]            ;351
00002a  2400              MOVS     r4,#0                 ;352
00002c  f88d4003          STRB     r4,[sp,#3]            ;352
000030  f44f7280          MOV      r2,#0x100             ;353
000034  a802              ADD      r0,sp,#8              ;353
000036  f7fffffe          BL       __aeabi_memcpy
00003a  f88d4004          STRB     r4,[sp,#4]            ;360
00003e  f8ad5006          STRH     r5,[sp,#6]            ;361
000042  9643              STR      r6,[sp,#0x10c]        ;362
000044  4669              MOV      r1,sp                 ;363
000046  4805              LDR      r0,|L10.92|
000048  f7fffffe          BL       smp_fifo_flash_push
00004c  b110              CBZ      r0,|L10.84|
00004e  f06f000d          MVN      r0,#0xd               ;366
000052  e7e2              B        |L10.26|
                  |L10.84|
000054  2000              MOVS     r0,#0                 ;364
000056  e7e0              B        |L10.26|
;;;368    
                          ENDP

                  |L10.88|
                          DCD      0x007fff00
                  |L10.92|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_read_ID||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_read_ID PROC
;;;170    
;;;171    int8_t smp_mx25l_flash_read_ID(smp_mx25l_ID *mx251_ID)
000000  b51c              PUSH     {r2-r4,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173      /* Send "read ID (RDID)" command */
;;;174    	int8_t tempstate;
;;;175    	MX25L_tx_data[0] = MX25L_RDID;
000004  490d              LDR      r1,|L11.60|
000006  209f              MOVS     r0,#0x9f
000008  7008              STRB     r0,[r1,#0]
;;;176    	UseDMAFlag = false;
00000a  490d              LDR      r1,|L11.64|
00000c  2000              MOVS     r0,#0
00000e  7008              STRB     r0,[r1,#0]
;;;177    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , MX25L_rx_data, 3 , &MX25L_CS0);
000010  480a              LDR      r0,|L11.60|
000012  2103              MOVS     r1,#3
000014  380c              SUBS     r0,r0,#0xc
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  f5007386          ADD      r3,r0,#0x10c
00001e  4808              LDR      r0,|L11.64|
000020  2201              MOVS     r2,#1
000022  4906              LDR      r1,|L11.60|
000024  1c40              ADDS     r0,r0,#1
000026  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;178    	mx251_ID->Manufacture_ID = MX25L_rx_data[0];
00002a  4906              LDR      r1,|L11.68|
00002c  780a              LDRB     r2,[r1,#0]  ; MX25L_rx_data
00002e  7022              STRB     r2,[r4,#0]
;;;179    	mx251_ID->Device_ID = (MX25L_rx_data[1] << 8) + MX25L_rx_data[2];
000030  788a              LDRB     r2,[r1,#2]  ; MX25L_rx_data
000032  7849              LDRB     r1,[r1,#1]  ; MX25L_rx_data
000034  eb022101          ADD      r1,r2,r1,LSL #8
000038  8061              STRH     r1,[r4,#2]
;;;180      return tempstate;
;;;181    }
00003a  bd1c              POP      {r2-r4,pc}
;;;182    
                          ENDP

                  |L11.60|
                          DCD      ||.bss||+0x1c
                  |L11.64|
                          DCD      ||.data||
                  |L11.68|
                          DCD      ||.bss||+0x11c

                          AREA ||i.smp_mx25l_flash_read_configuration||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_read_configuration PROC
;;;194    
;;;195    int8_t smp_mx25l_flash_read_configuration(smp_mx25l_config *mx251_config)
000000  b51c              PUSH     {r2-r4,lr}
;;;196    {
000002  4604              MOV      r4,r0
;;;197      /* Send "read config (RDCR)" command */
;;;198    	int8_t tempstate;
;;;199    	MX25L_tx_data[0] = MX25L_RDCR;
000004  490c              LDR      r1,|L12.56|
000006  2015              MOVS     r0,#0x15
000008  7008              STRB     r0,[r1,#0]
;;;200    	UseDMAFlag = false;
00000a  490c              LDR      r1,|L12.60|
00000c  2000              MOVS     r0,#0
00000e  7008              STRB     r0,[r1,#0]
;;;201    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , MX25L_rx_data, 2 , &MX25L_CS0);
000010  4809              LDR      r0,|L12.56|
000012  2102              MOVS     r1,#2
000014  380c              SUBS     r0,r0,#0xc
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  f5007386          ADD      r3,r0,#0x10c
00001e  4807              LDR      r0,|L12.60|
000020  2201              MOVS     r2,#1
000022  4905              LDR      r1,|L12.56|
000024  1c40              ADDS     r0,r0,#1
000026  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;202    	mx251_config->config1 = MX25L_rx_data[0];
00002a  4905              LDR      r1,|L12.64|
00002c  780a              LDRB     r2,[r1,#0]  ; MX25L_rx_data
00002e  7022              STRB     r2,[r4,#0]
;;;203    	mx251_config->config2 = MX25L_rx_data[1];
000030  7849              LDRB     r1,[r1,#1]  ; MX25L_rx_data
000032  7061              STRB     r1,[r4,#1]
;;;204      return tempstate;
;;;205    }
000034  bd1c              POP      {r2-r4,pc}
;;;206    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      ||.bss||+0x1c
                  |L12.60|
                          DCD      ||.data||
                  |L12.64|
                          DCD      ||.bss||+0x11c

                          AREA ||i.smp_mx25l_flash_read_data_bytes||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_read_data_bytes PROC
;;;220    
;;;221    int8_t smp_mx25l_flash_read_data_bytes(uint8_t *flash_addr,uint16_t read_byte_num,smp_flash_event_t smp_flash_event_handle)
000000  b500              PUSH     {lr}
;;;222    {
000002  b0c5              SUB      sp,sp,#0x114
;;;223      /* Send "read data bytes (READ)" command */
;;;224    	smp_flash_package	FlashPkg;
;;;225    	FlashPkg.command = MX25L_READ;
000004  2303              MOVS     r3,#3
000006  f88d3004          STRB     r3,[sp,#4]
;;;226    	memcpy(FlashPkg.addr, flash_addr, 3);
00000a  8803              LDRH     r3,[r0,#0]
00000c  f8ad3005          STRH     r3,[sp,#5]
000010  7880              LDRB     r0,[r0,#2]
000012  f88d0007          STRB     r0,[sp,#7]
;;;227    	FlashPkg.Dummy = 0;
000016  2000              MOVS     r0,#0
000018  f88d0008          STRB     r0,[sp,#8]
;;;228    	FlashPkg.R_W_bytes = read_byte_num;
00001c  f8ad100a          STRH     r1,[sp,#0xa]
;;;229    	FlashPkg.flash_callback = smp_flash_event_handle;
000020  9244              STR      r2,[sp,#0x110]
;;;230    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
000022  a901              ADD      r1,sp,#4
000024  4804              LDR      r0,|L13.56|
000026  f7fffffe          BL       smp_fifo_flash_push
00002a  b118              CBZ      r0,|L13.52|
;;;231    		return SMP_SUCCESS;
;;;232    	}
;;;233      return SMP_ERROR_RESOURCES;
00002c  f06f000d          MVN      r0,#0xd
                  |L13.48|
;;;234    }
000030  b045              ADD      sp,sp,#0x114
000032  bd00              POP      {pc}
                  |L13.52|
000034  2000              MOVS     r0,#0                 ;231
000036  e7fb              B        |L13.48|
;;;235    
                          ENDP

                  |L13.56|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_read_status||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_read_status PROC
;;;182    
;;;183    int8_t smp_mx25l_flash_read_status(smp_mx25l_status *mx251_status)
000000  b51c              PUSH     {r2-r4,lr}
;;;184    {
000002  4604              MOV      r4,r0
;;;185      /* Send "read status (RDSR)" command */
;;;186    	int8_t tempstate;
;;;187    	MX25L_tx_data[0] = MX25L_RDSR;
000004  490c              LDR      r1,|L14.56|
000006  2005              MOVS     r0,#5
000008  7008              STRB     r0,[r1,#0]
;;;188    	UseDMAFlag = false;
00000a  490c              LDR      r1,|L14.60|
00000c  2000              MOVS     r0,#0
00000e  7008              STRB     r0,[r1,#0]
;;;189    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , MX25L_rx_data, 2 , &MX25L_CS0);
000010  4809              LDR      r0,|L14.56|
000012  2102              MOVS     r1,#2
000014  380c              SUBS     r0,r0,#0xc
000016  e9cd1000          STRD     r1,r0,[sp,#0]
00001a  f5007386          ADD      r3,r0,#0x10c
00001e  4807              LDR      r0,|L14.60|
000020  2201              MOVS     r2,#1
000022  4905              LDR      r1,|L14.56|
000024  1c40              ADDS     r0,r0,#1
000026  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;190    	mx251_status->status1 = MX25L_rx_data[0];
00002a  4905              LDR      r1,|L14.64|
00002c  780a              LDRB     r2,[r1,#0]  ; MX25L_rx_data
00002e  7022              STRB     r2,[r4,#0]
;;;191    	mx251_status->status2 = MX25L_rx_data[1];
000030  7849              LDRB     r1,[r1,#1]  ; MX25L_rx_data
000032  7061              STRB     r1,[r4,#1]
;;;192      return tempstate;
;;;193    }
000034  bd1c              POP      {r2-r4,pc}
;;;194    
                          ENDP

000036  0000              DCW      0x0000
                  |L14.56|
                          DCD      ||.bss||+0x1c
                  |L14.60|
                          DCD      ||.data||
                  |L14.64|
                          DCD      ||.bss||+0x11c

                          AREA ||i.smp_mx25l_flash_release_deep_power_down||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_release_deep_power_down PROC
;;;378    
;;;379    int8_t smp_mx25l_flash_release_deep_power_down(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;380    {
;;;381      /* Send "Release from Deep Power-down (RDP)" command */
;;;382    	int8_t tempstate;
;;;383    	MX25L_tx_data[0] = MX25L_RDP;
000002  4909              LDR      r1,|L15.40|
000004  20ab              MOVS     r0,#0xab
000006  7008              STRB     r0,[r1,#0]
;;;384    	UseDMAFlag = false;
000008  4908              LDR      r1,|L15.44|
00000a  2000              MOVS     r0,#0
00000c  7008              STRB     r0,[r1,#0]
;;;385    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , 0, 0 , &MX25L_CS0);
00000e  4906              LDR      r1,|L15.40|
000010  2300              MOVS     r3,#0
000012  390c              SUBS     r1,r1,#0xc
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  4804              LDR      r0,|L15.44|
00001a  2201              MOVS     r2,#1
00001c  310c              ADDS     r1,r1,#0xc
00001e  1c40              ADDS     r0,r0,#1
000020  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;386      return tempstate;
;;;387    }
000024  bd1c              POP      {r2-r4,pc}
;;;388    
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      ||.bss||+0x1c
                  |L15.44|
                          DCD      ||.data||

                          AREA ||i.smp_mx25l_flash_sector_erase_addr||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_sector_erase_addr PROC
;;;280    
;;;281    int8_t smp_mx25l_flash_sector_erase_addr(uint8_t *flash_addr , smp_flash_event_t smp_flash_event_handle)
000000  b500              PUSH     {lr}
;;;282    {
000002  b0c5              SUB      sp,sp,#0x114
;;;283      /* Send "sector_erase (SE)" command */
;;;284    	smp_flash_package	FlashPkg;
;;;285    	FlashPkg.command = MX25L_SE;
000004  2220              MOVS     r2,#0x20
000006  f88d2004          STRB     r2,[sp,#4]
;;;286    	memcpy(FlashPkg.addr, flash_addr, 3);
00000a  8802              LDRH     r2,[r0,#0]
00000c  f8ad2005          STRH     r2,[sp,#5]
000010  7880              LDRB     r0,[r0,#2]
000012  f88d0007          STRB     r0,[sp,#7]
;;;287    	FlashPkg.flash_callback = smp_flash_event_handle;
000016  9144              STR      r1,[sp,#0x110]
;;;288    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
000018  a901              ADD      r1,sp,#4
00001a  4805              LDR      r0,|L16.48|
00001c  f7fffffe          BL       smp_fifo_flash_push
000020  b118              CBZ      r0,|L16.42|
;;;289    		return SMP_SUCCESS;
;;;290    	}
;;;291      return SMP_ERROR_RESOURCES;
000022  f06f000d          MVN      r0,#0xd
                  |L16.38|
;;;292    }
000026  b045              ADD      sp,sp,#0x114
000028  bd00              POP      {pc}
                  |L16.42|
00002a  2000              MOVS     r0,#0                 ;289
00002c  e7fb              B        |L16.38|
;;;293    
                          ENDP

00002e  0000              DCW      0x0000
                  |L16.48|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_sector_erase_sectornum||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_sector_erase_sectornum PROC
;;;293    
;;;294    int8_t smp_mx25l_flash_sector_erase_sectornum(uint16_t sector_num , smp_flash_event_t smp_flash_event_handle)
000000  b500              PUSH     {lr}
;;;295    {
000002  b0c5              SUB      sp,sp,#0x114
;;;296      /* Send "sector_erase (SE)" command */
;;;297    	smp_flash_package	FlashPkg;
;;;298    	FlashPkg.command = MX25L_SE;
000004  2220              MOVS     r2,#0x20
000006  f88d2004          STRB     r2,[sp,#4]
;;;299    	FlashPkg.addr[0] = (uint8_t)((sector_num << MX25L_MX25L6433F_SECTOR_SHIFT) >> 16) ;
00000a  0902              LSRS     r2,r0,#4
00000c  f88d2005          STRB     r2,[sp,#5]
;;;300    	FlashPkg.addr[1] = (uint8_t)((sector_num << MX25L_MX25L6433F_SECTOR_SHIFT) >> 8) ;
000010  0100              LSLS     r0,r0,#4
000012  f88d0006          STRB     r0,[sp,#6]
;;;301    	FlashPkg.addr[2] = (uint8_t)(sector_num << MX25L_MX25L6433F_SECTOR_SHIFT);
000016  2000              MOVS     r0,#0
000018  f88d0007          STRB     r0,[sp,#7]
;;;302    	
;;;303    	#ifdef MX25LXXX_DEBUG_PRINTF 
;;;304    	printf("flash erase sector 0x%x\r\n",sector_num);
;;;305    	printf("flash erase addr 0x%02x%02x%02x\r\n",FlashPkg.addr[0],FlashPkg.addr[1],FlashPkg.addr[2]);
;;;306    	#endif
;;;307    	
;;;308    	FlashPkg.flash_callback = smp_flash_event_handle;
00001c  9144              STR      r1,[sp,#0x110]
;;;309    	if(smp_fifo_flash_push(&flash_read_fifo, &FlashPkg)== SMP_SUCCESS){
00001e  a901              ADD      r1,sp,#4
000020  4804              LDR      r0,|L17.52|
000022  f7fffffe          BL       smp_fifo_flash_push
000026  b118              CBZ      r0,|L17.48|
;;;310    		return SMP_SUCCESS;
;;;311    	}
;;;312      return SMP_ERROR_RESOURCES;
000028  f06f000d          MVN      r0,#0xd
                  |L17.44|
;;;313    }
00002c  b045              ADD      sp,sp,#0x114
00002e  bd00              POP      {pc}
                  |L17.48|
000030  2000              MOVS     r0,#0                 ;310
000032  e7fb              B        |L17.44|
;;;314    
                          ENDP

                  |L17.52|
                          DCD      ||.bss||

                          AREA ||i.smp_mx25l_flash_write_disable||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_write_disable PROC
;;;160    
;;;161    int8_t smp_mx25l_flash_write_disable(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;162    {
;;;163      /* Send "Write Disable (WRDI)" command */
;;;164    	int8_t tempstate;
;;;165    	MX25L_tx_data[0] = MX25L_WRDI;
000002  4909              LDR      r1,|L18.40|
000004  2004              MOVS     r0,#4
000006  7008              STRB     r0,[r1,#0]
;;;166    	UseDMAFlag = false;
000008  4908              LDR      r1,|L18.44|
00000a  2000              MOVS     r0,#0
00000c  7008              STRB     r0,[r1,#0]
;;;167    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , 0, 0 , &MX25L_CS0);
00000e  4906              LDR      r1,|L18.40|
000010  2300              MOVS     r3,#0
000012  390c              SUBS     r1,r1,#0xc
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  4804              LDR      r0,|L18.44|
00001a  2201              MOVS     r2,#1
00001c  310c              ADDS     r1,r1,#0xc
00001e  1c40              ADDS     r0,r0,#1
000020  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;168      return tempstate;
;;;169    }
000024  bd1c              POP      {r2-r4,pc}
;;;170    
                          ENDP

000026  0000              DCW      0x0000
                  |L18.40|
                          DCD      ||.bss||+0x1c
                  |L18.44|
                          DCD      ||.data||

                          AREA ||i.smp_mx25l_flash_write_enable||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_write_enable PROC
;;;150    
;;;151    int8_t smp_mx25l_flash_write_enable(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;152    {
;;;153      /* Send "Write Enable (WREN)" command */
;;;154    	int8_t tempstate;
;;;155    	MX25L_tx_data[0] = MX25L_WREN;
000002  4909              LDR      r1,|L19.40|
000004  2006              MOVS     r0,#6
000006  7008              STRB     r0,[r1,#0]
;;;156    	UseDMAFlag = false;
000008  4908              LDR      r1,|L19.44|
00000a  2000              MOVS     r0,#0
00000c  7008              STRB     r0,[r1,#0]
;;;157    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 1 , 0, 0 , &MX25L_CS0);
00000e  4906              LDR      r1,|L19.40|
000010  2300              MOVS     r3,#0
000012  390c              SUBS     r1,r1,#0xc
000014  e9cd0100          STRD     r0,r1,[sp,#0]
000018  4804              LDR      r0,|L19.44|
00001a  2201              MOVS     r2,#1
00001c  310c              ADDS     r1,r1,#0xc
00001e  1c40              ADDS     r0,r0,#1
000020  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;158      return tempstate;
;;;159    }
000024  bd1c              POP      {r2-r4,pc}
;;;160    
                          ENDP

000026  0000              DCW      0x0000
                  |L19.40|
                          DCD      ||.bss||+0x1c
                  |L19.44|
                          DCD      ||.data||

                          AREA ||i.smp_mx25l_flash_write_status||, CODE, READONLY, ALIGN=2

                  smp_mx25l_flash_write_status PROC
;;;206    
;;;207    int8_t smp_mx25l_flash_write_status(smp_mx25l_status *mx251_status,smp_mx25l_config *mx251_config)
000000  b51c              PUSH     {r2-r4,lr}
;;;208    {
;;;209      /* Send "write status (WRSR)" command */
;;;210    	int8_t tempstate;
;;;211    	MX25L_tx_data[0] = MX25L_WRSR;
000002  4a0c              LDR      r2,|L20.52|
000004  2301              MOVS     r3,#1
000006  7013              STRB     r3,[r2,#0]
;;;212    	MX25L_tx_data[1] = mx251_status->status1;
000008  7800              LDRB     r0,[r0,#0]
00000a  7050              STRB     r0,[r2,#1]
;;;213    	MX25L_tx_data[2] = mx251_config->config1;
00000c  7808              LDRB     r0,[r1,#0]
00000e  7090              STRB     r0,[r2,#2]
;;;214    	UseDMAFlag = false;
000010  4809              LDR      r0,|L20.56|
000012  2400              MOVS     r4,#0
000014  7004              STRB     r4,[r0,#0]
;;;215    	smp_mx25l_flash_write_enable();
000016  f7fffffe          BL       smp_mx25l_flash_write_enable
;;;216    	tempstate = smp_spi_master_send_recv_blocking(&MX25L_SPI_1, MX25L_tx_data , 3 , 0, 0 , &MX25L_CS0);
00001a  4806              LDR      r0,|L20.52|
00001c  2300              MOVS     r3,#0
00001e  380c              SUBS     r0,r0,#0xc
000020  e9cd4000          STRD     r4,r0,[sp,#0]
000024  4804              LDR      r0,|L20.56|
000026  2203              MOVS     r2,#3
000028  4902              LDR      r1,|L20.52|
00002a  1c40              ADDS     r0,r0,#1
00002c  f7fffffe          BL       smp_spi_master_send_recv_blocking
;;;217      return tempstate;
;;;218    }
000030  bd1c              POP      {r2-r4,pc}
;;;219    
                          ENDP

000032  0000              DCW      0x0000
                  |L20.52|
                          DCD      ||.bss||+0x1c
                  |L20.56|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  flash_read_fifo
                          %        16
                  MX25L_CS0
                          %        12
                  MX25L_tx_data
                          %        256
                  MX25L_rx_data
                          %        2000

                          AREA ||area_number.23||, DATA, NOINIT, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.bss||
                  flash_read_buffer
                          %        69632

                          AREA ||.data||, DATA, ALIGN=2

                  UseDMAFlag
000000  00                DCB      0x00
                  MX25L_SPI_1
000001  000000            DCB      0x00,0x00,0x00
                  mDavinci_flash
                          DCD      flash_read_buffer
                          DCD      0x00000100
                  MX25L_write_protection_handler
                          %        8
                  MX25L_PIN
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\SMP\\smp_MX25L_Driver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_smp_MX25L_Driver_c_c6de8986____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___18_smp_MX25L_Driver_c_c6de8986____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_smp_MX25L_Driver_c_c6de8986____REVSH|
#line 507
|__asm___18_smp_MX25L_Driver_c_c6de8986____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_smp_MX25L_Driver_c_c6de8986____RRX|
#line 694
|__asm___18_smp_MX25L_Driver_c_c6de8986____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
