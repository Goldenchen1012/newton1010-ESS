; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\libregister.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\libregister.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Lib\LibRegister.c]
                          THUMB

                          AREA ||i._LibRegisterAdd||, CODE, READONLY, ALIGN=1

                  _LibRegisterAdd PROC
;;;74     
;;;75     tErrCode _LibRegisterAdd(__far tLibRegister *head, tLibRegisterEvtHandler handler, __far void *dest){
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;76         __far tLibRegisterMember *nowPtr, *nextPtr;
;;;77     //	char	str[100];
;;;78     	
;;;79     	if(head == 0 || handler == 0){
00000a  2d00              CMP      r5,#0
00000c  d004              BEQ      |L1.24|
00000e  b11f              CBZ      r7,|L1.24|
;;;80             return RES_ERROR_INVALID_PARAM;
;;;81         }
;;;82             
;;;83         nowPtr = 0;
000010  2600              MOVS     r6,#0
;;;84         nextPtr = head->next;
000012  682c              LDR      r4,[r5,#0]
;;;85         
;;;86         //Find Next
;;;87         while(nextPtr != 0){
000014  46b1              MOV      r9,r6
000016  e01a              B        |L1.78|
                  |L1.24|
000018  f06f0002          MVN      r0,#2                 ;80
                  |L1.28|
;;;88             if((nextPtr->handler == handler) && (nextPtr->dest == dest)){
;;;89     			if((head->executing->handler == handler) && (head->executing->dest == dest) && (head->removeExecutingHandlerFlag == true)){
;;;90     			    head->removeExecutingHandlerFlag = false;
;;;91     			}
;;;92                 return RES_ERROR_REINIT;
;;;93             }
;;;94             nowPtr = nextPtr;
;;;95             nextPtr = nextPtr->next;
;;;96         }
;;;97         
;;;98         //Allocate memory
;;;99         nextPtr = recordMalloc();
;;;100     
;;;101        if(nextPtr == 0){
;;;102     //       NRF_LOG_INFO("SMP_ERROR_MALLOC----------------------\r\n");
;;;103            assert_param(0);
;;;104            return RES_ERROR_MALLOC;
;;;105        }
;;;106     //   NRF_LOG_INFO("Add 0x08%X\r\n",(uint32_t)nextPtr);
;;;107    
;;;108    // sprintf(str,"nextPtr 0x%08X \r\n",nextPtr);
;;;109    //	SendUartString((BYTE *)str);
;;;110     
;;;111        //Assign
;;;112        nextPtr->handler = handler;    
;;;113        nextPtr->dest = dest;    
;;;114        nextPtr->next=0;
;;;115        if(nowPtr == 0){//Cheak head
;;;116            head->next = nextPtr;
;;;117        }else{
;;;118            nowPtr->next = nextPtr;
;;;119        }
;;;120        
;;;121        return RES_SUCCESS;
;;;122    }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.32|
000020  6860              LDR      r0,[r4,#4]            ;88
000022  42b8              CMP      r0,r7                 ;88
000024  d111              BNE      |L1.74|
000026  6820              LDR      r0,[r4,#0]            ;88
000028  4540              CMP      r0,r8                 ;88
00002a  d10e              BNE      |L1.74|
00002c  6868              LDR      r0,[r5,#4]            ;89
00002e  6841              LDR      r1,[r0,#4]            ;89
000030  42b9              CMP      r1,r7                 ;89
000032  d107              BNE      |L1.68|
000034  6800              LDR      r0,[r0,#0]            ;89
000036  4540              CMP      r0,r8                 ;89
000038  d104              BNE      |L1.68|
00003a  7a28              LDRB     r0,[r5,#8]            ;89
00003c  2801              CMP      r0,#1                 ;89
00003e  d101              BNE      |L1.68|
000040  f8859008          STRB     r9,[r5,#8]            ;90
                  |L1.68|
000044  f06f0013          MVN      r0,#0x13              ;92
000048  e7e8              B        |L1.28|
                  |L1.74|
00004a  4626              MOV      r6,r4                 ;94
00004c  68a4              LDR      r4,[r4,#8]            ;95
                  |L1.78|
00004e  2c00              CMP      r4,#0                 ;87
000050  d1e6              BNE      |L1.32|
000052  f7fffffe          BL       recordMalloc
000056  b140              CBZ      r0,|L1.106|
000058  6047              STR      r7,[r0,#4]            ;112
00005a  f8c08000          STR      r8,[r0,#0]            ;113
00005e  f8c09008          STR      r9,[r0,#8]            ;114
000062  b12e              CBZ      r6,|L1.112|
000064  60b0              STR      r0,[r6,#8]            ;118
                  |L1.102|
000066  2000              MOVS     r0,#0                 ;121
000068  e7d8              B        |L1.28|
                  |L1.106|
00006a  f06f0010          MVN      r0,#0x10              ;104
00006e  e7d5              B        |L1.28|
                  |L1.112|
000070  6028              STR      r0,[r5,#0]            ;116
000072  e7f8              B        |L1.102|
;;;123    
                          ENDP


                          AREA ||i._LibRegisterGetMemberAddr||, CODE, READONLY, ALIGN=1

                  _LibRegisterGetMemberAddr PROC
;;;187    
;;;188    __far tLibRegisterMember *_LibRegisterGetMemberAddr(__far tLibRegister *head, uint16_t number){
000000  2200              MOVS     r2,#0
;;;189        __far tLibRegisterMember *nowPtr;
;;;190    	uint8_t i=0;
;;;191    	
;;;192        if(head==0 || head->next==0){
000002  2800              CMP      r0,#0
000004  d001              BEQ      |L2.10|
000006  6800              LDR      r0,[r0,#0]
000008  b928              CBNZ     r0,|L2.22|
                  |L2.10|
;;;193            return 0;
00000a  2000              MOVS     r0,#0
;;;194        }
;;;195        nowPtr=head->next;
;;;196    
;;;197        //Find member
;;;198        for(i=0;i<number;i++){
;;;199            if(nowPtr->next==0){
;;;200                return 0;
;;;201            }
;;;202            nowPtr=nowPtr->next;
;;;203        }
;;;204        return nowPtr;
;;;205    }
00000c  4770              BX       lr
                  |L2.14|
00000e  6880              LDR      r0,[r0,#8]            ;199
000010  b120              CBZ      r0,|L2.28|
000012  1c52              ADDS     r2,r2,#1              ;198
000014  b2d2              UXTB     r2,r2                 ;198
                  |L2.22|
000016  428a              CMP      r2,r1                 ;198
000018  d3f9              BCC      |L2.14|
00001a  4770              BX       lr
                  |L2.28|
00001c  2000              MOVS     r0,#0                 ;200
00001e  4770              BX       lr
;;;206    
                          ENDP


                          AREA ||i._LibRegisterIsMemberNull||, CODE, READONLY, ALIGN=1

                  _LibRegisterIsMemberNull PROC
;;;206    
;;;207    bool _LibRegisterIsMemberNull(__far tLibRegister *head){
000000  6800              LDR      r0,[r0,#0]
;;;208      if(head->next == 0){
000002  2800              CMP      r0,#0
000004  d001              BEQ      |L3.10|
;;;209          return true;
;;;210      }else{
;;;211          return false;
000006  2000              MOVS     r0,#0
;;;212      }
;;;213    }
000008  4770              BX       lr
                  |L3.10|
00000a  2001              MOVS     r0,#1                 ;209
00000c  4770              BX       lr
;;;214    
                          ENDP


                          AREA ||i._LibRegisterRm||, CODE, READONLY, ALIGN=1

                  _LibRegisterRm PROC
;;;123    
;;;124    tErrCode _LibRegisterRm(__far tLibRegister *head, tLibRegisterEvtHandler handler, __far void *dest){ //When "head" is 0,this API will remove all member.
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
;;;125        __far tLibRegisterMember *nowPtr, *nextPtr;
;;;126    	
;;;127    	if(head==0 || handler==0){
000004  2b00              CMP      r3,#0
000006  d00b              BEQ      |L4.32|
000008  b151              CBZ      r1,|L4.32|
;;;128            return RES_ERROR_INVALID_PARAM;
;;;129        }
;;;130    
;;;131    	//Do not kill self.
;;;132    	if((head->executing->handler == handler) && (head->executing->dest == dest)){
00000a  6858              LDR      r0,[r3,#4]
00000c  6844              LDR      r4,[r0,#4]
00000e  428c              CMP      r4,r1
000010  d109              BNE      |L4.38|
000012  6800              LDR      r0,[r0,#0]
000014  4290              CMP      r0,r2
000016  d106              BNE      |L4.38|
;;;133    		head->removeExecutingHandlerFlag = true;
000018  2001              MOVS     r0,#1
00001a  7218              STRB     r0,[r3,#8]
;;;134    		return RES_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;135    	}
;;;136    	
;;;137        nowPtr=0;
;;;138        nextPtr=head->next;
;;;139        
;;;140        //Find Next
;;;141        while(nextPtr!=0){
;;;142            if((nextPtr->handler==handler) && (nextPtr->dest == dest)){
;;;143                break;
;;;144            }
;;;145            nowPtr=nextPtr;
;;;146            nextPtr=nextPtr->next;
;;;147        }
;;;148    
;;;149        if(nextPtr==0){
;;;150            return RES_ERROR_NOT_FOUND;
;;;151        }else{
;;;152            //free memory
;;;153            if(nowPtr==0){ //Head
;;;154                head->next=nextPtr->next;
;;;155            }else{
;;;156                nowPtr->next=nextPtr->next;
;;;157            }
;;;158            recordFree(nextPtr);
;;;159        }
;;;160    
;;;161        return RES_SUCCESS;
;;;162    }    
00001e  bd70              POP      {r4-r6,pc}
                  |L4.32|
000020  f06f0002          MVN      r0,#2                 ;128
000024  bd70              POP      {r4-r6,pc}
                  |L4.38|
000026  2400              MOVS     r4,#0                 ;137
000028  6818              LDR      r0,[r3,#0]            ;138
00002a  e007              B        |L4.60|
                  |L4.44|
00002c  6845              LDR      r5,[r0,#4]            ;142
00002e  428d              CMP      r5,r1                 ;142
000030  d102              BNE      |L4.56|
000032  6805              LDR      r5,[r0,#0]            ;142
000034  4295              CMP      r5,r2                 ;142
000036  d003              BEQ      |L4.64|
                  |L4.56|
000038  4604              MOV      r4,r0                 ;145
00003a  6880              LDR      r0,[r0,#8]            ;146
                  |L4.60|
00003c  2800              CMP      r0,#0                 ;141
00003e  d1f5              BNE      |L4.44|
                  |L4.64|
000040  b130              CBZ      r0,|L4.80|
000042  b144              CBZ      r4,|L4.86|
000044  6881              LDR      r1,[r0,#8]            ;156
000046  60a1              STR      r1,[r4,#8]            ;156
                  |L4.72|
000048  f7fffffe          BL       recordFree
00004c  2000              MOVS     r0,#0                 ;161
00004e  bd70              POP      {r4-r6,pc}
                  |L4.80|
000050  f04f30ff          MOV      r0,#0xffffffff        ;150
000054  bd70              POP      {r4-r6,pc}
                  |L4.86|
000056  6881              LDR      r1,[r0,#8]            ;154
000058  6019              STR      r1,[r3,#0]            ;154
00005a  e7f5              B        |L4.72|
;;;163    
                          ENDP


                          AREA ||i._LibRegisterTypeHandlerExe||, CODE, READONLY, ALIGN=1

                  _LibRegisterTypeHandlerExe PROC
;;;163    
;;;164    tErrCode _LibRegisterTypeHandlerExe(__far tLibRegister *head, uint16_t evt, __far void * data){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;165        __far tLibRegisterMember *nowPtr, *lastPtr;
;;;166    	if(head->next==0){
00000a  682c              LDR      r4,[r5,#0]
00000c  2c00              CMP      r4,#0
00000e  d001              BEQ      |L5.20|
;;;167            return RES_ERROR_NULL;
;;;168        }
;;;169    
;;;170        nowPtr = head->next;
;;;171        while(nowPtr!=0){
000010  2600              MOVS     r6,#0
000012  e015              B        |L5.64|
                  |L5.20|
000014  f06f000a          MVN      r0,#0xa               ;167
                  |L5.24|
;;;172            head->executing = nowPtr;
;;;173            head->executing->handler(nowPtr->dest, evt, data);    
;;;174    		head->executing = 0;
;;;175    		lastPtr = nowPtr;		
;;;176            nowPtr = nowPtr->next;
;;;177    		
;;;178    		if(head->removeExecutingHandlerFlag == true){
;;;179    		    _LibRegisterRm(head, lastPtr->handler, lastPtr->dest);
;;;180    			head->removeExecutingHandlerFlag = false;
;;;181    		}
;;;182        }
;;;183        
;;;184        return RES_SUCCESS;
;;;185    
;;;186    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L5.28|
00001c  606c              STR      r4,[r5,#4]            ;172
00001e  e9d40300          LDRD     r0,r3,[r4,#0]         ;173
000022  4642              MOV      r2,r8                 ;173
000024  4639              MOV      r1,r7                 ;173
000026  4798              BLX      r3                    ;173
000028  606e              STR      r6,[r5,#4]            ;174
00002a  4620              MOV      r0,r4                 ;176
00002c  68a4              LDR      r4,[r4,#8]            ;176
00002e  7a29              LDRB     r1,[r5,#8]            ;178
000030  2901              CMP      r1,#1                 ;178
000032  d105              BNE      |L5.64|
000034  e9d02100          LDRD     r2,r1,[r0,#0]         ;179
000038  4628              MOV      r0,r5                 ;179
00003a  f7fffffe          BL       _LibRegisterRm
00003e  722e              STRB     r6,[r5,#8]            ;180
                  |L5.64|
000040  2c00              CMP      r4,#0                 ;171
000042  d1eb              BNE      |L5.28|
000044  2000              MOVS     r0,#0                 ;184
000046  e7e7              B        |L5.24|
;;;187    
                          ENDP


                          AREA ||i.recordFree||, CODE, READONLY, ALIGN=2

                  recordFree PROC
;;;55     
;;;56     static void recordFree(__far tLibRegisterMember *record){
000000  2100              MOVS     r1,#0
;;;57     #if (LIB_REGISTER_RECORD_DYNAMIC_ENABLE == 1)
;;;58         free(record);
;;;59     #else
;;;60         uint8_t u8;
;;;61     
;;;62         for(u8=0;u8<LIB_REGISTER_RECORD_MAX;u8++){
;;;63             if(record == (__far tLibRegisterMember *)&mRegisterRecord[u8]){
000002  4a0a              LDR      r2,|L6.44|
                  |L6.4|
000004  eb010341          ADD      r3,r1,r1,LSL #1
000008  eb020383          ADD      r3,r2,r3,LSL #2
00000c  4283              CMP      r3,r0
00000e  d003              BEQ      |L6.24|
000010  1c49              ADDS     r1,r1,#1              ;62
000012  b2c9              UXTB     r1,r1                 ;62
000014  2932              CMP      r1,#0x32              ;62
000016  d3f5              BCC      |L6.4|
                  |L6.24|
;;;64                 break;
;;;65             }
;;;66         }
;;;67     
;;;68         if(u8 < LIB_REGISTER_RECORD_MAX){
000018  2932              CMP      r1,#0x32
00001a  d205              BCS      |L6.40|
;;;69             mRegisterRecord[u8].handler = 0;
00001c  eb010141          ADD      r1,r1,r1,LSL #1
000020  eb020181          ADD      r1,r2,r1,LSL #2
000024  2000              MOVS     r0,#0
000026  6048              STR      r0,[r1,#4]
                  |L6.40|
;;;70         }
;;;71     #endif
;;;72     
;;;73     }
000028  4770              BX       lr
;;;74     
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      ||.bss||

                          AREA ||i.recordMalloc||, CODE, READONLY, ALIGN=2

                  recordMalloc PROC
;;;35     
;;;36     static __far tLibRegisterMember *recordMalloc(void){
000000  2000              MOVS     r0,#0
;;;37     #if (LIB_REGISTER_RECORD_DYNAMIC_ENABLE == 1)
;;;38         return (__far tLibRegisterMember *)malloc(sizeof(tLibRegisterMember));
;;;39     #else
;;;40         uint8_t u8;
;;;41     
;;;42         for(u8=0;u8<LIB_REGISTER_RECORD_MAX;u8++){
;;;43             if(mRegisterRecord[u8].handler == 0){
000002  490a              LDR      r1,|L7.44|
                  |L7.4|
000004  eb000240          ADD      r2,r0,r0,LSL #1
000008  eb010282          ADD      r2,r1,r2,LSL #2
00000c  6852              LDR      r2,[r2,#4]
00000e  b11a              CBZ      r2,|L7.24|
000010  1c40              ADDS     r0,r0,#1              ;42
000012  b2c0              UXTB     r0,r0                 ;42
000014  2832              CMP      r0,#0x32              ;42
000016  d3f5              BCC      |L7.4|
                  |L7.24|
;;;44                 break;
;;;45             }
;;;46         }
;;;47     
;;;48         if(u8 >= LIB_REGISTER_RECORD_MAX){
000018  2832              CMP      r0,#0x32
00001a  d301              BCC      |L7.32|
;;;49             return 0;
00001c  2000              MOVS     r0,#0
;;;50         }
;;;51     
;;;52         return (__far tLibRegisterMember *)&mRegisterRecord[u8];
;;;53     #endif
;;;54     }
00001e  4770              BX       lr
                  |L7.32|
000020  eb000040          ADD      r0,r0,r0,LSL #1       ;52
000024  eb010080          ADD      r0,r1,r0,LSL #2       ;52
000028  4770              BX       lr
;;;55     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mRegisterRecord
                          %        600
