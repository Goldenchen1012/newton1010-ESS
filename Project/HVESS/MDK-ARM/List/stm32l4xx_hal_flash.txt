; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32l4xx_hal_flash.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32l4xx_hal_flash.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_flash.c]
                          THUMB

                          AREA ||i.FLASH_Program_DoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_Program_DoubleWord PROC
;;;697      */
;;;698    static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
000000  b510              PUSH     {r4,lr}
;;;699    {
;;;700      /* Check the parameters */
;;;701      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
;;;702    
;;;703      /* Set PG bit */
;;;704      SET_BIT(FLASH->CR, FLASH_CR_PG);
000002  4905              LDR      r1,|L1.24|
000004  694c              LDR      r4,[r1,#0x14]
000006  f0440401          ORR      r4,r4,#1
00000a  614c              STR      r4,[r1,#0x14]
;;;705    
;;;706      /* Program first word */
;;;707      *(__IO uint32_t*)Address = (uint32_t)Data;
00000c  6002              STR      r2,[r0,#0]
;;;708    
;;;709      /* Barrier to ensure programming is performed in 2 steps, in right order
;;;710        (independently of compiler optimization behavior) */
;;;711      __ISB();
00000e  f3bf8f6f          ISB      
;;;712    
;;;713      /* Program second word */
;;;714      *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
000012  6043              STR      r3,[r0,#4]
;;;715    }
000014  bd10              POP      {r4,pc}
;;;716    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_Program_Fast||, CODE, READONLY, ALIGN=2

                  FLASH_Program_Fast PROC
;;;722      */
;;;723    static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
000000  b510              PUSH     {r4,lr}
;;;724    {
;;;725      uint32_t primask_bit;
;;;726      uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
000002  2240              MOVS     r2,#0x40
;;;727      __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
;;;728      __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
;;;729    
;;;730      /* Check the parameters */
;;;731      assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
;;;732    
;;;733      /* Set FSTPG bit */
;;;734      SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
000004  4b08              LDR      r3,|L2.40|
000006  695c              LDR      r4,[r3,#0x14]
000008  f4442480          ORR      r4,r4,#0x40000
00000c  615c              STR      r4,[r3,#0x14]
00000e  f3ef8310          MRS      r3,PRIMASK
;;;735    
;;;736      /* Disable interrupts to avoid any interruption during the loop */
;;;737      primask_bit = __get_PRIMASK();
;;;738      __disable_irq();
000012  b672              CPSID    i
                  |L2.20|
;;;739    
;;;740      /* Program the double word of the row */
;;;741      do
;;;742      {
;;;743        *dest_addr = *src_addr;
000014  c910              LDM      r1!,{r4}
000016  c010              STM      r0!,{r4}
;;;744        dest_addr++;
;;;745        src_addr++;
;;;746        row_index--;
000018  1e52              SUBS     r2,r2,#1
00001a  b2d2              UXTB     r2,r2
;;;747      } while (row_index != 0U);
00001c  2a00              CMP      r2,#0
00001e  d1f9              BNE      |L2.20|
000020  f3838810          MSR      PRIMASK,r3
;;;748    
;;;749      /* Re-enable the interrupts */
;;;750      __set_PRIMASK(primask_bit);
;;;751    }
000024  bd10              POP      {r4,pc}
;;;752    
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      0x40022000

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=2

                  FLASH_WaitForLastOperation PROC
;;;647      */
;;;648    HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;649    {
000002  4604              MOV      r4,r0
;;;650      /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;651         Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;652         flag will be set */
;;;653    
;;;654      uint32_t tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;655      uint32_t error;
;;;656    
;;;657      while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
00000a  4e16              LDR      r6,|L3.100|
00000c  e008              B        |L3.32|
                  |L3.14|
;;;658      {
;;;659        if(Timeout != HAL_MAX_DELAY)
00000e  1c60              ADDS     r0,r4,#1
000010  d006              BEQ      |L3.32|
;;;660        {
;;;661          if((HAL_GetTick() - tickstart) >= Timeout)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  42a0              CMP      r0,r4
00001a  d301              BCC      |L3.32|
;;;662          {
;;;663            return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
;;;664          }
;;;665        }
;;;666      }
;;;667    
;;;668      error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
;;;669    
;;;670      if(error != 0u)
;;;671      {
;;;672        /*Save the error code*/
;;;673        pFlash.ErrorCode |= error;
;;;674    
;;;675        /* Clear error programming flags */
;;;676        __HAL_FLASH_CLEAR_FLAG(error);
;;;677    
;;;678        return HAL_ERROR;
;;;679      }
;;;680    
;;;681      /* Check FLASH End of Operation flag  */
;;;682      if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
;;;683      {
;;;684        /* Clear FLASH End of Operation pending bit */
;;;685        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
;;;686      }
;;;687    
;;;688      /* If there is an error flag set */
;;;689      return HAL_OK;
;;;690    }
00001e  bd70              POP      {r4-r6,pc}
                  |L3.32|
000020  6930              LDR      r0,[r6,#0x10]         ;657
000022  03c0              LSLS     r0,r0,#15             ;657
000024  d4f3              BMI      |L3.14|
000026  6930              LDR      r0,[r6,#0x10]         ;668
000028  f24c31fa          MOV      r1,#0xc3fa            ;668
00002c  4008              ANDS     r0,r0,r1              ;668
00002e  b188              CBZ      r0,|L3.84|
000030  490d              LDR      r1,|L3.104|
000032  684a              LDR      r2,[r1,#4]            ;673  ; pFlash
000034  4302              ORRS     r2,r2,r0              ;673
000036  604a              STR      r2,[r1,#4]            ;673  ; pFlash
000038  0f81              LSRS     r1,r0,#30             ;676
00003a  d004              BEQ      |L3.70|
00003c  69b1              LDR      r1,[r6,#0x18]         ;676
00003e  f0004240          AND      r2,r0,#0xc0000000     ;676
000042  4311              ORRS     r1,r1,r2              ;676
000044  61b1              STR      r1,[r6,#0x18]         ;676
                  |L3.70|
000046  0081              LSLS     r1,r0,#2              ;676
000048  d002              BEQ      |L3.80|
00004a  f0204040          BIC      r0,r0,#0xc0000000     ;676
00004e  6130              STR      r0,[r6,#0x10]         ;676
                  |L3.80|
000050  2001              MOVS     r0,#1                 ;678
000052  bd70              POP      {r4-r6,pc}
                  |L3.84|
000054  6930              LDR      r0,[r6,#0x10]         ;682
000056  07c0              LSLS     r0,r0,#31             ;682
000058  d001              BEQ      |L3.94|
00005a  2001              MOVS     r0,#1                 ;685
00005c  6130              STR      r0,[r6,#0x10]         ;685
                  |L3.94|
00005e  2000              MOVS     r0,#0                 ;689
000060  bd70              POP      {r4-r6,pc}
;;;691    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      0x40022000
                  |L3.104|
                          DCD      ||.data||

                          AREA ||i.HAL_FLASH_EndOfOperationCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_EndOfOperationCallback PROC
;;;455      */
;;;456    __weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;457    {
;;;458      /* Prevent unused argument(s) compilation warning */
;;;459      UNUSED(ReturnValue);
;;;460    
;;;461      /* NOTE : This function should not be modified, when the callback is needed,
;;;462                the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
;;;463       */
;;;464    }
;;;465    
                          ENDP


                          AREA ||i.HAL_FLASH_GetError||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_GetError PROC
;;;623      */
;;;624    uint32_t HAL_FLASH_GetError(void)
000000  4801              LDR      r0,|L5.8|
;;;625    {
;;;626       return pFlash.ErrorCode;
000002  6840              LDR      r0,[r0,#4]  ; pFlash
;;;627    }
000004  4770              BX       lr
;;;628    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.HAL_FLASH_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_IRQHandler PROC
;;;312      */
;;;313    void HAL_FLASH_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;314    {
;;;315      uint32_t tmp_page;
;;;316      uint32_t error;
;;;317      FLASH_ProcedureTypeDef procedure;
;;;318    
;;;319      /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
;;;320      CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
000002  4d3f              LDR      r5,|L6.256|
000004  6968              LDR      r0,[r5,#0x14]
000006  f36f000a          BFC      r0,#0,#11
00000a  6168              STR      r0,[r5,#0x14]
;;;321    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;322        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;323        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;324        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;325      CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
00000c  6968              LDR      r0,[r5,#0x14]
00000e  f4204000          BIC      r0,r0,#0x8000
000012  6168              STR      r0,[r5,#0x14]
;;;326    #endif
;;;327    
;;;328      /* Disable the FSTPG Bit only if it is the last row programmed */
;;;329      if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
000014  4c3b              LDR      r4,|L6.260|
000016  7a20              LDRB     r0,[r4,#8]  ; pFlash
000018  2804              CMP      r0,#4
00001a  d103              BNE      |L6.36|
;;;330      {
;;;331        CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
00001c  6968              LDR      r0,[r5,#0x14]
00001e  f4202080          BIC      r0,r0,#0x40000
000022  6168              STR      r0,[r5,#0x14]
                  |L6.36|
;;;332      }
;;;333    
;;;334      /* Check FLASH operation error flags */
;;;335      error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
000024  6928              LDR      r0,[r5,#0x10]
000026  f24c31fa          MOV      r1,#0xc3fa
00002a  4008              ANDS     r0,r0,r1
;;;336    
;;;337      if (error !=0U)
00002c  2600              MOVS     r6,#0
00002e  b1e8              CBZ      r0,|L6.108|
;;;338      {
;;;339        /*Save the error code*/
;;;340        pFlash.ErrorCode |= error;
000030  6861              LDR      r1,[r4,#4]  ; pFlash
000032  4301              ORRS     r1,r1,r0
000034  6061              STR      r1,[r4,#4]  ; pFlash
;;;341    
;;;342        /* Clear error programming flags */
;;;343        __HAL_FLASH_CLEAR_FLAG(error);
000036  0f81              LSRS     r1,r0,#30
000038  d004              BEQ      |L6.68|
00003a  69a9              LDR      r1,[r5,#0x18]
00003c  f0004240          AND      r2,r0,#0xc0000000
000040  4311              ORRS     r1,r1,r2
000042  61a9              STR      r1,[r5,#0x18]
                  |L6.68|
000044  0081              LSLS     r1,r0,#2
000046  d002              BEQ      |L6.78|
000048  f0204040          BIC      r0,r0,#0xc0000000
00004c  6128              STR      r0,[r5,#0x10]
                  |L6.78|
;;;344    
;;;345        /* Flush the caches to be sure of the data consistency */
;;;346        FLASH_FlushCaches() ;
00004e  f7fffffe          BL       FLASH_FlushCaches
;;;347    
;;;348        /* FLASH error interrupt user callback */
;;;349        procedure = pFlash.ProcedureOnGoing;
000052  7a20              LDRB     r0,[r4,#8]  ; pFlash
;;;350        if(procedure == FLASH_PROC_PAGE_ERASE)
000054  2801              CMP      r0,#1
000056  d01b              BEQ      |L6.144|
;;;351        {
;;;352           HAL_FLASH_OperationErrorCallback(pFlash.Page);
;;;353        }
;;;354        else if(procedure == FLASH_PROC_MASS_ERASE)
000058  2802              CMP      r0,#2
00005a  d01d              BEQ      |L6.152|
;;;355        {
;;;356            HAL_FLASH_OperationErrorCallback(pFlash.Bank);
;;;357        }
;;;358        else if((procedure == FLASH_PROC_PROGRAM) ||
00005c  2803              CMP      r0,#3
00005e  d01f              BEQ      |L6.160|
;;;359                (procedure == FLASH_PROC_PROGRAM_LAST))
000060  2804              CMP      r0,#4
000062  d01d              BEQ      |L6.160|
;;;360        {
;;;361           HAL_FLASH_OperationErrorCallback(pFlash.Address);
;;;362        }
;;;363        else
;;;364        {
;;;365           HAL_FLASH_OperationErrorCallback(0U);
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
                  |L6.106|
;;;366        }
;;;367    
;;;368        /*Stop the procedure ongoing*/
;;;369        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
00006a  7226              STRB     r6,[r4,#8]
                  |L6.108|
;;;370      }
;;;371    
;;;372      /* Check FLASH End of Operation flag  */
;;;373      if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
00006c  6928              LDR      r0,[r5,#0x10]
00006e  07c0              LSLS     r0,r0,#31
000070  d03c              BEQ      |L6.236|
;;;374      {
;;;375        /* Clear FLASH End of Operation pending bit */
;;;376        __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
000072  2001              MOVS     r0,#1
000074  6128              STR      r0,[r5,#0x10]
;;;377    
;;;378        if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
000076  7a20              LDRB     r0,[r4,#8]  ; pFlash
000078  2801              CMP      r0,#1
00007a  d015              BEQ      |L6.168|
;;;379        {
;;;380          /* Nb of pages to erased can be decreased */
;;;381          pFlash.NbPagesToErase--;
;;;382    
;;;383          /* Check if there are still pages to erase*/
;;;384          if(pFlash.NbPagesToErase != 0U)
;;;385          {
;;;386            /* Indicate user which page has been erased*/
;;;387            HAL_FLASH_EndOfOperationCallback(pFlash.Page);
;;;388    
;;;389            /* Increment page number */
;;;390            pFlash.Page++;
;;;391            tmp_page = pFlash.Page;
;;;392            FLASH_PageErase(tmp_page, pFlash.Bank);
;;;393          }
;;;394          else
;;;395          {
;;;396            /* No more pages to Erase */
;;;397            /* Reset Address and stop Erase pages procedure */
;;;398            pFlash.Page = 0xFFFFFFFFU;
;;;399            pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
;;;400    
;;;401            /* Flush the caches to be sure of the data consistency */
;;;402            FLASH_FlushCaches() ;
;;;403    
;;;404            /* FLASH EOP interrupt user callback */
;;;405            HAL_FLASH_EndOfOperationCallback(pFlash.Page);
;;;406          }
;;;407        }
;;;408        else
;;;409        {
;;;410          /* Flush the caches to be sure of the data consistency */
;;;411          FLASH_FlushCaches() ;
00007c  f7fffffe          BL       FLASH_FlushCaches
;;;412    
;;;413          procedure = pFlash.ProcedureOnGoing;
000080  7a20              LDRB     r0,[r4,#8]  ; pFlash
;;;414          if(procedure == FLASH_PROC_MASS_ERASE)
000082  2802              CMP      r0,#2
000084  d02a              BEQ      |L6.220|
;;;415          {
;;;416            /* MassErase ended. Return the selected bank */
;;;417            /* FLASH EOP interrupt user callback */
;;;418            HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
;;;419          }
;;;420          else if((procedure == FLASH_PROC_PROGRAM) ||
000086  2803              CMP      r0,#3
000088  d02c              BEQ      |L6.228|
;;;421                  (procedure == FLASH_PROC_PROGRAM_LAST))
00008a  2804              CMP      r0,#4
00008c  d02a              BEQ      |L6.228|
00008e  e02c              B        |L6.234|
                  |L6.144|
000090  6960              LDR      r0,[r4,#0x14]         ;352  ; pFlash
000092  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
000096  e7e8              B        |L6.106|
                  |L6.152|
000098  6920              LDR      r0,[r4,#0x10]         ;356  ; pFlash
00009a  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
00009e  e7e4              B        |L6.106|
                  |L6.160|
0000a0  68e0              LDR      r0,[r4,#0xc]          ;361  ; pFlash
0000a2  f7fffffe          BL       HAL_FLASH_OperationErrorCallback
0000a6  e7e0              B        |L6.106|
                  |L6.168|
0000a8  69a0              LDR      r0,[r4,#0x18]         ;381  ; pFlash
0000aa  1e40              SUBS     r0,r0,#1              ;381
0000ac  61a0              STR      r0,[r4,#0x18]         ;381  ; pFlash
0000ae  69a0              LDR      r0,[r4,#0x18]         ;384  ; pFlash
0000b0  b150              CBZ      r0,|L6.200|
0000b2  6960              LDR      r0,[r4,#0x14]         ;387  ; pFlash
0000b4  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000b8  6960              LDR      r0,[r4,#0x14]         ;390  ; pFlash
0000ba  1c40              ADDS     r0,r0,#1              ;390
0000bc  6160              STR      r0,[r4,#0x14]         ;390  ; pFlash
0000be  6960              LDR      r0,[r4,#0x14]         ;391  ; pFlash
0000c0  6921              LDR      r1,[r4,#0x10]         ;392  ; pFlash
0000c2  f7fffffe          BL       FLASH_PageErase
0000c6  e011              B        |L6.236|
                  |L6.200|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;398
0000cc  6160              STR      r0,[r4,#0x14]         ;398  ; pFlash
0000ce  7226              STRB     r6,[r4,#8]            ;399
0000d0  f7fffffe          BL       FLASH_FlushCaches
0000d4  6960              LDR      r0,[r4,#0x14]         ;405  ; pFlash
0000d6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000da  e007              B        |L6.236|
                  |L6.220|
0000dc  6920              LDR      r0,[r4,#0x10]         ;418  ; pFlash
0000de  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
0000e2  e002              B        |L6.234|
                  |L6.228|
;;;422          {
;;;423            /* Program ended. Return the selected address */
;;;424            /* FLASH EOP interrupt user callback */
;;;425            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
0000e4  68e0              LDR      r0,[r4,#0xc]  ; pFlash
0000e6  f7fffffe          BL       HAL_FLASH_EndOfOperationCallback
                  |L6.234|
;;;426          }
;;;427          else
;;;428          {
;;;429            /* Nothing to do */
;;;430          }
;;;431    
;;;432          /*Clear the procedure ongoing*/
;;;433          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
0000ea  7226              STRB     r6,[r4,#8]
                  |L6.236|
;;;434        }
;;;435      }
;;;436    
;;;437      if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
0000ec  7a20              LDRB     r0,[r4,#8]  ; pFlash
0000ee  2800              CMP      r0,#0
0000f0  d104              BNE      |L6.252|
;;;438      {
;;;439        /* Disable End of Operation and Error interrupts */
;;;440        __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
0000f2  6968              LDR      r0,[r5,#0x14]
0000f4  f0207040          BIC      r0,r0,#0x3000000
0000f8  6168              STR      r0,[r5,#0x14]
;;;441    
;;;442        /* Process Unlocked */
;;;443        __HAL_UNLOCK(&pFlash);
0000fa  7026              STRB     r6,[r4,#0]
                  |L6.252|
;;;444      }
;;;445    }
0000fc  bd70              POP      {r4-r6,pc}
;;;446    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L6.256|
                          DCD      0x40022000
                  |L6.260|
                          DCD      ||.data||

                          AREA ||i.HAL_FLASH_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Lock PROC
;;;530      */
;;;531    HAL_StatusTypeDef HAL_FLASH_Lock(void)
000000  4803              LDR      r0,|L7.16|
;;;532    {
;;;533      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;534      SET_BIT(FLASH->CR, FLASH_CR_LOCK);
000002  6941              LDR      r1,[r0,#0x14]
000004  f0414100          ORR      r1,r1,#0x80000000
000008  6141              STR      r1,[r0,#0x14]
;;;535    
;;;536      return HAL_OK;
00000a  2000              MOVS     r0,#0
;;;537    }
00000c  4770              BX       lr
;;;538    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Launch PROC
;;;574      */
;;;575    HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
000000  4804              LDR      r0,|L8.20|
;;;576    {
;;;577      /* Set the bit to force the option byte reloading */
;;;578      SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
000002  6941              LDR      r1,[r0,#0x14]
000004  f0416100          ORR      r1,r1,#0x8000000
000008  6141              STR      r1,[r0,#0x14]
;;;579    
;;;580      /* Wait for last operation to be completed */
;;;581      return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
00000a  f24c3050          MOV      r0,#0xc350
00000e  f7ffbffe          B.W      FLASH_WaitForLastOperation
;;;582    }
;;;583    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Lock PROC
;;;562      */
;;;563    HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L9.16|
;;;564    {
;;;565      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;566      SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
000002  6941              LDR      r1,[r0,#0x14]
000004  f0414180          ORR      r1,r1,#0x40000000
000008  6141              STR      r1,[r0,#0x14]
;;;567    
;;;568      return HAL_OK;
00000a  2000              MOVS     r0,#0
;;;569    }
00000c  4770              BX       lr
;;;570    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_OB_Unlock PROC
;;;542      */
;;;543    HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L10.24|
;;;544    {
;;;545      if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
000002  6941              LDR      r1,[r0,#0x14]
000004  0049              LSLS     r1,r1,#1
000006  d505              BPL      |L10.20|
;;;546      {
;;;547        /* Authorizes the Option Byte register programming */
;;;548        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
000008  4904              LDR      r1,|L10.28|
00000a  60c1              STR      r1,[r0,#0xc]
;;;549        WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
00000c  4904              LDR      r1,|L10.32|
00000e  60c1              STR      r1,[r0,#0xc]
;;;550      }
;;;551      else
;;;552      {
;;;553        return HAL_ERROR;
;;;554      }
;;;555    
;;;556      return HAL_OK;
000010  2000              MOVS     r0,#0
;;;557    }
000012  4770              BX       lr
                  |L10.20|
000014  2001              MOVS     r0,#1                 ;553
000016  4770              BX       lr
;;;558    
                          ENDP

                  |L10.24|
                          DCD      0x40022000
                  |L10.28|
                          DCD      0x08192a3b
                  |L10.32|
                          DCD      0x4c5d6e7f

                          AREA ||i.HAL_FLASH_OperationErrorCallback||, CODE, READONLY, ALIGN=1

                  HAL_FLASH_OperationErrorCallback PROC
;;;473      */
;;;474    __weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
000000  4770              BX       lr
;;;475    {
;;;476      /* Prevent unused argument(s) compilation warning */
;;;477      UNUSED(ReturnValue);
;;;478    
;;;479      /* NOTE : This function should not be modified, when the callback is needed,
;;;480                the HAL_FLASH_OperationErrorCallback could be implemented in the user file
;;;481       */
;;;482    }
;;;483    
                          ENDP


                          AREA ||i.HAL_FLASH_Program||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program PROC
;;;170      */
;;;171    HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;172    {
000004  4607              MOV      r7,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
;;;173      HAL_StatusTypeDef status;
;;;174      uint32_t prog_bit = 0;
00000a  2600              MOVS     r6,#0
;;;175    
;;;176      /* Process Locked */
;;;177      __HAL_LOCK(&pFlash);
00000c  f8df909c          LDR      r9,|L12.172|
000010  f8990000          LDRB     r0,[r9,#0]  ; pFlash
000014  2801              CMP      r0,#1
000016  d00c              BEQ      |L12.50|
000018  2001              MOVS     r0,#1
00001a  f8890000          STRB     r0,[r9,#0]
;;;178    
;;;179      /* Check the parameters */
;;;180      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;181    
;;;182      /* Wait for last operation to be completed */
;;;183      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00001e  f24c3050          MOV      r0,#0xc350
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  4680              MOV      r8,r0
;;;184    
;;;185      if(status == HAL_OK)
000028  46b3              MOV      r11,r6
00002a  f1b80f00          CMP      r8,#0
00002e  d004              BEQ      |L12.58|
000030  e038              B        |L12.164|
                  |L12.50|
000032  2002              MOVS     r0,#2                 ;177
                  |L12.52|
;;;186      {
;;;187        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
;;;188    
;;;189        /* Deactivate the data cache if they are activated to avoid data misbehavior */
;;;190        if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
;;;191        {
;;;192          /* Disable data cache  */
;;;193          __HAL_FLASH_DATA_CACHE_DISABLE();
;;;194          pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
;;;195        }
;;;196        else
;;;197        {
;;;198          pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
;;;199        }
;;;200    
;;;201        if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
;;;202        {
;;;203          /* Program double-word (64-bit) at a specified address */
;;;204          FLASH_Program_DoubleWord(Address, Data);
;;;205          prog_bit = FLASH_CR_PG;
;;;206        }
;;;207        else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
;;;208        {
;;;209          /* Fast program a 32 row double-word (64-bit) at a specified address */
;;;210          FLASH_Program_Fast(Address, (uint32_t)Data);
;;;211    
;;;212          /* If it is the last row, the bit will be cleared at the end of the operation */
;;;213          if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
;;;214          {
;;;215            prog_bit = FLASH_CR_FSTPG;
;;;216          }
;;;217        }
;;;218        else
;;;219        {
;;;220          /* Nothing to do */
;;;221        }
;;;222    
;;;223        /* Wait for last operation to be completed */
;;;224        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;225    
;;;226        /* If the program operation is completed, disable the PG or FSTPG Bit */
;;;227        if (prog_bit != 0U)
;;;228        {
;;;229          CLEAR_BIT(FLASH->CR, prog_bit);
;;;230        }
;;;231    
;;;232        /* Flush the caches to be sure of the data consistency */
;;;233        FLASH_FlushCaches();
;;;234      }
;;;235    
;;;236      /* Process Unlocked */
;;;237      __HAL_UNLOCK(&pFlash);
;;;238    
;;;239      return status;
;;;240    }
000034  b004              ADD      sp,sp,#0x10
000036  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.58|
00003a  f8c9b004          STR      r11,[r9,#4]           ;187  ; pFlash
00003e  f8dfa070          LDR      r10,|L12.176|
000042  f8da0000          LDR      r0,[r10,#0]           ;190
000046  0540              LSLS     r0,r0,#21             ;190
000048  d509              BPL      |L12.94|
00004a  f8da0000          LDR      r0,[r10,#0]           ;193
00004e  f4206080          BIC      r0,r0,#0x400          ;193
000052  f8ca0000          STR      r0,[r10,#0]           ;193
000056  2002              MOVS     r0,#2                 ;194
000058  f889001c          STRB     r0,[r9,#0x1c]         ;194
00005c  e001              B        |L12.98|
                  |L12.94|
00005e  f889b01c          STRB     r11,[r9,#0x1c]        ;198
                  |L12.98|
000062  b127              CBZ      r7,|L12.110|
000064  2f01              CMP      r7,#1                 ;207
000066  d009              BEQ      |L12.124|
000068  2f02              CMP      r7,#2                 ;207
00006a  d007              BEQ      |L12.124|
00006c  e00d              B        |L12.138|
                  |L12.110|
00006e  4622              MOV      r2,r4                 ;204
000070  462b              MOV      r3,r5                 ;204
000072  9801              LDR      r0,[sp,#4]            ;204
000074  f7fffffe          BL       FLASH_Program_DoubleWord
000078  2601              MOVS     r6,#1                 ;205
00007a  e006              B        |L12.138|
                  |L12.124|
00007c  4621              MOV      r1,r4                 ;210
00007e  9801              LDR      r0,[sp,#4]            ;210
000080  f7fffffe          BL       FLASH_Program_Fast
000084  2f02              CMP      r7,#2                 ;213
000086  d100              BNE      |L12.138|
000088  047e              LSLS     r6,r7,#17             ;215
                  |L12.138|
00008a  f24c3050          MOV      r0,#0xc350            ;224
00008e  f7fffffe          BL       FLASH_WaitForLastOperation
000092  4680              MOV      r8,r0                 ;224
000094  b126              CBZ      r6,|L12.160|
000096  f8da0014          LDR      r0,[r10,#0x14]        ;229
00009a  43b0              BICS     r0,r0,r6              ;229
00009c  f8ca0014          STR      r0,[r10,#0x14]        ;229
                  |L12.160|
0000a0  f7fffffe          BL       FLASH_FlushCaches
                  |L12.164|
0000a4  f889b000          STRB     r11,[r9,#0]           ;237
0000a8  4640              MOV      r0,r8                 ;239
0000aa  e7c3              B        |L12.52|
;;;241    
                          ENDP

                  |L12.172|
                          DCD      ||.data||
                  |L12.176|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Program_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Program_IT PROC
;;;252      */
;;;253    HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;254    {
000004  460c              MOV      r4,r1
;;;255      HAL_StatusTypeDef status = HAL_OK;
000006  2600              MOVS     r6,#0
;;;256    
;;;257      /* Check the parameters */
;;;258      assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
;;;259    
;;;260      /* Process Locked */
;;;261      __HAL_LOCK(&pFlash);
000008  491a              LDR      r1,|L13.116|
00000a  780d              LDRB     r5,[r1,#0]  ; pFlash
00000c  2d01              CMP      r5,#1
00000e  d010              BEQ      |L13.50|
000010  2501              MOVS     r5,#1
000012  700d              STRB     r5,[r1,#0]
;;;262    
;;;263      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000014  2700              MOVS     r7,#0
000016  604f              STR      r7,[r1,#4]  ; pFlash
;;;264    
;;;265      /* Deactivate the data cache if they are activated to avoid data misbehavior */
;;;266      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
000018  4d17              LDR      r5,|L13.120|
00001a  f8d5c000          LDR      r12,[r5,#0]
00001e  ea5f5c4c          LSLS     r12,r12,#21
000022  d509              BPL      |L13.56|
;;;267      {
;;;268        /* Disable data cache  */
;;;269        __HAL_FLASH_DATA_CACHE_DISABLE();
000024  682f              LDR      r7,[r5,#0]
000026  f4276780          BIC      r7,r7,#0x400
00002a  602f              STR      r7,[r5,#0]
;;;270        pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
00002c  2702              MOVS     r7,#2
00002e  770f              STRB     r7,[r1,#0x1c]
000030  e003              B        |L13.58|
                  |L13.50|
000032  2002              MOVS     r0,#2                 ;261
                  |L13.52|
;;;271      }
;;;272      else
;;;273      {
;;;274        pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
;;;275      }
;;;276    
;;;277      /* Set internal variables used by the IRQ handler */
;;;278      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
;;;279      {
;;;280        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
;;;281      }
;;;282      else
;;;283      {
;;;284        pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
;;;285      }
;;;286      pFlash.Address = Address;
;;;287    
;;;288      /* Enable End of Operation and Error interrupts */
;;;289      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
;;;290    
;;;291      if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
;;;292      {
;;;293        /* Program double-word (64-bit) at a specified address */
;;;294        FLASH_Program_DoubleWord(Address, Data);
;;;295      }
;;;296      else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
;;;297      {
;;;298        /* Fast program a 32 row double-word (64-bit) at a specified address */
;;;299        FLASH_Program_Fast(Address, (uint32_t)Data);
;;;300      }
;;;301      else
;;;302      {
;;;303        /* Nothing to do */
;;;304      }
;;;305    
;;;306      return status;
;;;307    }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L13.56|
000038  770f              STRB     r7,[r1,#0x1c]         ;274
                  |L13.58|
00003a  2802              CMP      r0,#2                 ;278
00003c  d00c              BEQ      |L13.88|
00003e  2703              MOVS     r7,#3                 ;284
000040  720f              STRB     r7,[r1,#8]            ;284
                  |L13.66|
000042  60cc              STR      r4,[r1,#0xc]          ;286  ; pFlash
000044  6969              LDR      r1,[r5,#0x14]         ;289
000046  f0417140          ORR      r1,r1,#0x3000000      ;289
00004a  6169              STR      r1,[r5,#0x14]         ;289
00004c  b138              CBZ      r0,|L13.94|
00004e  2801              CMP      r0,#1                 ;296
000050  d009              BEQ      |L13.102|
000052  2802              CMP      r0,#2                 ;296
000054  d007              BEQ      |L13.102|
000056  e00a              B        |L13.110|
                  |L13.88|
000058  2704              MOVS     r7,#4                 ;280
00005a  720f              STRB     r7,[r1,#8]            ;280
00005c  e7f1              B        |L13.66|
                  |L13.94|
00005e  4620              MOV      r0,r4                 ;294
000060  f7fffffe          BL       FLASH_Program_DoubleWord
000064  e003              B        |L13.110|
                  |L13.102|
000066  4611              MOV      r1,r2                 ;299
000068  4620              MOV      r0,r4                 ;299
00006a  f7fffffe          BL       FLASH_Program_Fast
                  |L13.110|
00006e  4630              MOV      r0,r6                 ;306
000070  e7e0              B        |L13.52|
;;;308    
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
                          DCD      ||.data||
                  |L13.120|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  HAL_FLASH_Unlock PROC
;;;506      */
;;;507    HAL_StatusTypeDef HAL_FLASH_Unlock(void)
000000  2000              MOVS     r0,#0
;;;508    {
;;;509      HAL_StatusTypeDef status = HAL_OK;
;;;510    
;;;511      if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
000002  4906              LDR      r1,|L14.28|
000004  694a              LDR      r2,[r1,#0x14]
000006  2a00              CMP      r2,#0
000008  da07              BGE      |L14.26|
;;;512      {
;;;513        /* Authorize the FLASH Registers access */
;;;514        WRITE_REG(FLASH->KEYR, FLASH_KEY1);
00000a  4a05              LDR      r2,|L14.32|
00000c  608a              STR      r2,[r1,#8]
;;;515        WRITE_REG(FLASH->KEYR, FLASH_KEY2);
00000e  4a05              LDR      r2,|L14.36|
000010  608a              STR      r2,[r1,#8]
;;;516    
;;;517        /* Verify Flash is unlocked */
;;;518        if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
000012  6949              LDR      r1,[r1,#0x14]
000014  2900              CMP      r1,#0
000016  da00              BGE      |L14.26|
;;;519        {
;;;520          status = HAL_ERROR;
000018  2001              MOVS     r0,#1
                  |L14.26|
;;;521        }
;;;522      }
;;;523    
;;;524      return status;
;;;525    }
00001a  4770              BX       lr
;;;526    
                          ENDP

                  |L14.28|
                          DCD      0x40022000
                  |L14.32|
                          DCD      0x45670123
                  |L14.36|
                          DCD      0xcdef89ab

                          AREA ||.data||, DATA, ALIGN=2

                  pFlash
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000008  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000000
00001c  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32l4xx_hal_flash_c_pFlash____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___21_stm32l4xx_hal_flash_c_pFlash____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32l4xx_hal_flash_c_pFlash____REVSH|
#line 507
|__asm___21_stm32l4xx_hal_flash_c_pFlash____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32l4xx_hal_flash_c_pFlash____RRX|
#line 694
|__asm___21_stm32l4xx_hal_flash_c_pFlash____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
