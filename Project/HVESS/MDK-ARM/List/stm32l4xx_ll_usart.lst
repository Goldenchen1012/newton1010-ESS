L 1 "..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_ll_usart.c"
N/**
N  ******************************************************************************
N  * @file    stm32l4xx_ll_usart.c
N  * @author  MCD Application Team
N  * @brief   USART LL module driver.
N  ******************************************************************************
N  * @attention
N  *
N  * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
N  * All rights reserved.</center></h2>
N  *
N  * This software component is licensed by ST under BSD 3-Clause license,
N  * the "License"; You may not use this file except in compliance with the
N  * License. You may obtain a copy of the License at:
N  *                        opensource.org/licenses/BSD-3-Clause
N  *
N  ******************************************************************************
N  */
N#if defined(USE_FULL_LL_DRIVER)
X#if 0L
S
S/* Includes ------------------------------------------------------------------*/
S#include "stm32l4xx_ll_usart.h"
S#include "stm32l4xx_ll_rcc.h"
S#include "stm32l4xx_ll_bus.h"
S#ifdef USE_FULL_ASSERT
S#include "stm32_assert.h"
S#else
S#define assert_param(expr) ((void)0U)
S#endif /* USE_FULL_ASSERT */
S
S/** @addtogroup STM32L4xx_LL_Driver
S  * @{
S  */
S
S#if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
S
S/** @addtogroup USART_LL
S  * @{
S  */
S
S/* Private types -------------------------------------------------------------*/
S/* Private variables ---------------------------------------------------------*/
S/* Private constants ---------------------------------------------------------*/
S/* Private macros ------------------------------------------------------------*/
S/** @addtogroup USART_LL_Private_Macros
S  * @{
S  */
S
S#if defined(USART_PRESC_PRESCALER)
S#define IS_LL_USART_PRESCALER(__VALUE__)  (((__VALUE__) == LL_USART_PRESCALER_DIV1) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV2) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV4) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV6) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV8) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV10) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV12) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV16) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV32) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV64) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV128) \
S                                           || ((__VALUE__) == LL_USART_PRESCALER_DIV256))
X#define IS_LL_USART_PRESCALER(__VALUE__)  (((__VALUE__) == LL_USART_PRESCALER_DIV1)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV2)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV4)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV6)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV8)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV10)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV12)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV16)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV32)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV64)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV128)                                            || ((__VALUE__) == LL_USART_PRESCALER_DIV256))
S
S#endif /* USART_PRESC_PRESCALER */
S/* __BAUDRATE__ The maximum Baud Rate is derived from the maximum clock available
S *              divided by the smallest oversampling used on the USART (i.e. 8)    */
S#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
S#define IS_LL_USART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) <= 15000000U)
S#else
S#define IS_LL_USART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) <= 10000000U)
S#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
S
S/* __VALUE__ In case of oversampling by 16 and 8, BRR content must be greater than or equal to 16d. */
S#define IS_LL_USART_BRR_MIN(__VALUE__) ((__VALUE__) >= 16U)
S
S#define IS_LL_USART_DIRECTION(__VALUE__) (((__VALUE__) == LL_USART_DIRECTION_NONE) \
S                                          || ((__VALUE__) == LL_USART_DIRECTION_RX) \
S                                          || ((__VALUE__) == LL_USART_DIRECTION_TX) \
S                                          || ((__VALUE__) == LL_USART_DIRECTION_TX_RX))
X#define IS_LL_USART_DIRECTION(__VALUE__) (((__VALUE__) == LL_USART_DIRECTION_NONE)                                           || ((__VALUE__) == LL_USART_DIRECTION_RX)                                           || ((__VALUE__) == LL_USART_DIRECTION_TX)                                           || ((__VALUE__) == LL_USART_DIRECTION_TX_RX))
S
S#define IS_LL_USART_PARITY(__VALUE__) (((__VALUE__) == LL_USART_PARITY_NONE) \
S                                       || ((__VALUE__) == LL_USART_PARITY_EVEN) \
S                                       || ((__VALUE__) == LL_USART_PARITY_ODD))
X#define IS_LL_USART_PARITY(__VALUE__) (((__VALUE__) == LL_USART_PARITY_NONE)                                        || ((__VALUE__) == LL_USART_PARITY_EVEN)                                        || ((__VALUE__) == LL_USART_PARITY_ODD))
S
S#define IS_LL_USART_DATAWIDTH(__VALUE__) (((__VALUE__) == LL_USART_DATAWIDTH_7B) \
S                                          || ((__VALUE__) == LL_USART_DATAWIDTH_8B) \
S                                          || ((__VALUE__) == LL_USART_DATAWIDTH_9B))
X#define IS_LL_USART_DATAWIDTH(__VALUE__) (((__VALUE__) == LL_USART_DATAWIDTH_7B)                                           || ((__VALUE__) == LL_USART_DATAWIDTH_8B)                                           || ((__VALUE__) == LL_USART_DATAWIDTH_9B))
S
S#define IS_LL_USART_OVERSAMPLING(__VALUE__) (((__VALUE__) == LL_USART_OVERSAMPLING_16) \
S                                             || ((__VALUE__) == LL_USART_OVERSAMPLING_8))
X#define IS_LL_USART_OVERSAMPLING(__VALUE__) (((__VALUE__) == LL_USART_OVERSAMPLING_16)                                              || ((__VALUE__) == LL_USART_OVERSAMPLING_8))
S
S#define IS_LL_USART_LASTBITCLKOUTPUT(__VALUE__) (((__VALUE__) == LL_USART_LASTCLKPULSE_NO_OUTPUT) \
S                                                 || ((__VALUE__) == LL_USART_LASTCLKPULSE_OUTPUT))
X#define IS_LL_USART_LASTBITCLKOUTPUT(__VALUE__) (((__VALUE__) == LL_USART_LASTCLKPULSE_NO_OUTPUT)                                                  || ((__VALUE__) == LL_USART_LASTCLKPULSE_OUTPUT))
S
S#define IS_LL_USART_CLOCKPHASE(__VALUE__) (((__VALUE__) == LL_USART_PHASE_1EDGE) \
S                                           || ((__VALUE__) == LL_USART_PHASE_2EDGE))
X#define IS_LL_USART_CLOCKPHASE(__VALUE__) (((__VALUE__) == LL_USART_PHASE_1EDGE)                                            || ((__VALUE__) == LL_USART_PHASE_2EDGE))
S
S#define IS_LL_USART_CLOCKPOLARITY(__VALUE__) (((__VALUE__) == LL_USART_POLARITY_LOW) \
S                                              || ((__VALUE__) == LL_USART_POLARITY_HIGH))
X#define IS_LL_USART_CLOCKPOLARITY(__VALUE__) (((__VALUE__) == LL_USART_POLARITY_LOW)                                               || ((__VALUE__) == LL_USART_POLARITY_HIGH))
S
S#define IS_LL_USART_CLOCKOUTPUT(__VALUE__) (((__VALUE__) == LL_USART_CLOCK_DISABLE) \
S                                            || ((__VALUE__) == LL_USART_CLOCK_ENABLE))
X#define IS_LL_USART_CLOCKOUTPUT(__VALUE__) (((__VALUE__) == LL_USART_CLOCK_DISABLE)                                             || ((__VALUE__) == LL_USART_CLOCK_ENABLE))
S
S#define IS_LL_USART_STOPBITS(__VALUE__) (((__VALUE__) == LL_USART_STOPBITS_0_5) \
S                                         || ((__VALUE__) == LL_USART_STOPBITS_1) \
S                                         || ((__VALUE__) == LL_USART_STOPBITS_1_5) \
S                                         || ((__VALUE__) == LL_USART_STOPBITS_2))
X#define IS_LL_USART_STOPBITS(__VALUE__) (((__VALUE__) == LL_USART_STOPBITS_0_5)                                          || ((__VALUE__) == LL_USART_STOPBITS_1)                                          || ((__VALUE__) == LL_USART_STOPBITS_1_5)                                          || ((__VALUE__) == LL_USART_STOPBITS_2))
S
S#define IS_LL_USART_HWCONTROL(__VALUE__) (((__VALUE__) == LL_USART_HWCONTROL_NONE) \
S                                          || ((__VALUE__) == LL_USART_HWCONTROL_RTS) \
S                                          || ((__VALUE__) == LL_USART_HWCONTROL_CTS) \
S                                          || ((__VALUE__) == LL_USART_HWCONTROL_RTS_CTS))
X#define IS_LL_USART_HWCONTROL(__VALUE__) (((__VALUE__) == LL_USART_HWCONTROL_NONE)                                           || ((__VALUE__) == LL_USART_HWCONTROL_RTS)                                           || ((__VALUE__) == LL_USART_HWCONTROL_CTS)                                           || ((__VALUE__) == LL_USART_HWCONTROL_RTS_CTS))
S
S/**
S  * @}
S  */
S
S/* Private function prototypes -----------------------------------------------*/
S
S/* Exported functions --------------------------------------------------------*/
S/** @addtogroup USART_LL_Exported_Functions
S  * @{
S  */
S
S/** @addtogroup USART_LL_EF_Init
S  * @{
S  */
S
S/**
S  * @brief  De-initialize USART registers (Registers restored to their default values).
S  * @param  USARTx USART Instance
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: USART registers are de-initialized
S  *          - ERROR: USART registers are not de-initialized
S  */
SErrorStatus LL_USART_DeInit(USART_TypeDef *USARTx)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check the parameters */
S  assert_param(IS_UART_INSTANCE(USARTx));
S
S  if (USARTx == USART1)
S  {
S    /* Force reset of USART clock */
S    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
S
S    /* Release reset of USART clock */
S    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
S  }
S  else if (USARTx == USART2)
S  {
S    /* Force reset of USART clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
S
S    /* Release reset of USART clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
S  }
S#if defined(USART3)
S  else if (USARTx == USART3)
S  {
S    /* Force reset of USART clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART3);
S
S    /* Release reset of USART clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART3);
S  }
S#endif /* USART3 */
S#if defined(UART4)
S  else if (USARTx == UART4)
S  {
S    /* Force reset of UART clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART4);
S
S    /* Release reset of UART clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART4);
S  }
S#endif /* UART4 */
S#if defined(UART5)
S  else if (USARTx == UART5)
S  {
S    /* Force reset of UART clock */
S    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART5);
S
S    /* Release reset of UART clock */
S    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART5);
S  }
S#endif /* UART5 */
S  else
S  {
S    status = ERROR;
S  }
S
S  return (status);
S}
S
S/**
S  * @brief  Initialize USART registers according to the specified
S  *         parameters in USART_InitStruct.
S  * @note   As some bits in USART configuration registers can only be written when the USART is disabled (USART_CR1_UE bit =0),
S  *         USART Peripheral should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
S  * @note   Baud rate value stored in USART_InitStruct BaudRate field, should be valid (different from 0).
S  * @param  USARTx USART Instance
S  * @param  USART_InitStruct pointer to a LL_USART_InitTypeDef structure
S  *         that contains the configuration information for the specified USART peripheral.
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
S  *          - ERROR: Problem occurred during USART Registers initialization
S  */
SErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
S{
S  ErrorStatus status = ERROR;
S  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
S
S  /* Check the parameters */
S  assert_param(IS_UART_INSTANCE(USARTx));
S#if defined(USART_PRESC_PRESCALER)
S  assert_param(IS_LL_USART_PRESCALER(USART_InitStruct->PrescalerValue));
S#endif /* USART_PRESC_PRESCALER */
S  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
S  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
S  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
S  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
S  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
S  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
S  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
S
S  /* USART needs to be in disabled state, in order to be able to configure some bits in
S     CRx registers */
S  if (LL_USART_IsEnabled(USARTx) == 0U)
S  {
S    /*---------------------------- USART CR1 Configuration ---------------------
S     * Configure USARTx CR1 (USART Word Length, Parity, Mode and Oversampling bits) with parameters:
S     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
S     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
S     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
S     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
S     */
S    MODIFY_REG(USARTx->CR1,
S               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
S                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
S               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
S                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
S
S    /*---------------------------- USART CR2 Configuration ---------------------
S     * Configure USARTx CR2 (Stop bits) with parameters:
S     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
S     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
S     */
S    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
S
S    /*---------------------------- USART CR3 Configuration ---------------------
S     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
S     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
S     */
S    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
S
S    /*---------------------------- USART BRR Configuration ---------------------
S     * Retrieve Clock frequency used for USART Peripheral
S     */
S    if (USARTx == USART1)
S    {
S      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
S    }
S    else if (USARTx == USART2)
S    {
S      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
S    }
S#if defined(USART3)
S    else if (USARTx == USART3)
S    {
S      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
S    }
S#endif /* USART3 */
S#if defined(UART4)
S    else if (USARTx == UART4)
S    {
S      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
S    }
S#endif /* UART4 */
S#if defined(UART5)
S    else if (USARTx == UART5)
S    {
S      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
S    }
S#endif /* UART5 */
S    else
S    {
S      /* Nothing to do, as error code is already assigned to ERROR value */
S    }
S
S    /* Configure the USART Baud Rate :
S    #if defined(USART_PRESC_PRESCALER)
S       - prescaler value is required
S    #endif
S       - valid baud rate value (different from 0) is required
S       - Peripheral clock as returned by RCC service, should be valid (different from 0).
S    */
S    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
S        && (USART_InitStruct->BaudRate != 0U))
S    {
S      status = SUCCESS;
S      LL_USART_SetBaudRate(USARTx,
S                           periphclk,
S#if defined(USART_PRESC_PRESCALER)
S                           USART_InitStruct->PrescalerValue,
S#endif /* USART_PRESC_PRESCALER */
S                           USART_InitStruct->OverSampling,
S                           USART_InitStruct->BaudRate);
S
S      /* Check BRR is greater than or equal to 16d */
S      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
S    }
S#if defined(USART_PRESC_PRESCALER)
S
S    /*---------------------------- USART PRESC Configuration -----------------------
S     * Configure USARTx PRESC (Prescaler) with parameters:
S     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
S     */
S    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
S#endif /* USART_PRESC_PRESCALER */
S  }
S  /* Endif (=> USART not in Disabled state => return ERROR) */
S
S  return (status);
S}
S
S/**
S  * @brief Set each @ref LL_USART_InitTypeDef field to default value.
S  * @param USART_InitStruct pointer to a @ref LL_USART_InitTypeDef structure
S  *                         whose fields will be set to default values.
S  * @retval None
S  */
S
Svoid LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
S{
S  /* Set USART_InitStruct fields to default values */
S#if defined(USART_PRESC_PRESCALER)
S  USART_InitStruct->PrescalerValue      = LL_USART_PRESCALER_DIV1;
S#endif /* USART_PRESC_PRESCALER */
S  USART_InitStruct->BaudRate            = 9600U;
S  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
S  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
S  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
S  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
S  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
S  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
S}
S
S/**
S  * @brief  Initialize USART Clock related settings according to the
S  *         specified parameters in the USART_ClockInitStruct.
S  * @note   As some bits in USART configuration registers can only be written when the USART is disabled (USART_CR1_UE bit =0),
S  *         USART Peripheral should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
S  * @param  USARTx USART Instance
S  * @param  USART_ClockInitStruct pointer to a @ref LL_USART_ClockInitTypeDef structure
S  *         that contains the Clock configuration information for the specified USART peripheral.
S  * @retval An ErrorStatus enumeration value:
S  *          - SUCCESS: USART registers related to Clock settings are initialized according to USART_ClockInitStruct content
S  *          - ERROR: Problem occurred during USART Registers initialization
S  */
SErrorStatus LL_USART_ClockInit(USART_TypeDef *USARTx, LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
S{
S  ErrorStatus status = SUCCESS;
S
S  /* Check USART Instance and Clock signal output parameters */
S  assert_param(IS_UART_INSTANCE(USARTx));
S  assert_param(IS_LL_USART_CLOCKOUTPUT(USART_ClockInitStruct->ClockOutput));
S
S  /* USART needs to be in disabled state, in order to be able to configure some bits in
S     CRx registers */
S  if (LL_USART_IsEnabled(USARTx) == 0U)
S  {
S#if  defined(USART_CR2_SLVEN)
S    /* Ensure USART instance is USART capable */
S    assert_param(IS_USART_INSTANCE(USARTx));
S
S    /* Check clock related parameters */
S    assert_param(IS_LL_USART_CLOCKPOLARITY(USART_ClockInitStruct->ClockPolarity));
S    assert_param(IS_LL_USART_CLOCKPHASE(USART_ClockInitStruct->ClockPhase));
S    assert_param(IS_LL_USART_LASTBITCLKOUTPUT(USART_ClockInitStruct->LastBitClockPulse));
S
S    /*---------------------------- USART CR2 Configuration -----------------------
S     * Configure USARTx CR2 (Clock signal related bits) with parameters:
S     * - Clock Output:                USART_CR2_CLKEN bit according to USART_ClockInitStruct->ClockOutput value
S     * - Clock Polarity:              USART_CR2_CPOL bit according to USART_ClockInitStruct->ClockPolarity value
S     * - Clock Phase:                 USART_CR2_CPHA bit according to USART_ClockInitStruct->ClockPhase value
S     * - Last Bit Clock Pulse Output: USART_CR2_LBCL bit according to USART_ClockInitStruct->LastBitClockPulse value.
S     */
S    MODIFY_REG(USARTx->CR2,
S               USART_CR2_CLKEN | USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL,
S               USART_ClockInitStruct->ClockOutput | USART_ClockInitStruct->ClockPolarity |
S               USART_ClockInitStruct->ClockPhase | USART_ClockInitStruct->LastBitClockPulse);
S#else
S    /* If USART Clock signal is disabled */
S    if (USART_ClockInitStruct->ClockOutput == LL_USART_CLOCK_DISABLE)
S    {
S      /* Deactivate Clock signal delivery :
S       * - Disable Clock Output:        USART_CR2_CLKEN cleared
S       */
S      LL_USART_DisableSCLKOutput(USARTx);
S    }
S    else
S    {
S      /* Ensure USART instance is USART capable */
S      assert_param(IS_USART_INSTANCE(USARTx));
S
S      /* Check clock related parameters */
S      assert_param(IS_LL_USART_CLOCKPOLARITY(USART_ClockInitStruct->ClockPolarity));
S      assert_param(IS_LL_USART_CLOCKPHASE(USART_ClockInitStruct->ClockPhase));
S      assert_param(IS_LL_USART_LASTBITCLKOUTPUT(USART_ClockInitStruct->LastBitClockPulse));
S
S      /*---------------------------- USART CR2 Configuration -----------------------
S       * Configure USARTx CR2 (Clock signal related bits) with parameters:
S       * - Enable Clock Output:         USART_CR2_CLKEN set
S       * - Clock Polarity:              USART_CR2_CPOL bit according to USART_ClockInitStruct->ClockPolarity value
S       * - Clock Phase:                 USART_CR2_CPHA bit according to USART_ClockInitStruct->ClockPhase value
S       * - Last Bit Clock Pulse Output: USART_CR2_LBCL bit according to USART_ClockInitStruct->LastBitClockPulse value.
S       */
S      MODIFY_REG(USARTx->CR2,
S                 USART_CR2_CLKEN | USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL,
S                 USART_CR2_CLKEN | USART_ClockInitStruct->ClockPolarity |
S                 USART_ClockInitStruct->ClockPhase | USART_ClockInitStruct->LastBitClockPulse);
S    }
S#endif /* USART_CR2_SLVEN */
S  }
S  /* Else (USART not in Disabled state => return ERROR */
S  else
S  {
S    status = ERROR;
S  }
S
S  return (status);
S}
S
S/**
S  * @brief Set each field of a @ref LL_USART_ClockInitTypeDef type structure to default value.
S  * @param USART_ClockInitStruct pointer to a @ref LL_USART_ClockInitTypeDef structure
S  *                              whose fields will be set to default values.
S  * @retval None
S  */
Svoid LL_USART_ClockStructInit(LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
S{
S  /* Set LL_USART_ClockInitStruct fields with default values */
S  USART_ClockInitStruct->ClockOutput       = LL_USART_CLOCK_DISABLE;
S  USART_ClockInitStruct->ClockPolarity     = LL_USART_POLARITY_LOW;            /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
S  USART_ClockInitStruct->ClockPhase        = LL_USART_PHASE_1EDGE;             /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
S  USART_ClockInitStruct->LastBitClockPulse = LL_USART_LASTCLKPULSE_NO_OUTPUT;  /* Not relevant when ClockOutput = LL_USART_CLOCK_DISABLE */
S}
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S/**
S  * @}
S  */
S
S#endif /* USART1 || USART2 || USART3 || UART4 || UART5 */
S
S/**
S  * @}
S  */
S
N#endif /* USE_FULL_LL_DRIVER */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
N
