; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32l4xx_hal_flash_ex.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32l4xx_hal_flash_ex.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\STM32L4xx_HAL_Driver\Src\stm32l4xx_hal_flash_ex.c]
                          THUMB

                          AREA ||i.FLASH_FlushCaches||, CODE, READONLY, ALIGN=2

                  FLASH_FlushCaches PROC
;;;601      */
;;;602    void FLASH_FlushCaches(void)
000000  4a12              LDR      r2,|L1.76|
;;;603    {
;;;604      FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
000002  7f10              LDRB     r0,[r2,#0x1c]  ; pFlash
;;;605    
;;;606      /* Flush instruction cache  */
;;;607      if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
;;;608         (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
;;;609      {
;;;610        /* Reset instruction cache */
;;;611        __HAL_FLASH_INSTRUCTION_CACHE_RESET();
000004  4912              LDR      r1,|L1.80|
000006  2801              CMP      r0,#1                 ;607
000008  d001              BEQ      |L1.14|
00000a  2803              CMP      r0,#3                 ;608
00000c  d10b              BNE      |L1.38|
                  |L1.14|
00000e  680b              LDR      r3,[r1,#0]
000010  f4436300          ORR      r3,r3,#0x800
000014  600b              STR      r3,[r1,#0]
000016  680b              LDR      r3,[r1,#0]
000018  f4236300          BIC      r3,r3,#0x800
00001c  600b              STR      r3,[r1,#0]
;;;612        /* Enable instruction cache */
;;;613        __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
00001e  680b              LDR      r3,[r1,#0]
000020  f4437300          ORR      r3,r3,#0x200
000024  600b              STR      r3,[r1,#0]
                  |L1.38|
;;;614      }
;;;615    
;;;616      /* Flush data cache */
;;;617      if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
000026  2802              CMP      r0,#2
000028  d001              BEQ      |L1.46|
;;;618         (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
00002a  2803              CMP      r0,#3
00002c  d10b              BNE      |L1.70|
                  |L1.46|
;;;619      {
;;;620        /* Reset data cache */
;;;621        __HAL_FLASH_DATA_CACHE_RESET();
00002e  6808              LDR      r0,[r1,#0]
000030  f4405080          ORR      r0,r0,#0x1000
000034  6008              STR      r0,[r1,#0]
000036  6808              LDR      r0,[r1,#0]
000038  f4205080          BIC      r0,r0,#0x1000
00003c  6008              STR      r0,[r1,#0]
;;;622        /* Enable data cache */
;;;623        __HAL_FLASH_DATA_CACHE_ENABLE();
00003e  6808              LDR      r0,[r1,#0]
000040  f4406080          ORR      r0,r0,#0x400
000044  6008              STR      r0,[r1,#0]
                  |L1.70|
;;;624      }
;;;625    
;;;626      /* Reset internal variable */
;;;627      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
000046  2000              MOVS     r0,#0
000048  7710              STRB     r0,[r2,#0x1c]
;;;628    }
00004a  4770              BX       lr
;;;629    
                          ENDP

                  |L1.76|
                          DCD      pFlash
                  |L1.80|
                          DCD      0x40022000

                          AREA ||i.FLASH_MassErase||, CODE, READONLY, ALIGN=2

                  FLASH_MassErase PROC
;;;511      */
;;;512    static void FLASH_MassErase(uint32_t Banks)
000000  4908              LDR      r1,|L2.36|
;;;513    {
;;;514    #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;515      if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
;;;516    #endif
;;;517      {
;;;518        /* Check the parameters */
;;;519        assert_param(IS_FLASH_BANK(Banks));
;;;520    
;;;521        /* Set the Mass Erase Bit for the bank 1 if requested */
;;;522        if((Banks & FLASH_BANK_1) != 0U)
000002  07c2              LSLS     r2,r0,#31
000004  d003              BEQ      |L2.14|
;;;523        {
;;;524          SET_BIT(FLASH->CR, FLASH_CR_MER1);
000006  694a              LDR      r2,[r1,#0x14]
000008  f0420204          ORR      r2,r2,#4
00000c  614a              STR      r2,[r1,#0x14]
                  |L2.14|
;;;525        }
;;;526    
;;;527    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;528        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;529        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;530        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;531        /* Set the Mass Erase Bit for the bank 2 if requested */
;;;532        if((Banks & FLASH_BANK_2) != 0U)
00000e  0780              LSLS     r0,r0,#30
000010  d503              BPL      |L2.26|
;;;533        {
;;;534          SET_BIT(FLASH->CR, FLASH_CR_MER2);
000012  6948              LDR      r0,[r1,#0x14]
000014  f4404000          ORR      r0,r0,#0x8000
000018  6148              STR      r0,[r1,#0x14]
                  |L2.26|
;;;535        }
;;;536    #endif
;;;537      }
;;;538    #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;539      else
;;;540      {
;;;541        SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
;;;542      }
;;;543    #endif
;;;544    
;;;545      /* Proceed to erase all sectors */
;;;546      SET_BIT(FLASH->CR, FLASH_CR_STRT);
00001a  6948              LDR      r0,[r1,#0x14]
00001c  f4403080          ORR      r0,r0,#0x10000
000020  6148              STR      r0,[r1,#0x14]
;;;547    }
000022  4770              BX       lr
;;;548    
                          ENDP

                  |L2.36|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetPCROP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetPCROP PROC
;;;1218     */
;;;1219   static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1220   {
;;;1221     uint32_t reg_value;
;;;1222     uint32_t bank1_addr;
;;;1223   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1224       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1225       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1226       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1227     uint32_t bank2_addr;
;;;1228   #endif
;;;1229   
;;;1230   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1231       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1232       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1233       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1234     /* Get the information about the bank swapping */
;;;1235     if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
000002  4b22              LDR      r3,|L3.140|
000004  681b              LDR      r3,[r3,#0]
;;;1236     {
;;;1237       bank1_addr = FLASH_BASE;
;;;1238       bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
000006  f44f1780          MOV      r7,#0x100000
00000a  ea5f5cc3          LSLS     r12,r3,#23            ;1235
00000e  4b20              LDR      r3,|L3.144|
000010  681e              LDR      r6,[r3,#0]
000012  f04f6300          MOV      r3,#0x8000000         ;1237
000016  ea6f0506          MVN      r5,r6
00001a  d407              BMI      |L3.44|
00001c  042c              LSLS     r4,r5,#16
00001e  0c24              LSRS     r4,r4,#16
000020  d001              BEQ      |L3.38|
000022  0434              LSLS     r4,r6,#16
000024  09a7              LSRS     r7,r4,#6
                  |L3.38|
000026  eb030457          ADD      r4,r3,r7,LSR #1
00002a  e007              B        |L3.60|
                  |L3.44|
;;;1239     }
;;;1240     else
;;;1241     {
;;;1242       bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
00002c  042d              LSLS     r5,r5,#16
00002e  0c2d              LSRS     r5,r5,#16
000030  d001              BEQ      |L3.54|
000032  0435              LSLS     r5,r6,#16
000034  09af              LSRS     r7,r5,#6
                  |L3.54|
000036  461c              MOV      r4,r3
000038  eb030357          ADD      r3,r3,r7,LSR #1
                  |L3.60|
;;;1243       bank2_addr = FLASH_BASE;
;;;1244     }
;;;1245   #else
;;;1246     bank1_addr = FLASH_BASE;
;;;1247   #endif
;;;1248   
;;;1249   #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1250     if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
;;;1251     {
;;;1252       if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
;;;1253       {
;;;1254         reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
;;;1255         *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
;;;1256   
;;;1257         reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
;;;1258         *PCROPEndAddr = (reg_value << 4) + FLASH_BASE + 0xFU;
;;;1259       }
;;;1260       else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
;;;1261       {
;;;1262         reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
;;;1263         *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
;;;1264   
;;;1265         reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
;;;1266         *PCROPEndAddr = (reg_value << 4) + FLASH_BASE + 0xFU;;
;;;1267       }
;;;1268       else
;;;1269       {
;;;1270         /* Nothing to do */
;;;1271       }
;;;1272     }
;;;1273     else
;;;1274   #endif
;;;1275     {
;;;1276       if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
00003c  7805              LDRB     r5,[r0,#0]
;;;1277       {
;;;1278         reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
00003e  4e15              LDR      r6,|L3.148|
000040  f0050503          AND      r5,r5,#3              ;1276
000044  2d01              CMP      r5,#1                 ;1276
000046  d002              BEQ      |L3.78|
;;;1279         *PCROPStartAddr = (reg_value << 3) + bank1_addr;
;;;1280   
;;;1281         reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
;;;1282         *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
;;;1283       }
;;;1284   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1285       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1286       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1287       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1288       else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
000048  2d02              CMP      r5,#2
00004a  d00c              BEQ      |L3.102|
00004c  e016              B        |L3.124|
                  |L3.78|
00004e  6a74              LDR      r4,[r6,#0x24]         ;1278
000050  b2a4              UXTH     r4,r4                 ;1278
000052  eb0304c4          ADD      r4,r3,r4,LSL #3       ;1279
000056  600c              STR      r4,[r1,#0]            ;1279
000058  6ab1              LDR      r1,[r6,#0x28]         ;1281
00005a  b289              UXTH     r1,r1                 ;1281
00005c  eb0301c1          ADD      r1,r3,r1,LSL #3       ;1282
000060  1dc9              ADDS     r1,r1,#7              ;1282
000062  6011              STR      r1,[r2,#0]            ;1282
000064  e00a              B        |L3.124|
                  |L3.102|
;;;1289       {
;;;1290         reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
000066  6c73              LDR      r3,[r6,#0x44]
000068  b29b              UXTH     r3,r3
;;;1291         *PCROPStartAddr = (reg_value << 3) + bank2_addr;
00006a  eb0403c3          ADD      r3,r4,r3,LSL #3
00006e  600b              STR      r3,[r1,#0]
;;;1292   
;;;1293         reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
000070  6cb1              LDR      r1,[r6,#0x48]
000072  b289              UXTH     r1,r1
;;;1294         *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
000074  eb0401c1          ADD      r1,r4,r1,LSL #3
000078  1dc9              ADDS     r1,r1,#7
00007a  6011              STR      r1,[r2,#0]
                  |L3.124|
;;;1295       }
;;;1296   #endif
;;;1297       else
;;;1298       {
;;;1299         /* Nothing to do */
;;;1300       }
;;;1301     }
;;;1302   
;;;1303     *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
00007c  6801              LDR      r1,[r0,#0]
00007e  6ab2              LDR      r2,[r6,#0x28]
000080  f0024200          AND      r2,r2,#0x80000000
000084  4311              ORRS     r1,r1,r2
000086  6001              STR      r1,[r0,#0]
;;;1304   }
000088  bdf0              POP      {r4-r7,pc}
;;;1305   /**
                          ENDP

00008a  0000              DCW      0x0000
                  |L3.140|
                          DCD      0x40010000
                  |L3.144|
                          DCD      0x1fff75e0
                  |L3.148|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1169     */
;;;1170   static uint32_t FLASH_OB_GetRDP(void)
000000  4905              LDR      r1,|L4.24|
;;;1171   {
;;;1172     uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
000002  6a08              LDR      r0,[r1,#0x20]
000004  b2c0              UXTB     r0,r0
;;;1173   
;;;1174     if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
000006  28aa              CMP      r0,#0xaa
000008  d003              BEQ      |L4.18|
00000a  28cc              CMP      r0,#0xcc
00000c  d001              BEQ      |L4.18|
;;;1175     {
;;;1176       return (OB_RDP_LEVEL_1);
00000e  20bb              MOVS     r0,#0xbb
;;;1177     }
;;;1178     else
;;;1179     {
;;;1180       return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
;;;1181     }
;;;1182   }
000010  4770              BX       lr
                  |L4.18|
000012  6a08              LDR      r0,[r1,#0x20]         ;1180
000014  b2c0              UXTB     r0,r0                 ;1180
000016  4770              BX       lr
;;;1183   
                          ENDP

                  |L4.24|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1195     */
;;;1196   static uint32_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L5.12|
;;;1197   {
;;;1198     uint32_t user_config = READ_REG(FLASH->OPTR);
000002  6a00              LDR      r0,[r0,#0x20]
;;;1199     CLEAR_BIT(user_config, FLASH_OPTR_RDP);
000004  f02000ff          BIC      r0,r0,#0xff
;;;1200   
;;;1201     return user_config;
;;;1202   }
000008  4770              BX       lr
;;;1203   
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1127     */
;;;1128   static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
000000  4b14              LDR      r3,|L6.84|
;;;1129   {
;;;1130     /* Get the configuration of the write protected area */
;;;1131     if(WRPArea == OB_WRPAREA_BANK1_AREAA)
000002  2800              CMP      r0,#0
000004  d00d              BEQ      |L6.34|
;;;1132     {
;;;1133       *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
;;;1134       *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
;;;1135     }
;;;1136     else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
000006  2801              CMP      r0,#1
000008  d013              BEQ      |L6.50|
;;;1137     {
;;;1138       *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
;;;1139       *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
;;;1140     }
;;;1141   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1142       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1143       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1144       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1145     else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
00000a  2802              CMP      r0,#2
00000c  d019              BEQ      |L6.66|
;;;1146     {
;;;1147       *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
;;;1148       *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
;;;1149     }
;;;1150     else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
00000e  2804              CMP      r0,#4
000010  d106              BNE      |L6.32|
;;;1151     {
;;;1152       *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
000012  6d18              LDR      r0,[r3,#0x50]
000014  b2c0              UXTB     r0,r0
000016  6008              STR      r0,[r1,#0]
;;;1153       *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
000018  6d18              LDR      r0,[r3,#0x50]
00001a  f3c04007          UBFX     r0,r0,#16,#8
00001e  6010              STR      r0,[r2,#0]
                  |L6.32|
;;;1154     }
;;;1155   #endif
;;;1156     else
;;;1157     {
;;;1158       /* Nothing to do */
;;;1159     }
;;;1160   }
000020  4770              BX       lr
                  |L6.34|
000022  6ad8              LDR      r0,[r3,#0x2c]         ;1133
000024  b2c0              UXTB     r0,r0                 ;1133
000026  6008              STR      r0,[r1,#0]            ;1133
000028  6ad8              LDR      r0,[r3,#0x2c]         ;1134
00002a  f3c04007          UBFX     r0,r0,#16,#8          ;1134
00002e  6010              STR      r0,[r2,#0]            ;1134
000030  4770              BX       lr
                  |L6.50|
000032  6b18              LDR      r0,[r3,#0x30]         ;1138
000034  b2c0              UXTB     r0,r0                 ;1138
000036  6008              STR      r0,[r1,#0]            ;1138
000038  6b18              LDR      r0,[r3,#0x30]         ;1139
00003a  f3c04007          UBFX     r0,r0,#16,#8          ;1139
00003e  6010              STR      r0,[r2,#0]            ;1139
000040  4770              BX       lr
                  |L6.66|
000042  6cd8              LDR      r0,[r3,#0x4c]         ;1147
000044  b2c0              UXTB     r0,r0                 ;1147
000046  6008              STR      r0,[r1,#0]            ;1147
000048  6cd8              LDR      r0,[r3,#0x4c]         ;1148
00004a  f3c04007          UBFX     r0,r0,#16,#8          ;1148
00004e  6010              STR      r0,[r2,#0]            ;1148
000050  4770              BX       lr
;;;1161   
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_PCROPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROPConfig PROC
;;;996      */
;;;997    static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;998    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;999      HAL_StatusTypeDef status;
;;;1000     uint32_t reg_value;
;;;1001     uint32_t bank1_addr;
;;;1002   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1003       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1004       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1005       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1006     uint32_t bank2_addr;
;;;1007   #endif
;;;1008   
;;;1009     /* Check the parameters */
;;;1010     assert_param(IS_FLASH_BANK_EXCLUSIVE(PCROPConfig & FLASH_BANK_BOTH));
;;;1011     assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
;;;1012     assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
;;;1013     assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));
;;;1014   
;;;1015     /* Wait for last operation to be completed */
;;;1016     status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000a  f24c3850          MOV      r8,#0xc350
00000e  4640              MOV      r0,r8
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1017   
;;;1018     if(status == HAL_OK)
000014  2800              CMP      r0,#0
000016  d150              BNE      |L7.186|
;;;1019     {
;;;1020   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1021       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1022       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1023       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1024       /* Get the information about the bank swapping */
;;;1025       if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
000018  4829              LDR      r0,|L7.192|
00001a  6800              LDR      r0,[r0,#0]
;;;1026       {
;;;1027         bank1_addr = FLASH_BASE;
;;;1028         bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
00001c  4a29              LDR      r2,|L7.196|
00001e  05c0              LSLS     r0,r0,#23             ;1025
000020  f44f1180          MOV      r1,#0x100000
000024  f04f6300          MOV      r3,#0x8000000         ;1027
000028  d40a              BMI      |L7.64|
00002a  4618              MOV      r0,r3                 ;1027
00002c  6812              LDR      r2,[r2,#0]
00002e  43d4              MVNS     r4,r2
000030  0424              LSLS     r4,r4,#16
000032  0c24              LSRS     r4,r4,#16
000034  d001              BEQ      |L7.58|
000036  0411              LSLS     r1,r2,#16
000038  0989              LSRS     r1,r1,#6
                  |L7.58|
00003a  eb030351          ADD      r3,r3,r1,LSR #1
00003e  e008              B        |L7.82|
                  |L7.64|
;;;1029       }
;;;1030       else
;;;1031       {
;;;1032         bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
000040  6812              LDR      r2,[r2,#0]
000042  43d0              MVNS     r0,r2
000044  0400              LSLS     r0,r0,#16
000046  0c00              LSRS     r0,r0,#16
000048  d001              BEQ      |L7.78|
00004a  0410              LSLS     r0,r2,#16
00004c  0981              LSRS     r1,r0,#6
                  |L7.78|
00004e  eb030051          ADD      r0,r3,r1,LSR #1
                  |L7.82|
;;;1033         bank2_addr = FLASH_BASE;
;;;1034       }
;;;1035   #else
;;;1036       bank1_addr = FLASH_BASE;
;;;1037   #endif
;;;1038   
;;;1039   #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1040       if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
;;;1041       {
;;;1042         /* Configure the Proprietary code readout protection */
;;;1043         if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
;;;1044         {
;;;1045           reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
;;;1046           MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
;;;1047   
;;;1048           reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
;;;1049           MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
;;;1050         }
;;;1051         else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
;;;1052         {
;;;1053           reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
;;;1054           MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
;;;1055   
;;;1056           reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
;;;1057           MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
;;;1058         }
;;;1059         else
;;;1060         {
;;;1061           /* Nothing to do */
;;;1062         }
;;;1063       }
;;;1064       else
;;;1065   #endif
;;;1066       {
;;;1067         /* Configure the Proprietary code readout protection */
;;;1068         if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
000052  f0050103          AND      r1,r5,#3
;;;1069         {
;;;1070           reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
;;;1071           MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
000056  4c1c              LDR      r4,|L7.200|
000058  2901              CMP      r1,#1                 ;1068
00005a  d002              BEQ      |L7.98|
;;;1072   
;;;1073           reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
;;;1074           MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
;;;1075         }
;;;1076   #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;1077       defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;1078       defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;1079       defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;1080         else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
00005c  2902              CMP      r1,#2
00005e  d00f              BEQ      |L7.128|
000060  e01c              B        |L7.156|
                  |L7.98|
000062  1a31              SUBS     r1,r6,r0              ;1070
000064  08c9              LSRS     r1,r1,#3              ;1070
000066  6a62              LDR      r2,[r4,#0x24]         ;1071
000068  f36f020f          BFC      r2,#0,#16             ;1071
00006c  430a              ORRS     r2,r2,r1              ;1071
00006e  6262              STR      r2,[r4,#0x24]         ;1071
000070  1a38              SUBS     r0,r7,r0              ;1073
000072  08c0              LSRS     r0,r0,#3              ;1073
000074  6aa1              LDR      r1,[r4,#0x28]         ;1074
000076  f36f010f          BFC      r1,#0,#16             ;1074
00007a  4301              ORRS     r1,r1,r0              ;1074
00007c  62a1              STR      r1,[r4,#0x28]         ;1074
00007e  e00d              B        |L7.156|
                  |L7.128|
;;;1081         {
;;;1082           reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
000080  1af0              SUBS     r0,r6,r3
000082  08c0              LSRS     r0,r0,#3
;;;1083           MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
000084  6c61              LDR      r1,[r4,#0x44]
000086  f36f010f          BFC      r1,#0,#16
00008a  4301              ORRS     r1,r1,r0
00008c  6461              STR      r1,[r4,#0x44]
;;;1084   
;;;1085           reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
00008e  1af8              SUBS     r0,r7,r3
000090  08c0              LSRS     r0,r0,#3
;;;1086           MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
000092  6ca1              LDR      r1,[r4,#0x48]
000094  f36f010f          BFC      r1,#0,#16
000098  4301              ORRS     r1,r1,r0
00009a  64a1              STR      r1,[r4,#0x48]
                  |L7.156|
;;;1087         }
;;;1088   #endif
;;;1089         else
;;;1090         {
;;;1091           /* Nothing to do */
;;;1092         }
;;;1093       }
;;;1094   
;;;1095       MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
00009c  6aa0              LDR      r0,[r4,#0x28]
00009e  f360051e          BFI      r5,r0,#0,#31
0000a2  62a5              STR      r5,[r4,#0x28]
;;;1096   
;;;1097       /* Set OPTSTRT Bit */
;;;1098       SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
0000a4  6960              LDR      r0,[r4,#0x14]
0000a6  f4403000          ORR      r0,r0,#0x20000
0000aa  6160              STR      r0,[r4,#0x14]
;;;1099   
;;;1100       /* Wait for last operation to be completed */
;;;1101       status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000ac  4640              MOV      r0,r8
0000ae  f7fffffe          BL       FLASH_WaitForLastOperation
;;;1102   
;;;1103       /* If the option byte program operation is completed, disable the OPTSTRT Bit */
;;;1104       CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
0000b2  6961              LDR      r1,[r4,#0x14]
0000b4  f4213100          BIC      r1,r1,#0x20000
0000b8  6161              STR      r1,[r4,#0x14]
                  |L7.186|
;;;1105     }
;;;1106   
;;;1107     return status;
;;;1108   }
0000ba  e8bd81f0          POP      {r4-r8,pc}
;;;1109   
                          ENDP

0000be  0000              DCW      0x0000
                  |L7.192|
                          DCD      0x40010000
                  |L7.196|
                          DCD      0x1fff75e0
                  |L7.200|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;732      */
;;;733    static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
000000  b570              PUSH     {r4-r6,lr}
;;;734    {
000002  4605              MOV      r5,r0
;;;735      HAL_StatusTypeDef status;
;;;736    
;;;737      /* Check the parameters */
;;;738      assert_param(IS_OB_RDP_LEVEL(RDPLevel));
;;;739    
;;;740      /* Wait for last operation to be completed */
;;;741      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000004  f24c3650          MOV      r6,#0xc350
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
;;;742    
;;;743      if(status == HAL_OK)
00000e  2800              CMP      r0,#0
000010  d110              BNE      |L8.52|
;;;744      {
;;;745        /* Configure the RDP level in the option bytes register */
;;;746        MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
000012  4c09              LDR      r4,|L8.56|
000014  6a20              LDR      r0,[r4,#0x20]
000016  f02000ff          BIC      r0,r0,#0xff
00001a  4328              ORRS     r0,r0,r5
00001c  6220              STR      r0,[r4,#0x20]
;;;747    
;;;748        /* Set OPTSTRT Bit */
;;;749        SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
00001e  6960              LDR      r0,[r4,#0x14]
000020  f4403000          ORR      r0,r0,#0x20000
000024  6160              STR      r0,[r4,#0x14]
;;;750    
;;;751        /* Wait for last operation to be completed */
;;;752        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       FLASH_WaitForLastOperation
;;;753    
;;;754        /* If the option byte program operation is completed, disable the OPTSTRT Bit */
;;;755        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
00002c  6961              LDR      r1,[r4,#0x14]
00002e  f4213100          BIC      r1,r1,#0x20000
000032  6161              STR      r1,[r4,#0x14]
                  |L8.52|
;;;756      }
;;;757    
;;;758      return status;
;;;759    }
000034  bd70              POP      {r4-r6,pc}
;;;760    
                          ENDP

000036  0000              DCW      0x0000
                  |L8.56|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;776      */
;;;777    static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;778    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;779      uint32_t optr_reg_val = 0;
000008  2400              MOVS     r4,#0
;;;780      uint32_t optr_reg_mask = 0;
00000a  2500              MOVS     r5,#0
;;;781      HAL_StatusTypeDef status;
;;;782    
;;;783      /* Check the parameters */
;;;784      assert_param(IS_OB_USER_TYPE(UserType));
;;;785    
;;;786      /* Wait for last operation to be completed */
;;;787      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000c  f24c3850          MOV      r8,#0xc350
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       FLASH_WaitForLastOperation
;;;788    
;;;789      if(status == HAL_OK)
000016  2800              CMP      r0,#0
000018  d177              BNE      |L9.266|
;;;790      {
;;;791        if((UserType & OB_USER_BOR_LEV) != 0U)
00001a  07f0              LSLS     r0,r6,#31
00001c  d003              BEQ      |L9.38|
;;;792        {
;;;793          /* BOR level option byte should be modified */
;;;794          assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));
;;;795    
;;;796          /* Set value and mask for BOR level option byte */
;;;797          optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
00001e  f40764e0          AND      r4,r7,#0x700
;;;798          optr_reg_mask |= FLASH_OPTR_BOR_LEV;
000022  f44f65e0          MOV      r5,#0x700
                  |L9.38|
;;;799        }
;;;800    
;;;801        if((UserType & OB_USER_nRST_STOP) != 0U)
000026  07b0              LSLS     r0,r6,#30
000028  d504              BPL      |L9.52|
;;;802        {
;;;803          /* nRST_STOP option byte should be modified */
;;;804          assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));
;;;805    
;;;806          /* Set value and mask for nRST_STOP option byte */
;;;807          optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
00002a  f4075080          AND      r0,r7,#0x1000
00002e  4304              ORRS     r4,r4,r0
;;;808          optr_reg_mask |= FLASH_OPTR_nRST_STOP;
000030  f4455580          ORR      r5,r5,#0x1000
                  |L9.52|
;;;809        }
;;;810    
;;;811        if((UserType & OB_USER_nRST_STDBY) != 0U)
000034  0770              LSLS     r0,r6,#29
000036  d504              BPL      |L9.66|
;;;812        {
;;;813          /* nRST_STDBY option byte should be modified */
;;;814          assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));
;;;815    
;;;816          /* Set value and mask for nRST_STDBY option byte */
;;;817          optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
000038  f4075000          AND      r0,r7,#0x2000
00003c  4304              ORRS     r4,r4,r0
;;;818          optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
00003e  f4455500          ORR      r5,r5,#0x2000
                  |L9.66|
;;;819        }
;;;820    
;;;821        if((UserType & OB_USER_nRST_SHDW) != 0U)
000042  04f0              LSLS     r0,r6,#19
000044  d504              BPL      |L9.80|
;;;822        {
;;;823          /* nRST_SHDW option byte should be modified */
;;;824          assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));
;;;825    
;;;826          /* Set value and mask for nRST_SHDW option byte */
;;;827          optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
000046  f4074080          AND      r0,r7,#0x4000
00004a  4304              ORRS     r4,r4,r0
;;;828          optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
00004c  f4454580          ORR      r5,r5,#0x4000
                  |L9.80|
;;;829        }
;;;830    
;;;831        if((UserType & OB_USER_IWDG_SW) != 0U)
000050  0730              LSLS     r0,r6,#28
000052  d504              BPL      |L9.94|
;;;832        {
;;;833          /* IWDG_SW option byte should be modified */
;;;834          assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));
;;;835    
;;;836          /* Set value and mask for IWDG_SW option byte */
;;;837          optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
000054  f4073080          AND      r0,r7,#0x10000
000058  4304              ORRS     r4,r4,r0
;;;838          optr_reg_mask |= FLASH_OPTR_IWDG_SW;
00005a  f4453580          ORR      r5,r5,#0x10000
                  |L9.94|
;;;839        }
;;;840    
;;;841        if((UserType & OB_USER_IWDG_STOP) != 0U)
00005e  06f0              LSLS     r0,r6,#27
000060  d504              BPL      |L9.108|
;;;842        {
;;;843          /* IWDG_STOP option byte should be modified */
;;;844          assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));
;;;845    
;;;846          /* Set value and mask for IWDG_STOP option byte */
;;;847          optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
000062  f4073000          AND      r0,r7,#0x20000
000066  4304              ORRS     r4,r4,r0
;;;848          optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
000068  f4453500          ORR      r5,r5,#0x20000
                  |L9.108|
;;;849        }
;;;850    
;;;851        if((UserType & OB_USER_IWDG_STDBY) != 0U)
00006c  06b0              LSLS     r0,r6,#26
00006e  d504              BPL      |L9.122|
;;;852        {
;;;853          /* IWDG_STDBY option byte should be modified */
;;;854          assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));
;;;855    
;;;856          /* Set value and mask for IWDG_STDBY option byte */
;;;857          optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
000070  f4072080          AND      r0,r7,#0x40000
000074  4304              ORRS     r4,r4,r0
;;;858          optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
000076  f4452580          ORR      r5,r5,#0x40000
                  |L9.122|
;;;859        }
;;;860    
;;;861        if((UserType & OB_USER_WWDG_SW) != 0U)
00007a  0670              LSLS     r0,r6,#25
00007c  d504              BPL      |L9.136|
;;;862        {
;;;863          /* WWDG_SW option byte should be modified */
;;;864          assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));
;;;865    
;;;866          /* Set value and mask for WWDG_SW option byte */
;;;867          optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
00007e  f4072000          AND      r0,r7,#0x80000
000082  4304              ORRS     r4,r4,r0
;;;868          optr_reg_mask |= FLASH_OPTR_WWDG_SW;
000084  f4452500          ORR      r5,r5,#0x80000
                  |L9.136|
;;;869        }
;;;870    
;;;871    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;872        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;873        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;874        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;875        if((UserType & OB_USER_BFB2) != 0U)
000088  0630              LSLS     r0,r6,#24
00008a  d504              BPL      |L9.150|
;;;876        {
;;;877          /* BFB2 option byte should be modified */
;;;878          assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));
;;;879    
;;;880          /* Set value and mask for BFB2 option byte */
;;;881          optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
00008c  f4071080          AND      r0,r7,#0x100000
000090  4304              ORRS     r4,r4,r0
;;;882          optr_reg_mask |= FLASH_OPTR_BFB2;
000092  f4451580          ORR      r5,r5,#0x100000
                  |L9.150|
;;;883        }
;;;884    
;;;885        if((UserType & OB_USER_DUALBANK) != 0U)
000096  05f0              LSLS     r0,r6,#23
000098  d504              BPL      |L9.164|
;;;886        {
;;;887    #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;888          /* DUALBANK option byte should be modified */
;;;889          assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DB1M));
;;;890    
;;;891          /* Set value and mask for DUALBANK option byte */
;;;892          optr_reg_val |= (UserConfig & FLASH_OPTR_DB1M);
;;;893          optr_reg_mask |= FLASH_OPTR_DB1M;
;;;894    #else
;;;895          /* DUALBANK option byte should be modified */
;;;896          assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));
;;;897    
;;;898          /* Set value and mask for DUALBANK option byte */
;;;899          optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
00009a  f4071000          AND      r0,r7,#0x200000
00009e  4304              ORRS     r4,r4,r0
;;;900          optr_reg_mask |= FLASH_OPTR_DUALBANK;
0000a0  f4451500          ORR      r5,r5,#0x200000
                  |L9.164|
;;;901    #endif
;;;902        }
;;;903    #endif
;;;904    
;;;905        if((UserType & OB_USER_nBOOT1) != 0U)
0000a4  05b0              LSLS     r0,r6,#22
0000a6  d504              BPL      |L9.178|
;;;906        {
;;;907          /* nBOOT1 option byte should be modified */
;;;908          assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));
;;;909    
;;;910          /* Set value and mask for nBOOT1 option byte */
;;;911          optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
0000a8  f4070000          AND      r0,r7,#0x800000
0000ac  4304              ORRS     r4,r4,r0
;;;912          optr_reg_mask |= FLASH_OPTR_nBOOT1;
0000ae  f4450500          ORR      r5,r5,#0x800000
                  |L9.178|
;;;913        }
;;;914    
;;;915        if((UserType & OB_USER_SRAM2_PE) != 0U)
0000b2  0570              LSLS     r0,r6,#21
0000b4  d504              BPL      |L9.192|
;;;916        {
;;;917          /* SRAM2_PE option byte should be modified */
;;;918          assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));
;;;919    
;;;920          /* Set value and mask for SRAM2_PE option byte */
;;;921          optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
0000b6  f0077080          AND      r0,r7,#0x1000000
0000ba  4304              ORRS     r4,r4,r0
;;;922          optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
0000bc  f0457580          ORR      r5,r5,#0x1000000
                  |L9.192|
;;;923        }
;;;924    
;;;925        if((UserType & OB_USER_SRAM2_RST) != 0U)
0000c0  0530              LSLS     r0,r6,#20
0000c2  d504              BPL      |L9.206|
;;;926        {
;;;927          /* SRAM2_RST option byte should be modified */
;;;928          assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));
;;;929    
;;;930          /* Set value and mask for SRAM2_RST option byte */
;;;931          optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
0000c4  f0077000          AND      r0,r7,#0x2000000
0000c8  4304              ORRS     r4,r4,r0
;;;932          optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
0000ca  f0457500          ORR      r5,r5,#0x2000000
                  |L9.206|
;;;933        }
;;;934    
;;;935    #if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || \
;;;936        defined (STM32L442xx) || defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
;;;937        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;938        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;939        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;940        if((UserType & OB_USER_nSWBOOT0) != 0U)
0000ce  04b0              LSLS     r0,r6,#18
0000d0  d504              BPL      |L9.220|
;;;941        {
;;;942          /* nSWBOOT0 option byte should be modified */
;;;943          assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));
;;;944    
;;;945          /* Set value and mask for nSWBOOT0 option byte */
;;;946          optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
0000d2  f0076080          AND      r0,r7,#0x4000000
0000d6  4304              ORRS     r4,r4,r0
;;;947          optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
0000d8  f0456580          ORR      r5,r5,#0x4000000
                  |L9.220|
;;;948        }
;;;949    
;;;950        if((UserType & OB_USER_nBOOT0) != 0U)
0000dc  0470              LSLS     r0,r6,#17
0000de  d504              BPL      |L9.234|
;;;951        {
;;;952          /* nBOOT0 option byte should be modified */
;;;953          assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));
;;;954    
;;;955          /* Set value and mask for nBOOT0 option byte */
;;;956          optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
0000e0  f0076000          AND      r0,r7,#0x8000000
0000e4  4304              ORRS     r4,r4,r0
;;;957          optr_reg_mask |= FLASH_OPTR_nBOOT0;
0000e6  f0456500          ORR      r5,r5,#0x8000000
                  |L9.234|
;;;958        }
;;;959    #endif
;;;960    
;;;961        /* Configure the option bytes register */
;;;962        MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
0000ea  4e09              LDR      r6,|L9.272|
0000ec  6a30              LDR      r0,[r6,#0x20]
0000ee  43a8              BICS     r0,r0,r5
0000f0  4320              ORRS     r0,r0,r4
0000f2  6230              STR      r0,[r6,#0x20]
;;;963    
;;;964        /* Set OPTSTRT Bit */
;;;965        SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
0000f4  6970              LDR      r0,[r6,#0x14]
0000f6  f4403000          ORR      r0,r0,#0x20000
0000fa  6170              STR      r0,[r6,#0x14]
;;;966    
;;;967        /* Wait for last operation to be completed */
;;;968        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
0000fc  4640              MOV      r0,r8
0000fe  f7fffffe          BL       FLASH_WaitForLastOperation
;;;969    
;;;970        /* If the option byte program operation is completed, disable the OPTSTRT Bit */
;;;971        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
000102  6971              LDR      r1,[r6,#0x14]
000104  f4213100          BIC      r1,r1,#0x20000
000108  6171              STR      r1,[r6,#0x14]
                  |L9.266|
;;;972      }
;;;973    
;;;974      return status;
;;;975    }
00010a  e8bd81f0          POP      {r4-r8,pc}
;;;976    
                          ENDP

00010e  0000              DCW      0x0000
                  |L9.272|
                          DCD      0x40022000

                          AREA ||i.FLASH_OB_WRPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRPConfig PROC
;;;656      */
;;;657    static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;658    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;659      HAL_StatusTypeDef status;
;;;660    
;;;661      /* Check the parameters */
;;;662      assert_param(IS_OB_WRPAREA(WRPArea));
;;;663      assert_param(IS_FLASH_PAGE(WRPStartOffset));
;;;664      assert_param(IS_FLASH_PAGE(WRDPEndOffset));
;;;665    
;;;666      /* Wait for last operation to be completed */
;;;667      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
00000a  f24c3650          MOV      r6,#0xc350
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       FLASH_WaitForLastOperation
;;;668    
;;;669      if(status == HAL_OK)
000014  2800              CMP      r0,#0
000016  d12c              BNE      |L10.114|
;;;670      {
;;;671        /* Configure the write protected area */
;;;672        if(WRPArea == OB_WRPAREA_BANK1_AREAA)
;;;673        {
;;;674          MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
000018  ea474105          ORR      r1,r7,r5,LSL #16
00001c  4d16              LDR      r5,|L10.120|
00001e  b134              CBZ      r4,|L10.46|
;;;675                     (WRPStartOffset | (WRDPEndOffset << 16)));
;;;676        }
;;;677        else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
000020  2c01              CMP      r4,#1
000022  d00a              BEQ      |L10.58|
;;;678        {
;;;679          MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
;;;680                     (WRPStartOffset | (WRDPEndOffset << 16)));
;;;681        }
;;;682    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;683        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;684        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;685        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;686        else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
000024  2c02              CMP      r4,#2
000026  d00e              BEQ      |L10.70|
;;;687        {
;;;688          MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
;;;689                     (WRPStartOffset | (WRDPEndOffset << 16)));
;;;690        }
;;;691        else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
000028  2c04              CMP      r4,#4
00002a  d012              BEQ      |L10.82|
00002c  e016              B        |L10.92|
                  |L10.46|
00002e  6ae8              LDR      r0,[r5,#0x2c]         ;674
000030  f00020ff          AND      r0,r0,#0xff00ff00     ;674
000034  4308              ORRS     r0,r0,r1              ;674
000036  62e8              STR      r0,[r5,#0x2c]         ;674
000038  e010              B        |L10.92|
                  |L10.58|
00003a  6b28              LDR      r0,[r5,#0x30]         ;679
00003c  f00020ff          AND      r0,r0,#0xff00ff00     ;679
000040  4308              ORRS     r0,r0,r1              ;679
000042  6328              STR      r0,[r5,#0x30]         ;679
000044  e00a              B        |L10.92|
                  |L10.70|
000046  6ce8              LDR      r0,[r5,#0x4c]         ;688
000048  f00020ff          AND      r0,r0,#0xff00ff00     ;688
00004c  4308              ORRS     r0,r0,r1              ;688
00004e  64e8              STR      r0,[r5,#0x4c]         ;688
000050  e004              B        |L10.92|
                  |L10.82|
;;;692        {
;;;693          MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
000052  6d28              LDR      r0,[r5,#0x50]
000054  f00020ff          AND      r0,r0,#0xff00ff00
000058  4308              ORRS     r0,r0,r1
00005a  6528              STR      r0,[r5,#0x50]
                  |L10.92|
;;;694                     (WRPStartOffset | (WRDPEndOffset << 16)));
;;;695        }
;;;696    #endif
;;;697        else
;;;698        {
;;;699          /* Nothing to do */
;;;700        }
;;;701    
;;;702        /* Set OPTSTRT Bit */
;;;703        SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
00005c  6968              LDR      r0,[r5,#0x14]
00005e  f4403000          ORR      r0,r0,#0x20000
000062  6168              STR      r0,[r5,#0x14]
;;;704    
;;;705        /* Wait for last operation to be completed */
;;;706        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       FLASH_WaitForLastOperation
;;;707    
;;;708        /* If the option byte program operation is completed, disable the OPTSTRT Bit */
;;;709        CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
00006a  6969              LDR      r1,[r5,#0x14]
00006c  f4213100          BIC      r1,r1,#0x20000
000070  6169              STR      r1,[r5,#0x14]
                  |L10.114|
;;;710      }
;;;711    
;;;712      return status;
;;;713    }
000072  e8bd81f0          POP      {r4-r8,pc}
;;;714    
                          ENDP

000076  0000              DCW      0x0000
                  |L10.120|
                          DCD      0x40022000

                          AREA ||i.FLASH_PageErase||, CODE, READONLY, ALIGN=2

                  FLASH_PageErase PROC
;;;558      */
;;;559    void FLASH_PageErase(uint32_t Page, uint32_t Banks)
000000  07ca              LSLS     r2,r1,#31
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_FLASH_PAGE(Page));
;;;563    
;;;564    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;565        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;566        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;567        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;568    #if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;569      if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
;;;570      {
;;;571        CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
;;;572      }
;;;573      else
;;;574    #endif
;;;575      {
;;;576        assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
;;;577    
;;;578        if((Banks & FLASH_BANK_1) != 0U)
;;;579        {
;;;580          CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
000002  490c              LDR      r1,|L11.52|
000004  d004              BEQ      |L11.16|
000006  694a              LDR      r2,[r1,#0x14]
000008  f4226200          BIC      r2,r2,#0x800
00000c  614a              STR      r2,[r1,#0x14]
00000e  e003              B        |L11.24|
                  |L11.16|
;;;581        }
;;;582        else
;;;583        {
;;;584          SET_BIT(FLASH->CR, FLASH_CR_BKER);
000010  694a              LDR      r2,[r1,#0x14]
000012  f4426200          ORR      r2,r2,#0x800
000016  614a              STR      r2,[r1,#0x14]
                  |L11.24|
;;;585        }
;;;586      }
;;;587    #else
;;;588      /* Prevent unused argument(s) compilation warning */
;;;589      UNUSED(Banks);
;;;590    #endif
;;;591    
;;;592      /* Proceed to erase the page */
;;;593      MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
000018  694a              LDR      r2,[r1,#0x14]
00001a  f36002ca          BFI      r2,r0,#3,#8
00001e  614a              STR      r2,[r1,#0x14]
;;;594      SET_BIT(FLASH->CR, FLASH_CR_PER);
000020  6948              LDR      r0,[r1,#0x14]
000022  f0400002          ORR      r0,r0,#2
000026  6148              STR      r0,[r1,#0x14]
;;;595      SET_BIT(FLASH->CR, FLASH_CR_STRT);
000028  6948              LDR      r0,[r1,#0x14]
00002a  f4403080          ORR      r0,r0,#0x10000
00002e  6148              STR      r0,[r1,#0x14]
;;;596    }
000030  4770              BX       lr
;;;597    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase PROC
;;;126      */
;;;127    HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;128    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;129      HAL_StatusTypeDef status;
;;;130      uint32_t page_index;
;;;131    
;;;132      /* Process Locked */
;;;133      __HAL_LOCK(&pFlash);
000008  4f3c              LDR      r7,|L12.252|
00000a  7838              LDRB     r0,[r7,#0]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d00b              BEQ      |L12.40|
000010  2501              MOVS     r5,#1
000012  703d              STRB     r5,[r7,#0]
;;;134    
;;;135      /* Check the parameters */
;;;136      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;137    
;;;138      /* Wait for last operation to be completed */
;;;139      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
000014  f24c3b50          MOV      r11,#0xc350
000018  4658              MOV      r0,r11
00001a  f7fffffe          BL       FLASH_WaitForLastOperation
00001e  4606              MOV      r6,r0
;;;140    
;;;141      if (status == HAL_OK)
000020  f04f0a00          MOV      r10,#0
000024  b11e              CBZ      r6,|L12.46|
000026  e064              B        |L12.242|
                  |L12.40|
000028  2002              MOVS     r0,#2                 ;133
                  |L12.42|
;;;142      {
;;;143        pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
;;;144    
;;;145        /* Deactivate the cache if they are activated to avoid data misbehavior */
;;;146        if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
;;;147        {
;;;148          /* Disable instruction cache  */
;;;149          __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
;;;150    
;;;151          if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
;;;152          {
;;;153            /* Disable data cache  */
;;;154            __HAL_FLASH_DATA_CACHE_DISABLE();
;;;155            pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
;;;156          }
;;;157          else
;;;158          {
;;;159            pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
;;;160          }
;;;161        }
;;;162        else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
;;;163        {
;;;164          /* Disable data cache  */
;;;165          __HAL_FLASH_DATA_CACHE_DISABLE();
;;;166          pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
;;;167        }
;;;168        else
;;;169        {
;;;170          pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
;;;171        }
;;;172    
;;;173        if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;174        {
;;;175          /* Mass erase to be done */
;;;176          FLASH_MassErase(pEraseInit->Banks);
;;;177    
;;;178          /* Wait for last operation to be completed */
;;;179          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;180    
;;;181    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;182        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;183        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;184        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;185          /* If the erase operation is completed, disable the MER1 and MER2 Bits */
;;;186          CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
;;;187    #else
;;;188          /* If the erase operation is completed, disable the MER1 Bit */
;;;189          CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
;;;190    #endif
;;;191        }
;;;192        else
;;;193        {
;;;194          /*Initialization of PageError variable*/
;;;195          *PageError = 0xFFFFFFFFU;
;;;196    
;;;197          for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
;;;198          {
;;;199            FLASH_PageErase(page_index, pEraseInit->Banks);
;;;200    
;;;201            /* Wait for last operation to be completed */
;;;202            status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
;;;203    
;;;204            /* If the erase operation is completed, disable the PER Bit */
;;;205            CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
;;;206    
;;;207            if (status != HAL_OK)
;;;208            {
;;;209              /* In case of error, stop erase procedure and return the faulty address */
;;;210              *PageError = page_index;
;;;211              break;
;;;212            }
;;;213          }
;;;214        }
;;;215    
;;;216        /* Flush the caches to be sure of the data consistency */
;;;217        FLASH_FlushCaches();
;;;218      }
;;;219    
;;;220      /* Process Unlocked */
;;;221      __HAL_UNLOCK(&pFlash);
;;;222    
;;;223      return status;
;;;224    }
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.46|
00002e  f8c7a004          STR      r10,[r7,#4]           ;143  ; pFlash
000032  f8df90cc          LDR      r9,|L12.256|
000036  f8d90000          LDR      r0,[r9,#0]            ;146
00003a  0580              LSLS     r0,r0,#22             ;146
00003c  d514              BPL      |L12.104|
00003e  f8d90000          LDR      r0,[r9,#0]            ;149
000042  f4207000          BIC      r0,r0,#0x200          ;149
000046  f8c90000          STR      r0,[r9,#0]            ;149
00004a  f8d90000          LDR      r0,[r9,#0]            ;151
00004e  0540              LSLS     r0,r0,#21             ;151
000050  d508              BPL      |L12.100|
000052  f8d90000          LDR      r0,[r9,#0]            ;154
000056  f4206080          BIC      r0,r0,#0x400          ;154
00005a  f8c90000          STR      r0,[r9,#0]            ;154
00005e  2003              MOVS     r0,#3                 ;155
000060  7738              STRB     r0,[r7,#0x1c]         ;155
000062  e010              B        |L12.134|
                  |L12.100|
000064  773d              STRB     r5,[r7,#0x1c]         ;159
000066  e00e              B        |L12.134|
                  |L12.104|
000068  f8d90000          LDR      r0,[r9,#0]            ;162
00006c  0540              LSLS     r0,r0,#21             ;162
00006e  d508              BPL      |L12.130|
000070  f8d90000          LDR      r0,[r9,#0]            ;165
000074  f4206080          BIC      r0,r0,#0x400          ;165
000078  f8c90000          STR      r0,[r9,#0]            ;165
00007c  2002              MOVS     r0,#2                 ;166
00007e  7738              STRB     r0,[r7,#0x1c]         ;166
000080  e001              B        |L12.134|
                  |L12.130|
000082  f887a01c          STRB     r10,[r7,#0x1c]        ;170
                  |L12.134|
000086  6820              LDR      r0,[r4,#0]            ;173
000088  2801              CMP      r0,#1                 ;173
00008a  d007              BEQ      |L12.156|
00008c  f04f30ff          MOV      r0,#0xffffffff        ;195
000090  f8c80000          STR      r0,[r8,#0]            ;195
000094  68a5              LDR      r5,[r4,#8]            ;197
000096  f2407bfa          MOV      r11,#0x7fa            ;205
00009a  e023              B        |L12.228|
                  |L12.156|
00009c  6860              LDR      r0,[r4,#4]            ;176
00009e  f7fffffe          BL       FLASH_MassErase
0000a2  4658              MOV      r0,r11                ;179
0000a4  f7fffffe          BL       FLASH_WaitForLastOperation
0000a8  4606              MOV      r6,r0                 ;179
0000aa  f8d90014          LDR      r0,[r9,#0x14]         ;186
0000ae  f2480104          MOV      r1,#0x8004            ;186
0000b2  4388              BICS     r0,r0,r1              ;186
0000b4  f8c90014          STR      r0,[r9,#0x14]         ;186
0000b8  e019              B        |L12.238|
                  |L12.186|
0000ba  4628              MOV      r0,r5                 ;199
0000bc  6861              LDR      r1,[r4,#4]            ;199
0000be  f7fffffe          BL       FLASH_PageErase
0000c2  f24c3050          MOV      r0,#0xc350            ;202
0000c6  f7fffffe          BL       FLASH_WaitForLastOperation
0000ca  4606              MOV      r6,r0                 ;202
0000cc  f8d90014          LDR      r0,[r9,#0x14]         ;205
0000d0  ea20000b          BIC      r0,r0,r11             ;205
0000d4  f8c90014          STR      r0,[r9,#0x14]         ;205
0000d8  0030              MOVS     r0,r6                 ;207
0000da  d002              BEQ      |L12.226|
0000dc  f8c85000          STR      r5,[r8,#0]            ;210
0000e0  e005              B        |L12.238|
                  |L12.226|
0000e2  1c6d              ADDS     r5,r5,#1              ;197
                  |L12.228|
0000e4  e9d40102          LDRD     r0,r1,[r4,#8]         ;197
0000e8  4408              ADD      r0,r0,r1              ;197
0000ea  42a8              CMP      r0,r5                 ;197
0000ec  d8e5              BHI      |L12.186|
                  |L12.238|
0000ee  f7fffffe          BL       FLASH_FlushCaches
                  |L12.242|
0000f2  f887a000          STRB     r10,[r7,#0]           ;221
0000f6  4630              MOV      r0,r6                 ;223
0000f8  e797              B        |L12.42|
;;;225    
                          ENDP

0000fa  0000              DCW      0x0000
                  |L12.252|
                          DCD      pFlash
                  |L12.256|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_Erase_IT||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_Erase_IT PROC
;;;232      */
;;;233    HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;234    {
;;;235      HAL_StatusTypeDef status = HAL_OK;
000004  2400              MOVS     r4,#0
;;;236    
;;;237      /* Process Locked */
;;;238      __HAL_LOCK(&pFlash);
000006  4922              LDR      r1,|L13.144|
000008  780a              LDRB     r2,[r1,#0]  ; pFlash
00000a  2a01              CMP      r2,#1
00000c  d017              BEQ      |L13.62|
00000e  2301              MOVS     r3,#1
000010  700b              STRB     r3,[r1,#0]
;;;239    
;;;240      /* Check the parameters */
;;;241      assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
;;;242    
;;;243      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000012  2600              MOVS     r6,#0
000014  604e              STR      r6,[r1,#4]  ; pFlash
;;;244    
;;;245      /* Deactivate the cache if they are activated to avoid data misbehavior */
;;;246      if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
000016  4a1f              LDR      r2,|L13.148|
000018  6815              LDR      r5,[r2,#0]
00001a  05af              LSLS     r7,r5,#22
00001c  f04f0502          MOV      r5,#2                 ;238
000020  d512              BPL      |L13.72|
;;;247      {
;;;248        /* Disable instruction cache  */
;;;249        __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
000022  6816              LDR      r6,[r2,#0]
000024  f4267600          BIC      r6,r6,#0x200
000028  6016              STR      r6,[r2,#0]
;;;250    
;;;251        if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
00002a  6816              LDR      r6,[r2,#0]
00002c  0576              LSLS     r6,r6,#21
00002e  d509              BPL      |L13.68|
;;;252        {
;;;253          /* Disable data cache  */
;;;254          __HAL_FLASH_DATA_CACHE_DISABLE();
000030  6816              LDR      r6,[r2,#0]
000032  f4266680          BIC      r6,r6,#0x400
000036  6016              STR      r6,[r2,#0]
;;;255          pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
000038  2603              MOVS     r6,#3
00003a  770e              STRB     r6,[r1,#0x1c]
00003c  e00e              B        |L13.92|
                  |L13.62|
00003e  2002              MOVS     r0,#2                 ;238
                  |L13.64|
;;;256        }
;;;257        else
;;;258        {
;;;259          pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
;;;260        }
;;;261      }
;;;262      else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
;;;263      {
;;;264        /* Disable data cache  */
;;;265        __HAL_FLASH_DATA_CACHE_DISABLE();
;;;266        pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
;;;267      }
;;;268      else
;;;269      {
;;;270        pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
;;;271      }
;;;272    
;;;273      /* Enable End of Operation and Error interrupts */
;;;274      __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
;;;275    
;;;276      pFlash.Bank = pEraseInit->Banks;
;;;277    
;;;278      if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
;;;279      {
;;;280        /* Mass erase to be done */
;;;281        pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
;;;282        FLASH_MassErase(pEraseInit->Banks);
;;;283      }
;;;284      else
;;;285      {
;;;286        /* Erase by page to be done */
;;;287        pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
;;;288        pFlash.NbPagesToErase = pEraseInit->NbPages;
;;;289        pFlash.Page = pEraseInit->Page;
;;;290    
;;;291        /*Erase 1st page and wait for IT */
;;;292        FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
;;;293      }
;;;294    
;;;295      return status;
;;;296    }
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L13.68|
000044  770b              STRB     r3,[r1,#0x1c]         ;259
000046  e009              B        |L13.92|
                  |L13.72|
000048  6817              LDR      r7,[r2,#0]            ;262
00004a  057f              LSLS     r7,r7,#21             ;262
00004c  d505              BPL      |L13.90|
00004e  6816              LDR      r6,[r2,#0]            ;265
000050  f4266680          BIC      r6,r6,#0x400          ;265
000054  6016              STR      r6,[r2,#0]            ;265
000056  770d              STRB     r5,[r1,#0x1c]         ;266
000058  e000              B        |L13.92|
                  |L13.90|
00005a  770e              STRB     r6,[r1,#0x1c]         ;270
                  |L13.92|
00005c  6956              LDR      r6,[r2,#0x14]         ;274
00005e  f0467640          ORR      r6,r6,#0x3000000      ;274
000062  6156              STR      r6,[r2,#0x14]         ;274
000064  6842              LDR      r2,[r0,#4]            ;276
000066  610a              STR      r2,[r1,#0x10]         ;276  ; pFlash
000068  6802              LDR      r2,[r0,#0]            ;278
00006a  2a01              CMP      r2,#1                 ;278
00006c  d00a              BEQ      |L13.132|
00006e  720b              STRB     r3,[r1,#8]            ;287
000070  68c2              LDR      r2,[r0,#0xc]          ;288
000072  618a              STR      r2,[r1,#0x18]         ;288  ; pFlash
000074  6882              LDR      r2,[r0,#8]            ;289
000076  614a              STR      r2,[r1,#0x14]         ;289  ; pFlash
000078  e9d01001          LDRD     r1,r0,[r0,#4]         ;292
00007c  f7fffffe          BL       FLASH_PageErase
                  |L13.128|
000080  4620              MOV      r0,r4                 ;295
000082  e7dd              B        |L13.64|
                  |L13.132|
000084  720d              STRB     r5,[r1,#8]            ;281
000086  6840              LDR      r0,[r0,#4]            ;282
000088  f7fffffe          BL       FLASH_MassErase
00008c  e7f8              B        |L13.128|
;;;297    
                          ENDP

00008e  0000              DCW      0x0000
                  |L13.144|
                          DCD      pFlash
                  |L13.148|
                          DCD      0x40022000

                          AREA ||i.HAL_FLASHEx_OBGetConfig||, CODE, READONLY, ALIGN=1

                  HAL_FLASHEx_OBGetConfig PROC
;;;375      */
;;;376    void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
000000  b510              PUSH     {r4,lr}
;;;377    {
000002  4604              MOV      r4,r0
;;;378      pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
000004  2006              MOVS     r0,#6
000006  6020              STR      r0,[r4,#0]
;;;379    
;;;380    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;381        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;382        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;383        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;384      if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
000008  6860              LDR      r0,[r4,#4]
00000a  2800              CMP      r0,#0
00000c  d005              BEQ      |L14.26|
00000e  2801              CMP      r0,#1
000010  d003              BEQ      |L14.26|
;;;385         (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
000012  2802              CMP      r0,#2
000014  d001              BEQ      |L14.26|
000016  2804              CMP      r0,#4
000018  d106              BNE      |L14.40|
                  |L14.26|
;;;386    #else
;;;387      if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
;;;388    #endif
;;;389      {
;;;390        pOBInit->OptionType |= OPTIONBYTE_WRP;
00001a  2107              MOVS     r1,#7
00001c  6021              STR      r1,[r4,#0]
;;;391        /* Get write protection on the selected area */
;;;392        FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
00001e  f104020c          ADD      r2,r4,#0xc
000022  1f11              SUBS     r1,r2,#4
000024  f7fffffe          BL       FLASH_OB_GetWRP
                  |L14.40|
;;;393      }
;;;394    
;;;395      /* Get Read protection level */
;;;396      pOBInit->RDPLevel = FLASH_OB_GetRDP();
000028  f7fffffe          BL       FLASH_OB_GetRDP
00002c  6120              STR      r0,[r4,#0x10]
;;;397    
;;;398      /* Get the user option bytes */
;;;399      pOBInit->USERConfig = FLASH_OB_GetUser();
00002e  f7fffffe          BL       FLASH_OB_GetUser
000032  61a0              STR      r0,[r4,#0x18]
;;;400    
;;;401    #if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
;;;402        defined (STM32L496xx) || defined (STM32L4A6xx) || \
;;;403        defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
;;;404        defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
;;;405      if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
000034  69e0              LDR      r0,[r4,#0x1c]
000036  2801              CMP      r0,#1
000038  d001              BEQ      |L14.62|
00003a  2802              CMP      r0,#2
00003c  d10b              BNE      |L14.86|
                  |L14.62|
;;;406    #else
;;;407      if(pOBInit->PCROPConfig == FLASH_BANK_1)
;;;408    #endif
;;;409      {
;;;410        pOBInit->OptionType |= OPTIONBYTE_PCROP;
00003e  6820              LDR      r0,[r4,#0]
000040  f0400008          ORR      r0,r0,#8
000044  6020              STR      r0,[r4,#0]
;;;411        /* Get the Proprietary code readout protection */
;;;412        FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
000046  f1040224          ADD      r2,r4,#0x24
00004a  1f11              SUBS     r1,r2,#4
00004c  e8bd4010          POP      {r4,lr}
000050  1f08              SUBS     r0,r1,#4
000052  f7ffbffe          B.W      FLASH_OB_GetPCROP
                  |L14.86|
;;;413      }
;;;414    }
000056  bd10              POP      {r4,pc}
;;;415    
                          ENDP


                          AREA ||i.HAL_FLASHEx_OBProgram||, CODE, READONLY, ALIGN=2

                  HAL_FLASHEx_OBProgram PROC
;;;304      */
;;;305    HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;306    {
000004  4604              MOV      r4,r0
;;;307      HAL_StatusTypeDef status = HAL_OK;
000006  2500              MOVS     r5,#0
;;;308    
;;;309      /* Process Locked */
;;;310      __HAL_LOCK(&pFlash);
000008  4e19              LDR      r6,|L15.112|
00000a  7830              LDRB     r0,[r6,#0]  ; pFlash
00000c  2801              CMP      r0,#1
00000e  d02d              BEQ      |L15.108|
000010  2001              MOVS     r0,#1
000012  7030              STRB     r0,[r6,#0]
;;;311    
;;;312      /* Check the parameters */
;;;313      assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
;;;314    
;;;315      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
000014  2700              MOVS     r7,#0
000016  6077              STR      r7,[r6,#4]  ; pFlash
;;;316    
;;;317      /* Write protection configuration */
;;;318      if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
000018  7820              LDRB     r0,[r4,#0]
00001a  07c0              LSLS     r0,r0,#31
00001c  d005              BEQ      |L15.42|
;;;319      {
;;;320        /* Configure of Write protection on the selected area */
;;;321        if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
00001e  1d20              ADDS     r0,r4,#4
000020  c807              LDM      r0,{r0-r2}
000022  f7fffffe          BL       FLASH_OB_WRPConfig
000026  b100              CBZ      r0,|L15.42|
;;;322        {
;;;323          status = HAL_ERROR;
000028  2501              MOVS     r5,#1
                  |L15.42|
;;;324        }
;;;325    
;;;326      }
;;;327    
;;;328      /* Read protection configuration */
;;;329      if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
00002a  7820              LDRB     r0,[r4,#0]
00002c  0780              LSLS     r0,r0,#30
00002e  d504              BPL      |L15.58|
;;;330      {
;;;331        /* Configure the Read protection level */
;;;332        if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
000030  6920              LDR      r0,[r4,#0x10]
000032  f7fffffe          BL       FLASH_OB_RDPConfig
000036  b100              CBZ      r0,|L15.58|
;;;333        {
;;;334          status = HAL_ERROR;
000038  2501              MOVS     r5,#1
                  |L15.58|
;;;335        }
;;;336      }
;;;337    
;;;338      /* User Configuration */
;;;339      if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
00003a  7820              LDRB     r0,[r4,#0]
00003c  0740              LSLS     r0,r0,#29
00003e  d505              BPL      |L15.76|
;;;340      {
;;;341        /* Configure the user option bytes */
;;;342        if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
000040  e9d40105          LDRD     r0,r1,[r4,#0x14]
000044  f7fffffe          BL       FLASH_OB_UserConfig
000048  b100              CBZ      r0,|L15.76|
;;;343        {
;;;344          status = HAL_ERROR;
00004a  2501              MOVS     r5,#1
                  |L15.76|
;;;345        }
;;;346      }
;;;347    
;;;348      /* PCROP Configuration */
;;;349      if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
00004c  7820              LDRB     r0,[r4,#0]
00004e  0700              LSLS     r0,r0,#28
000050  d508              BPL      |L15.100|
;;;350      {
;;;351        if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
000052  e9d41208          LDRD     r1,r2,[r4,#0x20]
000056  4291              CMP      r1,r2
000058  d004              BEQ      |L15.100|
;;;352        {
;;;353          /* Configure the Proprietary code readout protection */
;;;354          if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
00005a  69e0              LDR      r0,[r4,#0x1c]
00005c  f7fffffe          BL       FLASH_OB_PCROPConfig
000060  b100              CBZ      r0,|L15.100|
;;;355          {
;;;356            status = HAL_ERROR;
000062  2501              MOVS     r5,#1
                  |L15.100|
;;;357          }
;;;358        }
;;;359      }
;;;360    
;;;361      /* Process Unlocked */
;;;362      __HAL_UNLOCK(&pFlash);
000064  7037              STRB     r7,[r6,#0]
;;;363    
;;;364      return status;
000066  4628              MOV      r0,r5
                  |L15.104|
;;;365    }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L15.108|
00006c  2002              MOVS     r0,#2                 ;310
00006e  e7fb              B        |L15.104|
;;;366    
                          ENDP

                  |L15.112|
                          DCD      pFlash

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\STM32L4xx_HAL_Driver\\Src\\stm32l4xx_hal_flash_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____REVSH|
#line 507
|__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____RRX|
#line 694
|__asm___24_stm32l4xx_hal_flash_ex_c_6648b60e____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
