; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\smp_spi_dma.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\smp_spi_dma.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ..\..\..\Drivers\SMP\smp_spi_DMA.c]
                          THUMB

                          AREA ||i.DMA1_Channel2_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel2_IRQHandler PROC
;;;426      */
;;;427    void DMA1_Channel2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;428    {
;;;429      /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
;;;430    
;;;431      /* USER CODE END DMA1_Channel2_IRQn 0 */
;;;432      HAL_DMA_IRQHandler(&hdma_spi1_rx);
000002  4807              LDR      r0,|L1.32|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;433      /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
;;;434    	if(hdma_spi1_rx.State == HAL_SPI_STATE_READY){	
000008  4805              LDR      r0,|L1.32|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi1_rx
00000e  2801              CMP      r0,#1
000010  d105              BNE      |L1.30|
;;;435    		smp_spi_master_cs_set(&CS[SPI_module1],GPIO_ACTIVE_HIGH);			
000012  e8bd4010          POP      {r4,lr}
000016  2101              MOVS     r1,#1
000018  4802              LDR      r0,|L1.36|
00001a  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L1.30|
;;;436    	}
;;;437    
;;;438      /* USER CODE END DMA1_Channel2_IRQn 1 */
;;;439    }
00001e  bd10              POP      {r4,pc}
;;;440    
                          ENDP

                  |L1.32|
                          DCD      ||.bss||+0x174
                  |L1.36|
                          DCD      ||.bss||+0x2dc

                          AREA ||i.DMA1_Channel3_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel3_IRQHandler PROC
;;;443      */
;;;444    void DMA1_Channel3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;445    {
;;;446      /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
;;;447    
;;;448      /* USER CODE END DMA1_Channel3_IRQn 0 */
;;;449      HAL_DMA_IRQHandler(&hdma_spi1_tx);
000002  4810              LDR      r0,|L2.68|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;450      /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
;;;451    	if(hdma_spi1_tx.State == HAL_SPI_STATE_READY){
000008  480e              LDR      r0,|L2.68|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi1_tx
00000e  2801              CMP      r0,#1
000010  d117              BNE      |L2.66|
;;;452    		if(uSPIFlag[SPI_module1] == SPI_Transfer_only){
000012  480d              LDR      r0,|L2.72|
000014  7800              LDRB     r0,[r0,#0]  ; uSPIFlag
000016  2801              CMP      r0,#1
000018  d00c              BEQ      |L2.52|
;;;453    			smp_spi_master_cs_set(&CS[SPI_module1],GPIO_ACTIVE_HIGH);
;;;454    		}else if(uSPIFlag[SPI_module1] == SPI_Both){
00001a  2800              CMP      r0,#0
00001c  d111              BNE      |L2.66|
;;;455    		
;;;456    			HAL_SPI_Receive_DMA(&smp_spi1_handle, (uint8_t *)g_rx_data[SPI_module1], g_rx_size[SPI_module1]);
00001e  480a              LDR      r0,|L2.72|
000020  3010              ADDS     r0,r0,#0x10
000022  8802              LDRH     r2,[r0,#0]  ; g_rx_size
000024  4809              LDR      r0,|L2.76|
000026  6801              LDR      r1,[r0,#0]  ; g_rx_data
000028  e8bd4010          POP      {r4,lr}
00002c  f5a07040          SUB      r0,r0,#0x300
000030  f7ffbffe          B.W      HAL_SPI_Receive_DMA
                  |L2.52|
000034  4805              LDR      r0,|L2.76|
000036  2101              MOVS     r1,#1                 ;453
000038  e8bd4010          POP      {r4,lr}               ;453
00003c  3824              SUBS     r0,r0,#0x24           ;453
00003e  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L2.66|
;;;457    		}
;;;458    		
;;;459    	}
;;;460    	 
;;;461      /* USER CODE END DMA1_Channel3_IRQn 1 */
;;;462    }
000042  bd10              POP      {r4,pc}
;;;463    
                          ENDP

                  |L2.68|
                          DCD      ||.bss||+0x12c
                  |L2.72|
                          DCD      ||.data||
                  |L2.76|
                          DCD      ||.bss||+0x300

                          AREA ||i.DMA1_Channel4_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel4_IRQHandler PROC
;;;466      */
;;;467    void DMA1_Channel4_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;468    {
;;;469      /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
;;;470    
;;;471      /* USER CODE END DMA1_Channel4_IRQn 0 */
;;;472      HAL_DMA_IRQHandler(&hdma_spi2_rx);
000002  4808              LDR      r0,|L3.36|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;473      /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
;;;474    	if(hdma_spi2_rx.State == HAL_SPI_STATE_READY){	
000008  4806              LDR      r0,|L3.36|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi2_rx
00000e  2801              CMP      r0,#1
000010  d106              BNE      |L3.32|
;;;475    			smp_spi_master_cs_set(&CS[SPI_module2],GPIO_ACTIVE_HIGH);		
000012  4804              LDR      r0,|L3.36|
000014  2101              MOVS     r1,#1
000016  e8bd4010          POP      {r4,lr}
00001a  30e4              ADDS     r0,r0,#0xe4
00001c  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L3.32|
;;;476    		}
;;;477      /* USER CODE END DMA1_Channel4_IRQn 1 */
;;;478    }
000020  bd10              POP      {r4,pc}
;;;479    
                          ENDP

000022  0000              DCW      0x0000
                  |L3.36|
                          DCD      ||.bss||+0x204

                          AREA ||i.DMA1_Channel5_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA1_Channel5_IRQHandler PROC
;;;482      */
;;;483    void DMA1_Channel5_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;484    {
;;;485      /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
;;;486    
;;;487      /* USER CODE END DMA1_Channel5_IRQn 0 */
;;;488      HAL_DMA_IRQHandler(&hdma_spi2_tx);
000002  4810              LDR      r0,|L4.68|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;489      /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
;;;490    	if(hdma_spi2_tx.State == HAL_SPI_STATE_READY){
000008  480e              LDR      r0,|L4.68|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi2_tx
00000e  2801              CMP      r0,#1
000010  d117              BNE      |L4.66|
;;;491    		if(uSPIFlag[SPI_module2] == SPI_Transfer_only){
000012  480d              LDR      r0,|L4.72|
000014  7840              LDRB     r0,[r0,#1]  ; uSPIFlag
000016  2801              CMP      r0,#1
000018  d00c              BEQ      |L4.52|
;;;492    			smp_spi_master_cs_set(&CS[SPI_module2],GPIO_ACTIVE_HIGH);
;;;493    		}else if(uSPIFlag[SPI_module2] == SPI_Both){
00001a  2800              CMP      r0,#0
00001c  d111              BNE      |L4.66|
;;;494    			HAL_SPI_Receive_DMA(&smp_spi2_handle, (uint8_t *)g_rx_data[SPI_module2], g_rx_size[SPI_module2]);
00001e  480a              LDR      r0,|L4.72|
000020  3010              ADDS     r0,r0,#0x10
000022  8842              LDRH     r2,[r0,#2]  ; g_rx_size
000024  4809              LDR      r0,|L4.76|
000026  6841              LDR      r1,[r0,#4]  ; g_rx_data
000028  e8bd4010          POP      {r4,lr}
00002c  f5a07027          SUB      r0,r0,#0x29c
000030  f7ffbffe          B.W      HAL_SPI_Receive_DMA
                  |L4.52|
000034  4805              LDR      r0,|L4.76|
000036  2101              MOVS     r1,#1                 ;492
000038  e8bd4010          POP      {r4,lr}               ;492
00003c  3818              SUBS     r0,r0,#0x18           ;492
00003e  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L4.66|
;;;495    		}
;;;496    		
;;;497    	}
;;;498      /* USER CODE END DMA1_Channel5_IRQn 1 */
;;;499    }
000042  bd10              POP      {r4,pc}
;;;500    
                          ENDP

                  |L4.68|
                          DCD      ||.bss||+0x1bc
                  |L4.72|
                          DCD      ||.data||
                  |L4.76|
                          DCD      ||.bss||+0x300

                          AREA ||i.DMA2_Channel1_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Channel1_IRQHandler PROC
;;;503      */
;;;504    void DMA2_Channel1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;505    {
;;;506      /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */
;;;507    
;;;508      /* USER CODE END DMA2_Channel1_IRQn 0 */
;;;509      HAL_DMA_IRQHandler(&hdma_spi3_rx);
000002  4808              LDR      r0,|L5.36|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;510      /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */
;;;511    	if(hdma_spi3_rx.State == HAL_SPI_STATE_READY){	
000008  4806              LDR      r0,|L5.36|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi3_rx
00000e  2801              CMP      r0,#1
000010  d106              BNE      |L5.32|
;;;512    			smp_spi_master_cs_set(&CS[SPI_module3],GPIO_ACTIVE_HIGH);		
000012  4804              LDR      r0,|L5.36|
000014  2101              MOVS     r1,#1
000016  e8bd4010          POP      {r4,lr}
00001a  3060              ADDS     r0,r0,#0x60
00001c  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L5.32|
;;;513    		}
;;;514      /* USER CODE END DMA2_Channel1_IRQn 1 */
;;;515    }
000020  bd10              POP      {r4,pc}
;;;516    
                          ENDP

000022  0000              DCW      0x0000
                  |L5.36|
                          DCD      ||.bss||+0x294

                          AREA ||i.DMA2_Channel2_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Channel2_IRQHandler PROC
;;;519      */
;;;520    void DMA2_Channel2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;521    {
;;;522      /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */
;;;523    
;;;524      /* USER CODE END DMA2_Channel2_IRQn 0 */
;;;525      HAL_DMA_IRQHandler(&hdma_spi3_tx);
000002  4811              LDR      r0,|L6.72|
000004  f7fffffe          BL       HAL_DMA_IRQHandler
;;;526      /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */
;;;527    	if(hdma_spi3_tx.State == HAL_SPI_STATE_READY){
000008  480f              LDR      r0,|L6.72|
00000a  f8900025          LDRB     r0,[r0,#0x25]  ; hdma_spi3_tx
00000e  2801              CMP      r0,#1
000010  d118              BNE      |L6.68|
;;;528    		if(uSPIFlag[SPI_module3] == SPI_Transfer_only){
000012  480e              LDR      r0,|L6.76|
000014  7880              LDRB     r0,[r0,#2]  ; uSPIFlag
000016  2801              CMP      r0,#1
000018  d00d              BEQ      |L6.54|
;;;529    			smp_spi_master_cs_set(&CS[SPI_module3],GPIO_ACTIVE_HIGH);
;;;530    		}else if(uSPIFlag[SPI_module3] == SPI_Both){
00001a  2800              CMP      r0,#0
00001c  d112              BNE      |L6.68|
;;;531    			HAL_SPI_Receive_DMA(&smp_spi3_handle, (uint8_t *)g_rx_data[SPI_module3], g_rx_size[SPI_module3]);
00001e  480b              LDR      r0,|L6.76|
000020  3010              ADDS     r0,r0,#0x10
000022  8882              LDRH     r2,[r0,#4]  ; g_rx_size
000024  4808              LDR      r0,|L6.72|
000026  30b4              ADDS     r0,r0,#0xb4
000028  6881              LDR      r1,[r0,#8]  ; g_rx_data
00002a  e8bd4010          POP      {r4,lr}
00002e  f5a0700e          SUB      r0,r0,#0x238
000032  f7ffbffe          B.W      HAL_SPI_Receive_DMA
                  |L6.54|
000036  4804              LDR      r0,|L6.72|
000038  2101              MOVS     r1,#1                 ;529
00003a  e8bd4010          POP      {r4,lr}               ;529
00003e  30a8              ADDS     r0,r0,#0xa8           ;529
000040  f7ffbffe          B.W      smp_spi_master_cs_set
                  |L6.68|
;;;532    		}
;;;533    			
;;;534    		}
;;;535      /* USER CODE END DMA2_Channel2_IRQn 1 */
;;;536    }
000044  bd10              POP      {r4,pc}
;;;537    /**
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      ||.bss||+0x24c
                  |L6.76|
                          DCD      ||.data||

                          AREA ||i.HAL_SPI_ErrorCallback||, CODE, READONLY, ALIGN=2

                  HAL_SPI_ErrorCallback PROC
;;;410    }
;;;411    void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *h_spi)
000000  6800              LDR      r0,[r0,#0]
;;;412    {
;;;413      if(h_spi->Instance == BSP_SPI1){
000002  4a0a              LDR      r2,|L7.44|
;;;414    		spi1_evt_cb(SMP_SPI_EVENT_TRANSFERR_ERROR);
000004  490a              LDR      r1,|L7.48|
000006  4290              CMP      r0,r2                 ;413
000008  d102              BNE      |L7.16|
00000a  6849              LDR      r1,[r1,#4]  ; spi1_evt_cb
00000c  2002              MOVS     r0,#2
00000e  4708              BX       r1
                  |L7.16|
;;;415    		
;;;416    	}else if(h_spi->Instance == BSP_SPI2){
000010  4a08              LDR      r2,|L7.52|
000012  4290              CMP      r0,r2
000014  d102              BNE      |L7.28|
;;;417    		spi2_evt_cb(SMP_SPI_EVENT_TRANSFERR_ERROR);
000016  6889              LDR      r1,[r1,#8]  ; spi2_evt_cb
000018  2002              MOVS     r0,#2
00001a  4708              BX       r1
                  |L7.28|
;;;418    		
;;;419    	}else if(h_spi->Instance == BSP_SPI3){
00001c  4a06              LDR      r2,|L7.56|
00001e  4290              CMP      r0,r2
000020  d102              BNE      |L7.40|
;;;420    		spi3_evt_cb(SMP_SPI_EVENT_TRANSFERR_ERROR);
000022  68c9              LDR      r1,[r1,#0xc]  ; spi3_evt_cb
000024  2002              MOVS     r0,#2
000026  4708              BX       r1
                  |L7.40|
;;;421    	}
;;;422    }
000028  4770              BX       lr
;;;423    
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      0x40013000
                  |L7.48|
                          DCD      ||.data||
                  |L7.52|
                          DCD      0x40003800
                  |L7.56|
                          DCD      0x40003c00

                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspInit PROC
;;;539      */
;;;540    void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;541    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;542      GPIO_InitTypeDef GPIO_InitStruct = {0};
000008  2114              MOVS     r1,#0x14
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       __aeabi_memclr4
;;;543      if(hspi->Instance==SPI1)
000010  49fe              LDR      r1,|L8.1036|
000012  6820              LDR      r0,[r4,#0]
;;;544      {
;;;545        /* USER CODE BEGIN SPI1_MspInit 0 */
;;;546    	  BSP_SPI1_DMAx_CLK_ENABLE();
000014  f8dfa3f8          LDR      r10,|L8.1040|
;;;547    	  /* DMA1_Channel2_IRQn interrupt configuration */
;;;548    	  HAL_NVIC_SetPriority(BSP_SPI1_DMA_RX_IRQn, 0, 0);
;;;549    	  HAL_NVIC_EnableIRQ(BSP_SPI1_DMA_RX_IRQn);
;;;550    	  /* DMA1_Channel3_IRQn interrupt configuration */
;;;551    	  HAL_NVIC_SetPriority(BSP_SPI1_DMA_TX_IRQn, 0, 0);
;;;552    	  HAL_NVIC_EnableIRQ(BSP_SPI1_DMA_TX_IRQn);
;;;553        /* USER CODE END SPI1_MspInit 0 */
;;;554        /* Peripheral clock enable */
;;;555        BSP_SPI1_CLK_ENABLE();
;;;556    
;;;557        BSP_SPI1_SCK_GPIO_CLK_ENABLE();
;;;558    	  BSP_SPI1_MISO_GPIO_CLK_ENABLE();
;;;559    	  BSP_SPI1_MOSI_GPIO_CLK_ENABLE();
;;;560        /**SPI1 GPIO Configuration
;;;561        PA5     ------> SPI1_SCK
;;;562        PA6     ------> SPI1_MISO
;;;563        PA7     ------> SPI1_MOSI
;;;564        */
;;;565        GPIO_InitStruct.Pin = BSP_SPI1_SCK_PIN;
;;;566        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;567        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;568        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;569        GPIO_InitStruct.Alternate = BSP_SPI1_SCK_AF;
;;;570        HAL_GPIO_Init(BSP_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
;;;571    		
;;;572    		GPIO_InitStruct.Pin = BSP_SPI1_MISO_PIN;
;;;573        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;574        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;575        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;576        GPIO_InitStruct.Alternate = BSP_SPI1_MISO_AF;
;;;577        HAL_GPIO_Init(BSP_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
;;;578    		
;;;579    		GPIO_InitStruct.Pin = BSP_SPI1_MOSI_PIN;
;;;580        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;581        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;582        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;583        GPIO_InitStruct.Alternate = BSP_SPI1_MOSI_AF;
;;;584        HAL_GPIO_Init(BSP_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
;;;585    
;;;586        /* SPI1 DMA Init */
;;;587        /* SPI1_TX Init */
;;;588        hdma_spi1_tx.Instance = BSP_SPI1_TX_DMA_CHANNEL;
;;;589        hdma_spi1_tx.Init.Request = BSP_SPI1_TX_DMA_REQUEST;
000018  2500              MOVS     r5,#0
00001a  2603              MOVS     r6,#3                 ;568
00001c  2780              MOVS     r7,#0x80              ;579
00001e  f04f0802          MOV      r8,#2                 ;566
;;;590        hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
000022  f04f0910          MOV      r9,#0x10
000026  f04f0b01          MOV      r11,#1                ;589
00002a  4288              CMP      r0,r1                 ;543
00002c  d17d              BNE      |L8.298|
00002e  f8da0048          LDR      r0,[r10,#0x48]        ;546
000032  f0400001          ORR      r0,r0,#1              ;546
000036  f8ca0048          STR      r0,[r10,#0x48]        ;546
00003a  f8da0048          LDR      r0,[r10,#0x48]        ;546
00003e  f0000001          AND      r0,r0,#1              ;546
000042  9001              STR      r0,[sp,#4]            ;546
000044  2200              MOVS     r2,#0                 ;548
000046  4611              MOV      r1,r2                 ;548
000048  200c              MOVS     r0,#0xc               ;548
00004a  f7fffffe          BL       HAL_NVIC_SetPriority
00004e  200c              MOVS     r0,#0xc               ;549
000050  f7fffffe          BL       HAL_NVIC_EnableIRQ
000054  2200              MOVS     r2,#0                 ;551
000056  4611              MOV      r1,r2                 ;551
000058  200d              MOVS     r0,#0xd               ;551
00005a  f7fffffe          BL       HAL_NVIC_SetPriority
00005e  200d              MOVS     r0,#0xd               ;552
000060  f7fffffe          BL       HAL_NVIC_EnableIRQ
000064  f8da0060          LDR      r0,[r10,#0x60]        ;555
000068  f4405080          ORR      r0,r0,#0x1000         ;555
00006c  f8ca0060          STR      r0,[r10,#0x60]        ;555
000070  f8da0060          LDR      r0,[r10,#0x60]        ;555
000074  f4005080          AND      r0,r0,#0x1000         ;555
000078  9001              STR      r0,[sp,#4]            ;555
00007a  f8da004c          LDR      r0,[r10,#0x4c]        ;557
00007e  f0400001          ORR      r0,r0,#1              ;557
000082  f8ca004c          STR      r0,[r10,#0x4c]        ;557
000086  f8da004c          LDR      r0,[r10,#0x4c]        ;557
00008a  f0000001          AND      r0,r0,#1              ;557
00008e  9001              STR      r0,[sp,#4]            ;557
000090  f8da004c          LDR      r0,[r10,#0x4c]        ;558
000094  f0400001          ORR      r0,r0,#1              ;558
000098  f8ca004c          STR      r0,[r10,#0x4c]        ;558
00009c  f8da004c          LDR      r0,[r10,#0x4c]        ;558
0000a0  f0000001          AND      r0,r0,#1              ;558
0000a4  9001              STR      r0,[sp,#4]            ;558
0000a6  f8da004c          LDR      r0,[r10,#0x4c]        ;559
0000aa  f0400001          ORR      r0,r0,#1              ;559
0000ae  f8ca004c          STR      r0,[r10,#0x4c]        ;559
0000b2  f8da004c          LDR      r0,[r10,#0x4c]        ;559
0000b6  f0000001          AND      r0,r0,#1              ;559
0000ba  9001              STR      r0,[sp,#4]            ;559
0000bc  2020              MOVS     r0,#0x20              ;565
0000be  9002              STR      r0,[sp,#8]            ;565
0000c0  f8cd800c          STR      r8,[sp,#0xc]          ;566
0000c4  9504              STR      r5,[sp,#0x10]         ;567
0000c6  9605              STR      r6,[sp,#0x14]         ;568
0000c8  f04f0a05          MOV      r10,#5                ;569
0000cc  f8cda018          STR      r10,[sp,#0x18]        ;569
0000d0  a902              ADD      r1,sp,#8              ;570
0000d2  f04f4090          MOV      r0,#0x48000000        ;570
0000d6  f7fffffe          BL       HAL_GPIO_Init
0000da  2040              MOVS     r0,#0x40              ;572
0000dc  9002              STR      r0,[sp,#8]            ;572
0000de  f8cd800c          STR      r8,[sp,#0xc]          ;573
0000e2  9504              STR      r5,[sp,#0x10]         ;574
0000e4  9605              STR      r6,[sp,#0x14]         ;575
0000e6  f8cda018          STR      r10,[sp,#0x18]        ;576
0000ea  a902              ADD      r1,sp,#8              ;577
0000ec  f04f4090          MOV      r0,#0x48000000        ;577
0000f0  f7fffffe          BL       HAL_GPIO_Init
0000f4  9702              STR      r7,[sp,#8]            ;579
0000f6  f8cd800c          STR      r8,[sp,#0xc]          ;580
0000fa  9504              STR      r5,[sp,#0x10]         ;581
0000fc  9605              STR      r6,[sp,#0x14]         ;582
0000fe  f8cda018          STR      r10,[sp,#0x18]        ;583
000102  a902              ADD      r1,sp,#8              ;584
000104  f04f4090          MOV      r0,#0x48000000        ;584
000108  f7fffffe          BL       HAL_GPIO_Init
00010c  4ec2              LDR      r6,|L8.1048|
00010e  48c1              LDR      r0,|L8.1044|
000110  6030              STR      r0,[r6,#0]            ;588  ; hdma_spi1_tx
000112  f8c6b004          STR      r11,[r6,#4]           ;589  ; hdma_spi1_tx
000116  f8c69008          STR      r9,[r6,#8]  ; hdma_spi1_tx
;;;591        hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
00011a  60f5              STR      r5,[r6,#0xc]  ; hdma_spi1_tx
;;;592        hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
00011c  6137              STR      r7,[r6,#0x10]  ; hdma_spi1_tx
;;;593        hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
00011e  6175              STR      r5,[r6,#0x14]  ; hdma_spi1_tx
;;;594        hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
000120  61b5              STR      r5,[r6,#0x18]  ; hdma_spi1_tx
;;;595        hdma_spi1_tx.Init.Mode = DMA_NORMAL;
000122  61f5              STR      r5,[r6,#0x1c]  ; hdma_spi1_tx
;;;596        hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
000124  6235              STR      r5,[r6,#0x20]  ; hdma_spi1_tx
;;;597        if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
000126  4630              MOV      r0,r6
000128  e000              B        |L8.300|
                  |L8.298|
00012a  e01f              B        |L8.364|
                  |L8.300|
00012c  f7fffffe          BL       HAL_DMA_Init
000130  b108              CBZ      r0,|L8.310|
;;;598        {
;;;599          Error_Handler();
000132  f7fffffe          BL       Error_Handler
                  |L8.310|
;;;600        }
;;;601    
;;;602        __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
000136  6566              STR      r6,[r4,#0x54]
000138  62b4              STR      r4,[r6,#0x28]  ; hdma_spi1_tx
;;;603    
;;;604        /* SPI1_RX Init */
;;;605        hdma_spi1_rx.Instance = BSP_SPI1_RX_DMA_CHANNEL;
00013a  48b6              LDR      r0,|L8.1044|
00013c  4eb6              LDR      r6,|L8.1048|
00013e  3814              SUBS     r0,r0,#0x14
000140  3648              ADDS     r6,r6,#0x48
000142  6030              STR      r0,[r6,#0]  ; hdma_spi1_rx
;;;606        hdma_spi1_rx.Init.Request = BSP_SPI1_RX_DMA_REQUEST;
000144  f8c6b004          STR      r11,[r6,#4]  ; hdma_spi1_rx
;;;607        hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
000148  60b5              STR      r5,[r6,#8]  ; hdma_spi1_rx
;;;608        hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
00014a  60f5              STR      r5,[r6,#0xc]  ; hdma_spi1_rx
;;;609        hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
00014c  6137              STR      r7,[r6,#0x10]  ; hdma_spi1_rx
;;;610        hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
00014e  6175              STR      r5,[r6,#0x14]  ; hdma_spi1_rx
;;;611        hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
000150  61b5              STR      r5,[r6,#0x18]  ; hdma_spi1_rx
;;;612        hdma_spi1_rx.Init.Mode = DMA_NORMAL;
000152  61f5              STR      r5,[r6,#0x1c]  ; hdma_spi1_rx
;;;613        hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
000154  6235              STR      r5,[r6,#0x20]  ; hdma_spi1_rx
;;;614        if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
000156  4630              MOV      r0,r6
000158  f7fffffe          BL       HAL_DMA_Init
00015c  b108              CBZ      r0,|L8.354|
;;;615        {
;;;616          Error_Handler();
00015e  f7fffffe          BL       Error_Handler
                  |L8.354|
;;;617        }
;;;618    
;;;619        __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
000162  65a6              STR      r6,[r4,#0x58]
000164  62b4              STR      r4,[r6,#0x28]  ; hdma_spi1_rx
                  |L8.358|
;;;620    
;;;621      /* USER CODE BEGIN SPI1_MspInit 1 */
;;;622    
;;;623      /* USER CODE END SPI1_MspInit 1 */
;;;624      }
;;;625      else if(hspi->Instance==SPI2)
;;;626      {
;;;627        /* USER CODE BEGIN SPI2_MspInit 0 */
;;;628    	  BSP_SPI2_DMAx_CLK_ENABLE();
;;;629    	  /* DMA1_Channel4_IRQn interrupt configuration */
;;;630    	  HAL_NVIC_SetPriority(BSP_SPI2_DMA_RX_IRQn, 0, 0);
;;;631    	  HAL_NVIC_EnableIRQ(BSP_SPI2_DMA_RX_IRQn);
;;;632    	  /* DMA1_Channel5_IRQn interrupt configuration */
;;;633    	  HAL_NVIC_SetPriority(BSP_SPI2_DMA_TX_IRQn, 0, 0);
;;;634    	  HAL_NVIC_EnableIRQ(BSP_SPI2_DMA_TX_IRQn);
;;;635        /* USER CODE END SPI2_MspInit 0 */
;;;636        /* Peripheral clock enable */
;;;637        BSP_SPI2_CLK_ENABLE();
;;;638    	  BSP_SPI2_SCK_GPIO_CLK_ENABLE();
;;;639    	  BSP_SPI2_MISO_GPIO_CLK_ENABLE();
;;;640    	  BSP_SPI2_MOSI_GPIO_CLK_ENABLE();
;;;641        /**SPI2 GPIO Configuration
;;;642        PC1     ------> SPI2_MOSI
;;;643        PC2     ------> SPI2_MISO
;;;644        PB10     ------> SPI2_SCK
;;;645        */
;;;646        GPIO_InitStruct.Pin = BSP_SPI2_SCK_PIN;
;;;647        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;648        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;649        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;650        GPIO_InitStruct.Alternate = BSP_SPI2_SCK_AF;
;;;651        HAL_GPIO_Init(BSP_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
;;;652    
;;;653        GPIO_InitStruct.Pin = BSP_SPI2_MISO_PIN;
;;;654        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;655        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;656        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;657        GPIO_InitStruct.Alternate = BSP_SPI2_MISO_AF;
;;;658        HAL_GPIO_Init(BSP_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
;;;659    
;;;660        GPIO_InitStruct.Pin = BSP_SPI2_MOSI_PIN;
;;;661        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;662        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;663        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;664        GPIO_InitStruct.Alternate = BSP_SPI2_MOSI_AF;
;;;665        HAL_GPIO_Init(BSP_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
;;;666    
;;;667        /* SPI2 DMA Init */
;;;668        /* SPI2_TX Init */
;;;669        hdma_spi2_tx.Instance = BSP_SPI2_TX_DMA_CHANNEL;
;;;670        hdma_spi2_tx.Init.Request = BSP_SPI2_TX_DMA_REQUEST;
;;;671        hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
;;;672        hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
;;;673        hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
;;;674        hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
;;;675        hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
;;;676        hdma_spi2_tx.Init.Mode = DMA_NORMAL;
;;;677        hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
;;;678        if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
;;;679        {
;;;680          Error_Handler();
;;;681        }
;;;682    
;;;683        __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
;;;684    
;;;685        /* SPI2_RX Init */
;;;686        hdma_spi2_rx.Instance = BSP_SPI2_RX_DMA_CHANNEL;
;;;687        hdma_spi2_rx.Init.Request = BSP_SPI2_RX_DMA_REQUEST;
;;;688        hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
;;;689        hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
;;;690        hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
;;;691        hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
;;;692        hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
;;;693        hdma_spi2_rx.Init.Mode = DMA_NORMAL;
;;;694        hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
;;;695        if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
;;;696        {
;;;697          Error_Handler();
;;;698        }
;;;699    
;;;700        __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
;;;701    
;;;702      /* USER CODE BEGIN SPI2_MspInit 1 */
;;;703    
;;;704      /* USER CODE END SPI2_MspInit 1 */
;;;705      }
;;;706      else if(hspi->Instance==SPI3)
;;;707      {
;;;708    	  /* USER CODE BEGIN SPI3_MspInit 0 */
;;;709    	  BSP_SPI3_DMAx_CLK_ENABLE();
;;;710    	  /* DMA2_Channel1_IRQn interrupt configuration */
;;;711    	  HAL_NVIC_SetPriority(BSP_SPI3_DMA_RX_IRQn, 0, 0);
;;;712    	  HAL_NVIC_EnableIRQ(BSP_SPI3_DMA_RX_IRQn);
;;;713    	  /* DMA2_Channel2_IRQn interrupt configuration */
;;;714    	  HAL_NVIC_SetPriority(BSP_SPI3_DMA_TX_IRQn, 0, 0);
;;;715    	  HAL_NVIC_EnableIRQ(BSP_SPI3_DMA_TX_IRQn);
;;;716    	  /* USER CODE END SPI3_MspInit 0 */
;;;717        /* Peripheral clock enable */
;;;718        BSP_SPI3_CLK_ENABLE();
;;;719    
;;;720    	  BSP_SPI3_SCK_GPIO_CLK_ENABLE();
;;;721    	  BSP_SPI3_MISO_GPIO_CLK_ENABLE();
;;;722    	  BSP_SPI3_MOSI_GPIO_CLK_ENABLE();
;;;723        /**SPI3 GPIO Configuration
;;;724        PC10     ------> SPI3_SCK
;;;725        PC11     ------> SPI3_MISO
;;;726        PC12     ------> SPI3_MOSI
;;;727        */
;;;728        GPIO_InitStruct.Pin = BSP_SPI3_SCK_PIN;
;;;729        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;730        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;731        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;732        GPIO_InitStruct.Alternate = BSP_SPI3_SCK_AF;
;;;733        HAL_GPIO_Init(BSP_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
;;;734    		
;;;735    		GPIO_InitStruct.Pin = BSP_SPI3_MISO_PIN;
;;;736        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;737        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;738        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;739        GPIO_InitStruct.Alternate = BSP_SPI3_MISO_AF;
;;;740        HAL_GPIO_Init(BSP_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
;;;741    		
;;;742    		GPIO_InitStruct.Pin = BSP_SPI3_MOSI_PIN;
;;;743        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
;;;744        GPIO_InitStruct.Pull = GPIO_NOPULL;
;;;745        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;746        GPIO_InitStruct.Alternate = BSP_SPI3_MOSI_AF;
;;;747        HAL_GPIO_Init(BSP_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
;;;748    
;;;749        /* SPI3 DMA Init */
;;;750        /* SPI3_TX Init */
;;;751        hdma_spi3_tx.Instance = BSP_SPI3_TX_DMA_CHANNEL;
;;;752        hdma_spi3_tx.Init.Request = BSP_SPI3_TX_DMA_REQUEST;
;;;753        hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
;;;754        hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
;;;755        hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
;;;756        hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
;;;757        hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
;;;758        hdma_spi3_tx.Init.Mode = DMA_NORMAL;
;;;759        hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
;;;760        if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
;;;761        {
;;;762          Error_Handler();
;;;763        }
;;;764    
;;;765        __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
;;;766    
;;;767        /* SPI3_RX Init */
;;;768        hdma_spi3_rx.Instance = BSP_SPI3_RX_DMA_CHANNEL;
;;;769        hdma_spi3_rx.Init.Request = BSP_SPI3_RX_DMA_REQUEST;
;;;770        hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
;;;771        hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
;;;772        hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
;;;773        hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
;;;774        hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
;;;775        hdma_spi3_rx.Init.Mode = DMA_NORMAL;
;;;776        hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
;;;777        if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
;;;778        {
;;;779          Error_Handler();
;;;780        }
;;;781    
;;;782        __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
;;;783    
;;;784      /* USER CODE BEGIN SPI3_MspInit 1 */
;;;785    
;;;786      /* USER CODE END SPI3_MspInit 1 */
;;;787      }
;;;788    
;;;789    }
000166  b007              ADD      sp,sp,#0x1c
000168  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.364|
00016c  49ab              LDR      r1,|L8.1052|
00016e  4288              CMP      r0,r1                 ;625
000170  d17e              BNE      |L8.624|
000172  f8da0048          LDR      r0,[r10,#0x48]        ;628
000176  f0400001          ORR      r0,r0,#1              ;628
00017a  f8ca0048          STR      r0,[r10,#0x48]        ;628
00017e  f8da0048          LDR      r0,[r10,#0x48]        ;628
000182  f0000001          AND      r0,r0,#1              ;628
000186  9001              STR      r0,[sp,#4]            ;628
000188  2200              MOVS     r2,#0                 ;630
00018a  4611              MOV      r1,r2                 ;630
00018c  200e              MOVS     r0,#0xe               ;630
00018e  f7fffffe          BL       HAL_NVIC_SetPriority
000192  200e              MOVS     r0,#0xe               ;631
000194  f7fffffe          BL       HAL_NVIC_EnableIRQ
000198  2200              MOVS     r2,#0                 ;633
00019a  4611              MOV      r1,r2                 ;633
00019c  200f              MOVS     r0,#0xf               ;633
00019e  f7fffffe          BL       HAL_NVIC_SetPriority
0001a2  200f              MOVS     r0,#0xf               ;634
0001a4  f7fffffe          BL       HAL_NVIC_EnableIRQ
0001a8  f8da0058          LDR      r0,[r10,#0x58]        ;637
0001ac  f4404080          ORR      r0,r0,#0x4000         ;637
0001b0  f8ca0058          STR      r0,[r10,#0x58]        ;637
0001b4  f8da0058          LDR      r0,[r10,#0x58]        ;637
0001b8  f4004080          AND      r0,r0,#0x4000         ;637
0001bc  9001              STR      r0,[sp,#4]            ;637
0001be  f8da004c          LDR      r0,[r10,#0x4c]        ;638
0001c2  f0400002          ORR      r0,r0,#2              ;638
0001c6  f8ca004c          STR      r0,[r10,#0x4c]        ;638
0001ca  f8da004c          LDR      r0,[r10,#0x4c]        ;638
0001ce  f0000002          AND      r0,r0,#2              ;638
0001d2  9001              STR      r0,[sp,#4]            ;638
0001d4  f8da004c          LDR      r0,[r10,#0x4c]        ;639
0001d8  f0400002          ORR      r0,r0,#2              ;639
0001dc  f8ca004c          STR      r0,[r10,#0x4c]        ;639
0001e0  f8da004c          LDR      r0,[r10,#0x4c]        ;639
0001e4  f0000002          AND      r0,r0,#2              ;639
0001e8  9001              STR      r0,[sp,#4]            ;639
0001ea  f8da004c          LDR      r0,[r10,#0x4c]        ;640
0001ee  f0400002          ORR      r0,r0,#2              ;640
0001f2  f8ca004c          STR      r0,[r10,#0x4c]        ;640
0001f6  f8da004c          LDR      r0,[r10,#0x4c]        ;640
0001fa  f0000002          AND      r0,r0,#2              ;640
0001fe  9001              STR      r0,[sp,#4]            ;640
000200  f44f5000          MOV      r0,#0x2000            ;646
000204  9002              STR      r0,[sp,#8]            ;646
000206  f8cd800c          STR      r8,[sp,#0xc]          ;647
00020a  9504              STR      r5,[sp,#0x10]         ;648
00020c  9605              STR      r6,[sp,#0x14]         ;649
00020e  f04f0a05          MOV      r10,#5                ;650
000212  f8cda018          STR      r10,[sp,#0x18]        ;650
000216  a902              ADD      r1,sp,#8              ;651
000218  4881              LDR      r0,|L8.1056|
00021a  f7fffffe          BL       HAL_GPIO_Init
00021e  f44f4080          MOV      r0,#0x4000            ;653
000222  9002              STR      r0,[sp,#8]            ;653
000224  f8cd800c          STR      r8,[sp,#0xc]          ;654
000228  9504              STR      r5,[sp,#0x10]         ;655
00022a  9605              STR      r6,[sp,#0x14]         ;656
00022c  f8cda018          STR      r10,[sp,#0x18]        ;657
000230  a902              ADD      r1,sp,#8              ;658
000232  487b              LDR      r0,|L8.1056|
000234  f7fffffe          BL       HAL_GPIO_Init
000238  f44f4000          MOV      r0,#0x8000            ;660
00023c  9002              STR      r0,[sp,#8]            ;660
00023e  f8cd800c          STR      r8,[sp,#0xc]          ;661
000242  9504              STR      r5,[sp,#0x10]         ;662
000244  9605              STR      r6,[sp,#0x14]         ;663
000246  f8cda018          STR      r10,[sp,#0x18]        ;664
00024a  a902              ADD      r1,sp,#8              ;665
00024c  4874              LDR      r0,|L8.1056|
00024e  f7fffffe          BL       HAL_GPIO_Init
000252  4870              LDR      r0,|L8.1044|
000254  4e70              LDR      r6,|L8.1048|
000256  3028              ADDS     r0,r0,#0x28           ;669
000258  3690              ADDS     r6,r6,#0x90           ;669
00025a  6030              STR      r0,[r6,#0]            ;669  ; hdma_spi2_tx
00025c  f8c6b004          STR      r11,[r6,#4]           ;670  ; hdma_spi2_tx
000260  f8c69008          STR      r9,[r6,#8]            ;671  ; hdma_spi2_tx
000264  60f5              STR      r5,[r6,#0xc]          ;672  ; hdma_spi2_tx
000266  6137              STR      r7,[r6,#0x10]         ;673  ; hdma_spi2_tx
000268  6175              STR      r5,[r6,#0x14]         ;674  ; hdma_spi2_tx
00026a  61b5              STR      r5,[r6,#0x18]         ;675  ; hdma_spi2_tx
00026c  61f5              STR      r5,[r6,#0x1c]         ;676  ; hdma_spi2_tx
00026e  e000              B        |L8.626|
                  |L8.624|
000270  e01f              B        |L8.690|
                  |L8.626|
000272  6235              STR      r5,[r6,#0x20]         ;677  ; hdma_spi2_tx
000274  4630              MOV      r0,r6                 ;678
000276  f7fffffe          BL       HAL_DMA_Init
00027a  b108              CBZ      r0,|L8.640|
00027c  f7fffffe          BL       Error_Handler
                  |L8.640|
000280  6566              STR      r6,[r4,#0x54]         ;683
000282  62b4              STR      r4,[r6,#0x28]         ;683  ; hdma_spi2_tx
000284  4863              LDR      r0,|L8.1044|
000286  4e64              LDR      r6,|L8.1048|
000288  3014              ADDS     r0,r0,#0x14           ;686
00028a  36d8              ADDS     r6,r6,#0xd8           ;686
00028c  6030              STR      r0,[r6,#0]            ;686  ; hdma_spi2_rx
00028e  f8c6b004          STR      r11,[r6,#4]           ;687  ; hdma_spi2_rx
000292  60b5              STR      r5,[r6,#8]            ;688  ; hdma_spi2_rx
000294  60f5              STR      r5,[r6,#0xc]          ;689  ; hdma_spi2_rx
000296  6137              STR      r7,[r6,#0x10]         ;690  ; hdma_spi2_rx
000298  6175              STR      r5,[r6,#0x14]         ;691  ; hdma_spi2_rx
00029a  61b5              STR      r5,[r6,#0x18]         ;692  ; hdma_spi2_rx
00029c  61f5              STR      r5,[r6,#0x1c]         ;693  ; hdma_spi2_rx
00029e  6235              STR      r5,[r6,#0x20]         ;694  ; hdma_spi2_rx
0002a0  4630              MOV      r0,r6                 ;695
0002a2  f7fffffe          BL       HAL_DMA_Init
0002a6  b108              CBZ      r0,|L8.684|
0002a8  f7fffffe          BL       Error_Handler
                  |L8.684|
0002ac  65a6              STR      r6,[r4,#0x58]         ;700
0002ae  62b4              STR      r4,[r6,#0x28]         ;700  ; hdma_spi2_rx
                  |L8.688|
0002b0  e759              B        |L8.358|
                  |L8.690|
0002b2  495c              LDR      r1,|L8.1060|
0002b4  4288              CMP      r0,r1                 ;706
0002b6  d1fb              BNE      |L8.688|
0002b8  f8da0048          LDR      r0,[r10,#0x48]        ;709
0002bc  f0400002          ORR      r0,r0,#2              ;709
0002c0  f8ca0048          STR      r0,[r10,#0x48]        ;709
0002c4  f8da0048          LDR      r0,[r10,#0x48]        ;709
0002c8  f0000002          AND      r0,r0,#2              ;709
0002cc  9001              STR      r0,[sp,#4]            ;709
0002ce  2200              MOVS     r2,#0                 ;711
0002d0  4611              MOV      r1,r2                 ;711
0002d2  2038              MOVS     r0,#0x38              ;711
0002d4  f7fffffe          BL       HAL_NVIC_SetPriority
0002d8  2038              MOVS     r0,#0x38              ;712
0002da  f7fffffe          BL       HAL_NVIC_EnableIRQ
0002de  2200              MOVS     r2,#0                 ;714
0002e0  4611              MOV      r1,r2                 ;714
0002e2  2039              MOVS     r0,#0x39              ;714
0002e4  f7fffffe          BL       HAL_NVIC_SetPriority
0002e8  2039              MOVS     r0,#0x39              ;715
0002ea  f7fffffe          BL       HAL_NVIC_EnableIRQ
0002ee  f8da0058          LDR      r0,[r10,#0x58]        ;718
0002f2  f4404000          ORR      r0,r0,#0x8000         ;718
0002f6  f8ca0058          STR      r0,[r10,#0x58]        ;718
0002fa  f8da0058          LDR      r0,[r10,#0x58]        ;718
0002fe  f4004000          AND      r0,r0,#0x8000         ;718
000302  9001              STR      r0,[sp,#4]            ;718
000304  f8da004c          LDR      r0,[r10,#0x4c]        ;720
000308  f0400004          ORR      r0,r0,#4              ;720
00030c  f8ca004c          STR      r0,[r10,#0x4c]        ;720
000310  f8da004c          LDR      r0,[r10,#0x4c]        ;720
000314  f0000004          AND      r0,r0,#4              ;720
000318  9001              STR      r0,[sp,#4]            ;720
00031a  f8da004c          LDR      r0,[r10,#0x4c]        ;721
00031e  f0400004          ORR      r0,r0,#4              ;721
000322  f8ca004c          STR      r0,[r10,#0x4c]        ;721
000326  f8da004c          LDR      r0,[r10,#0x4c]        ;721
00032a  f0000004          AND      r0,r0,#4              ;721
00032e  9001              STR      r0,[sp,#4]            ;721
000330  f8da004c          LDR      r0,[r10,#0x4c]        ;722
000334  f0400004          ORR      r0,r0,#4              ;722
000338  f8ca004c          STR      r0,[r10,#0x4c]        ;722
00033c  f8da004c          LDR      r0,[r10,#0x4c]        ;722
000340  f0000004          AND      r0,r0,#4              ;722
000344  9001              STR      r0,[sp,#4]            ;722
000346  f44f6080          MOV      r0,#0x400             ;728
00034a  9002              STR      r0,[sp,#8]            ;728
00034c  f8cd800c          STR      r8,[sp,#0xc]          ;729
000350  9504              STR      r5,[sp,#0x10]         ;730
000352  9605              STR      r6,[sp,#0x14]         ;731
000354  f04f0a06          MOV      r10,#6                ;732
000358  f8cda018          STR      r10,[sp,#0x18]        ;732
00035c  f8dfb0c8          LDR      r11,|L8.1064|
000360  a902              ADD      r1,sp,#8              ;733
000362  4658              MOV      r0,r11                ;733
000364  f7fffffe          BL       HAL_GPIO_Init
000368  f44f6000          MOV      r0,#0x800             ;735
00036c  9002              STR      r0,[sp,#8]            ;735
00036e  f8cd800c          STR      r8,[sp,#0xc]          ;736
000372  9504              STR      r5,[sp,#0x10]         ;737
000374  9605              STR      r6,[sp,#0x14]         ;738
000376  f8cda018          STR      r10,[sp,#0x18]        ;739
00037a  a902              ADD      r1,sp,#8              ;740
00037c  4658              MOV      r0,r11                ;740
00037e  f7fffffe          BL       HAL_GPIO_Init
000382  f44f5080          MOV      r0,#0x1000            ;742
000386  9002              STR      r0,[sp,#8]            ;742
000388  f8cd800c          STR      r8,[sp,#0xc]          ;743
00038c  9504              STR      r5,[sp,#0x10]         ;744
00038e  9605              STR      r6,[sp,#0x14]         ;745
000390  f8cda018          STR      r10,[sp,#0x18]        ;746
000394  a902              ADD      r1,sp,#8              ;747
000396  4658              MOV      r0,r11                ;747
000398  f7fffffe          BL       HAL_GPIO_Init
00039c  f8df8090          LDR      r8,|L8.1072|
0003a0  4822              LDR      r0,|L8.1068|
0003a2  f8c80000          STR      r0,[r8,#0]            ;751  ; hdma_spi3_tx
0003a6  f8c86004          STR      r6,[r8,#4]            ;752  ; hdma_spi3_tx
0003aa  f8c89008          STR      r9,[r8,#8]            ;753  ; hdma_spi3_tx
0003ae  f8c8500c          STR      r5,[r8,#0xc]          ;754  ; hdma_spi3_tx
0003b2  f8c87010          STR      r7,[r8,#0x10]         ;755  ; hdma_spi3_tx
0003b6  f8c85014          STR      r5,[r8,#0x14]         ;756  ; hdma_spi3_tx
0003ba  f8c85018          STR      r5,[r8,#0x18]         ;757  ; hdma_spi3_tx
0003be  f8c8501c          STR      r5,[r8,#0x1c]         ;758  ; hdma_spi3_tx
0003c2  f8c85020          STR      r5,[r8,#0x20]         ;759  ; hdma_spi3_tx
0003c6  4640              MOV      r0,r8                 ;760
0003c8  f7fffffe          BL       HAL_DMA_Init
0003cc  b108              CBZ      r0,|L8.978|
0003ce  f7fffffe          BL       Error_Handler
                  |L8.978|
0003d2  f8c48054          STR      r8,[r4,#0x54]         ;765
0003d6  f8c84028          STR      r4,[r8,#0x28]         ;765  ; hdma_spi3_tx
0003da  f8df8054          LDR      r8,|L8.1072|
0003de  4813              LDR      r0,|L8.1068|
0003e0  f1080848          ADD      r8,r8,#0x48           ;768
0003e4  3814              SUBS     r0,r0,#0x14           ;768
0003e6  f8c80000          STR      r0,[r8,#0]            ;768  ; hdma_spi3_rx
0003ea  f8c86004          STR      r6,[r8,#4]            ;769  ; hdma_spi3_rx
0003ee  f8c85008          STR      r5,[r8,#8]            ;770  ; hdma_spi3_rx
0003f2  f8c8500c          STR      r5,[r8,#0xc]          ;771  ; hdma_spi3_rx
0003f6  f8c87010          STR      r7,[r8,#0x10]         ;772  ; hdma_spi3_rx
0003fa  f8c85014          STR      r5,[r8,#0x14]         ;773  ; hdma_spi3_rx
0003fe  f8c85018          STR      r5,[r8,#0x18]         ;774  ; hdma_spi3_rx
000402  f8c8501c          STR      r5,[r8,#0x1c]         ;775  ; hdma_spi3_rx
000406  f8c85020          STR      r5,[r8,#0x20]         ;776  ; hdma_spi3_rx
00040a  e013              B        |L8.1076|
                  |L8.1036|
                          DCD      0x40013000
                  |L8.1040|
                          DCD      0x40021000
                  |L8.1044|
                          DCD      0x40020030
                  |L8.1048|
                          DCD      ||.bss||+0x12c
                  |L8.1052|
                          DCD      0x40003800
                  |L8.1056|
                          DCD      0x48000400
                  |L8.1060|
                          DCD      0x40003c00
                  |L8.1064|
                          DCD      0x48000800
                  |L8.1068|
                          DCD      0x4002041c
                  |L8.1072|
                          DCD      ||.bss||+0x24c
                  |L8.1076|
000434  4640              MOV      r0,r8                 ;777
000436  f7fffffe          BL       HAL_DMA_Init
00043a  b108              CBZ      r0,|L8.1088|
00043c  f7fffffe          BL       Error_Handler
                  |L8.1088|
000440  f8c48058          STR      r8,[r4,#0x58]         ;782
000444  f8c84028          STR      r4,[r8,#0x28]         ;782  ; hdma_spi3_rx
000448  e68d              B        |L8.358|
;;;790    
                          ENDP


                          AREA ||i.HAL_SPI_TxRxCpltCallback||, CODE, READONLY, ALIGN=2

                  HAL_SPI_TxRxCpltCallback PROC
;;;403      */
;;;404    void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
000000  6800              LDR      r0,[r0,#0]
;;;405    {
;;;406    	if(hspi->Instance == BSP_SPI1){
000002  4905              LDR      r1,|L9.24|
000004  4288              CMP      r0,r1
000006  d105              BNE      |L9.20|
;;;407    		if(spi1_evt_cb!=NULL)
000008  4804              LDR      r0,|L9.28|
00000a  6841              LDR      r1,[r0,#4]  ; spi1_evt_cb
00000c  2900              CMP      r1,#0
00000e  d001              BEQ      |L9.20|
;;;408    			spi1_evt_cb(SMP_SPI_EVENT_DONE);
000010  2000              MOVS     r0,#0
000012  4708              BX       r1
                  |L9.20|
;;;409    	}
;;;410    }
000014  4770              BX       lr
;;;411    void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *h_spi)
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40013000
                  |L9.28|
                          DCD      ||.data||

                          AREA ||i.smp_spi_get_status||, CODE, READONLY, ALIGN=2

                  smp_spi_get_status PROC
;;;60     
;;;61     int8_t smp_spi_get_status(smp_spi_t *spi)
000000  b530              PUSH     {r4,r5,lr}
;;;62     {
000002  b099              SUB      sp,sp,#0x64
;;;63     	SPI_HandleTypeDef temp_spi_handle;
;;;64     	if( spi->num == SPI_module1){
000004  7801              LDRB     r1,[r0,#0]
;;;65     		temp_spi_handle = smp_spi1_handle;
000006  ad12              ADD      r5,sp,#0x48
000008  2900              CMP      r1,#0                 ;64
00000a  d006              BEQ      |L10.26|
;;;66     	}else if( spi->num == SPI_module2){
00000c  2901              CMP      r1,#1
00000e  d023              BEQ      |L10.88|
;;;67     		temp_spi_handle = smp_spi2_handle;
;;;68     	}else if( spi->num == SPI_module3){
000010  2902              CMP      r1,#2
000012  d043              BEQ      |L10.156|
;;;69     		temp_spi_handle = smp_spi3_handle;
;;;70     	}else{
;;;71     		return SMP_SPI_EVENT_TRANSFERR_ERROR;	
000014  2002              MOVS     r0,#2
                  |L10.22|
;;;72     	}
;;;73     	if(temp_spi_handle.State ==	HAL_SPI_STATE_READY){
;;;74     		return SMP_SPI_EVENT_DONE;
;;;75     	}
;;;76     	return SMP_SPI_EVENT_TRANSFER_BUSY;
;;;77     }
000016  b019              ADD      sp,sp,#0x64
000018  bd30              POP      {r4,r5,pc}
                  |L10.26|
00001a  223e              MOVS     r2,#0x3e              ;65
00001c  4934              LDR      r1,|L10.240|
00001e  4668              MOV      r0,sp                 ;65
000020  f7fffffe          BL       __aeabi_memcpy4
000024  4c32              LDR      r4,|L10.240|
000026  3440              ADDS     r4,r4,#0x40           ;65
000028  f8340c02          LDRH     r0,[r4,#-2]           ;65  ; smp_spi1_handle
00002c  f8ad003e          STRH     r0,[sp,#0x3e]         ;65
000030  6820              LDR      r0,[r4,#0]            ;65  ; smp_spi1_handle
000032  9010              STR      r0,[sp,#0x40]         ;65
000034  88a0              LDRH     r0,[r4,#4]            ;65  ; smp_spi1_handle
000036  f8ad0044          STRH     r0,[sp,#0x44]         ;65
00003a  88e0              LDRH     r0,[r4,#6]            ;65  ; smp_spi1_handle
00003c  f8ad0046          STRH     r0,[sp,#0x46]         ;65
000040  2215              MOVS     r2,#0x15              ;65
000042  f1040108          ADD      r1,r4,#8              ;65
000046  4628              MOV      r0,r5                 ;65
000048  f7fffffe          BL       __aeabi_memcpy4
00004c  7f60              LDRB     r0,[r4,#0x1d]         ;65  ; smp_spi1_handle
00004e  f88d005d          STRB     r0,[sp,#0x5d]         ;65
000052  6a20              LDR      r0,[r4,#0x20]         ;65  ; smp_spi1_handle
000054  9018              STR      r0,[sp,#0x60]         ;65
000056  e042              B        |L10.222|
                  |L10.88|
000058  4925              LDR      r1,|L10.240|
00005a  223e              MOVS     r2,#0x3e              ;67
00005c  3164              ADDS     r1,r1,#0x64           ;67
00005e  4668              MOV      r0,sp                 ;67
000060  f7fffffe          BL       __aeabi_memcpy4
000064  4c22              LDR      r4,|L10.240|
000066  3464              ADDS     r4,r4,#0x64           ;67
000068  8fe0              LDRH     r0,[r4,#0x3e]         ;67  ; smp_spi2_handle
00006a  f8ad003e          STRH     r0,[sp,#0x3e]         ;67
00006e  f104011c          ADD      r1,r4,#0x1c           ;67
000072  6a48              LDR      r0,[r1,#0x24]         ;67  ; smp_spi2_handle
000074  9010              STR      r0,[sp,#0x40]         ;67
000076  8d08              LDRH     r0,[r1,#0x28]         ;67  ; smp_spi2_handle
000078  f8ad0044          STRH     r0,[sp,#0x44]         ;67
00007c  f8b40046          LDRH     r0,[r4,#0x46]         ;67  ; smp_spi2_handle
000080  f8ad0046          STRH     r0,[sp,#0x46]         ;67
000084  2215              MOVS     r2,#0x15              ;67
000086  312c              ADDS     r1,r1,#0x2c           ;67
000088  4628              MOV      r0,r5                 ;67
00008a  f7fffffe          BL       __aeabi_memcpy4
00008e  f894005d          LDRB     r0,[r4,#0x5d]         ;67  ; smp_spi2_handle
000092  f88d005d          STRB     r0,[sp,#0x5d]         ;67
000096  6e20              LDR      r0,[r4,#0x60]         ;67  ; smp_spi2_handle
000098  9018              STR      r0,[sp,#0x60]         ;67
00009a  e020              B        |L10.222|
                  |L10.156|
00009c  4914              LDR      r1,|L10.240|
00009e  223e              MOVS     r2,#0x3e              ;69
0000a0  31c8              ADDS     r1,r1,#0xc8           ;69
0000a2  4668              MOV      r0,sp                 ;69
0000a4  f7fffffe          BL       __aeabi_memcpy4
0000a8  4c11              LDR      r4,|L10.240|
0000aa  34c8              ADDS     r4,r4,#0xc8           ;69
0000ac  8fe0              LDRH     r0,[r4,#0x3e]         ;69  ; smp_spi3_handle
0000ae  f8ad003e          STRH     r0,[sp,#0x3e]         ;69
0000b2  f1040138          ADD      r1,r4,#0x38           ;69
0000b6  6888              LDR      r0,[r1,#8]            ;69  ; smp_spi3_handle
0000b8  9010              STR      r0,[sp,#0x40]         ;69
0000ba  8988              LDRH     r0,[r1,#0xc]          ;69  ; smp_spi3_handle
0000bc  f8ad0044          STRH     r0,[sp,#0x44]         ;69
0000c0  f8b40046          LDRH     r0,[r4,#0x46]         ;69  ; smp_spi3_handle
0000c4  f8ad0046          STRH     r0,[sp,#0x46]         ;69
0000c8  2215              MOVS     r2,#0x15              ;69
0000ca  3110              ADDS     r1,r1,#0x10           ;69
0000cc  4628              MOV      r0,r5                 ;69
0000ce  f7fffffe          BL       __aeabi_memcpy4
0000d2  f894005d          LDRB     r0,[r4,#0x5d]         ;69  ; smp_spi3_handle
0000d6  f88d005d          STRB     r0,[sp,#0x5d]         ;69
0000da  6e20              LDR      r0,[r4,#0x60]         ;69  ; smp_spi3_handle
0000dc  9018              STR      r0,[sp,#0x60]         ;69
                  |L10.222|
0000de  f89d005d          LDRB     r0,[sp,#0x5d]         ;73
0000e2  2801              CMP      r0,#1                 ;73
0000e4  d001              BEQ      |L10.234|
0000e6  2001              MOVS     r0,#1                 ;76
0000e8  e795              B        |L10.22|
                  |L10.234|
0000ea  2000              MOVS     r0,#0                 ;74
0000ec  e793              B        |L10.22|
;;;78     
                          ENDP

0000ee  0000              DCW      0x0000
                  |L10.240|
                          DCD      ||.bss||

                          AREA ||i.smp_spi_master_cs_deinit||, CODE, READONLY, ALIGN=1

                  smp_spi_master_cs_deinit PROC
;;;277    
;;;278    int8_t smp_spi_master_cs_deinit(smp_spi_cs_t *p_cs)
000000  b510              PUSH     {r4,lr}
;;;279    {	
;;;280    	if(smp_gpio_deinit(&p_cs->cs_handler) != HAL_OK){
000002  1d00              ADDS     r0,r0,#4
000004  f7fffffe          BL       smp_gpio_deinit
000008  b110              CBZ      r0,|L11.16|
;;;281    		return SMP_ERROR_NOT_FOUND;
00000a  f04f30ff          MOV      r0,#0xffffffff
;;;282    	}
;;;283    	return SMP_SUCCESS;
;;;284    }
00000e  bd10              POP      {r4,pc}
                  |L11.16|
000010  2000              MOVS     r0,#0                 ;283
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||i.smp_spi_master_cs_init||, CODE, READONLY, ALIGN=1

                  smp_spi_master_cs_init PROC
;;;266    
;;;267    int8_t smp_spi_master_cs_init(smp_spi_cs_t *p_cs)
000000  b510              PUSH     {r4,lr}
;;;268    {		
000002  4604              MOV      r4,r0
;;;269    	p_cs->cs_handler.mode = SMP_GPIO_MODE_OUTPUT_OD;
000004  2002              MOVS     r0,#2
000006  71a0              STRB     r0,[r4,#6]
;;;270    	
;;;271    	if(smp_gpio_init(&p_cs->cs_handler) != HAL_OK){
000008  1d20              ADDS     r0,r4,#4
00000a  f7fffffe          BL       smp_gpio_init
00000e  b110              CBZ      r0,|L12.22|
;;;272    		return SMP_ERROR_NOT_FOUND;
000010  f04f30ff          MOV      r0,#0xffffffff
;;;273    	}
;;;274    	smp_gpio_set_state(&p_cs->cs_handler, GPIO_ACTIVE_HIGH);
;;;275    	return SMP_SUCCESS;
;;;276    }
000014  bd10              POP      {r4,pc}
                  |L12.22|
000016  2101              MOVS     r1,#1                 ;274
000018  1d20              ADDS     r0,r4,#4              ;274
00001a  f7fffffe          BL       smp_gpio_set_state
00001e  2000              MOVS     r0,#0                 ;275
000020  bd10              POP      {r4,pc}
;;;277    
                          ENDP


                          AREA ||i.smp_spi_master_cs_set||, CODE, READONLY, ALIGN=2

                  smp_spi_master_cs_set PROC
;;;285    
;;;286    int8_t smp_spi_master_cs_set(smp_spi_cs_t *p_cs, uint8_t status)
000000  b570              PUSH     {r4-r6,lr}
;;;287    {
000002  4604              MOV      r4,r0
;;;288    	int8_t temp_status;
;;;289    	if(status == GPIO_ACTIVE_LOW){
;;;290    		temp_status = smp_gpio_set_state(&p_cs->cs_handler, GPIO_ACTIVE_LOW);
;;;291    		if(p_cs->spi_num == SPI_module1){
;;;292    			spi1_evt_cb(SMP_SPI_EVENT_TRANSFER_BUSY);
000004  4d1e              LDR      r5,|L13.128|
000006  2900              CMP      r1,#0                 ;289
000008  d004              BEQ      |L13.20|
;;;293    		}else if(p_cs->spi_num == SPI_module2){
;;;294    			spi2_evt_cb(SMP_SPI_EVENT_TRANSFER_BUSY);
;;;295    		}else if(p_cs->spi_num == SPI_module3){
;;;296    			spi3_evt_cb(SMP_SPI_EVENT_TRANSFER_BUSY);
;;;297    		}
;;;298    		return temp_status;		
;;;299    	}else if(status == GPIO_ACTIVE_HIGH){
00000a  2901              CMP      r1,#1
00000c  d01b              BEQ      |L13.70|
;;;300    		temp_status = smp_gpio_set_state(&p_cs->cs_handler, GPIO_ACTIVE_HIGH);
;;;301    		uSPIFlag[p_cs->spi_num] = SPI_Done;
;;;302    		if(p_cs->spi_num == SPI_module1){
;;;303    			spi1_evt_cb(SMP_SPI_EVENT_DONE);
;;;304    		}else if(p_cs->spi_num == SPI_module2){
;;;305    			spi2_evt_cb(SMP_SPI_EVENT_DONE);
;;;306    		}else if(p_cs->spi_num == SPI_module3){
;;;307    			spi3_evt_cb(SMP_SPI_EVENT_DONE);
;;;308    		}
;;;309    		return temp_status;
;;;310    	}
;;;311    	return SMP_ERROR_NOT_FOUND;
00000e  f04f30ff          MOV      r0,#0xffffffff
;;;312    }
000012  bd70              POP      {r4-r6,pc}
                  |L13.20|
000014  2100              MOVS     r1,#0                 ;290
000016  1d20              ADDS     r0,r4,#4              ;290
000018  f7fffffe          BL       smp_gpio_set_state
00001c  4606              MOV      r6,r0                 ;290
00001e  7820              LDRB     r0,[r4,#0]            ;291
000020  b120              CBZ      r0,|L13.44|
000022  2801              CMP      r0,#1                 ;293
000024  d006              BEQ      |L13.52|
000026  2802              CMP      r0,#2                 ;295
000028  d008              BEQ      |L13.60|
00002a  e00a              B        |L13.66|
                  |L13.44|
00002c  6869              LDR      r1,[r5,#4]            ;292  ; spi1_evt_cb
00002e  2001              MOVS     r0,#1                 ;292
000030  4788              BLX      r1                    ;292
000032  e006              B        |L13.66|
                  |L13.52|
000034  68a9              LDR      r1,[r5,#8]            ;294  ; spi2_evt_cb
000036  2001              MOVS     r0,#1                 ;294
000038  4788              BLX      r1                    ;294
00003a  e002              B        |L13.66|
                  |L13.60|
00003c  68e9              LDR      r1,[r5,#0xc]          ;296  ; spi3_evt_cb
00003e  2001              MOVS     r0,#1                 ;296
000040  4788              BLX      r1                    ;296
                  |L13.66|
000042  4630              MOV      r0,r6                 ;298
000044  bd70              POP      {r4-r6,pc}
                  |L13.70|
000046  2101              MOVS     r1,#1                 ;300
000048  1d20              ADDS     r0,r4,#4              ;300
00004a  f7fffffe          BL       smp_gpio_set_state
00004e  4606              MOV      r6,r0                 ;300
000050  7821              LDRB     r1,[r4,#0]            ;301
000052  4a0b              LDR      r2,|L13.128|
000054  2003              MOVS     r0,#3                 ;301
000056  5450              STRB     r0,[r2,r1]            ;301
000058  7820              LDRB     r0,[r4,#0]            ;302
00005a  b120              CBZ      r0,|L13.102|
00005c  2801              CMP      r0,#1                 ;304
00005e  d006              BEQ      |L13.110|
000060  2802              CMP      r0,#2                 ;306
000062  d008              BEQ      |L13.118|
000064  e00a              B        |L13.124|
                  |L13.102|
000066  6869              LDR      r1,[r5,#4]            ;303  ; spi1_evt_cb
000068  2000              MOVS     r0,#0                 ;303
00006a  4788              BLX      r1                    ;303
00006c  e006              B        |L13.124|
                  |L13.110|
00006e  68a9              LDR      r1,[r5,#8]            ;305  ; spi2_evt_cb
000070  2000              MOVS     r0,#0                 ;305
000072  4788              BLX      r1                    ;305
000074  e002              B        |L13.124|
                  |L13.118|
000076  68e9              LDR      r1,[r5,#0xc]          ;307  ; spi3_evt_cb
000078  2000              MOVS     r0,#0                 ;307
00007a  4788              BLX      r1                    ;307
                  |L13.124|
00007c  4630              MOV      r0,r6                 ;309
00007e  bd70              POP      {r4-r6,pc}
;;;313    uint8_t * g_rx_data[3];
                          ENDP

                  |L13.128|
                          DCD      ||.data||

                          AREA ||i.smp_spi_master_deinit||, CODE, READONLY, ALIGN=2

                  smp_spi_master_deinit PROC
;;;226    
;;;227    int8_t smp_spi_master_deinit(smp_spi_t *p_spi)
000000  b570              PUSH     {r4-r6,lr}
;;;228    {
;;;229    	switch(p_spi->num){
000002  7801              LDRB     r1,[r0,#0]
000004  2400              MOVS     r4,#0
;;;230    		case SPI_module1:
;;;231    			if(smp_spi1_handle.Instance != 0){
;;;232    				if(HAL_SPI_DeInit(&smp_spi1_handle) != HAL_OK)
;;;233    				{
;;;234    					/* Deinitialization Error */
;;;235    					return SMP_ERROR_NOT_FOUND;
000006  1e66              SUBS     r6,r4,#1
000008  2900              CMP      r1,#0                 ;229
00000a  d005              BEQ      |L14.24|
00000c  2901              CMP      r1,#1                 ;229
00000e  d00e              BEQ      |L14.46|
000010  2902              CMP      r1,#2                 ;229
000012  d018              BEQ      |L14.70|
;;;236    				}
;;;237    				smp_spi1_handle.Instance = 0;
;;;238    			}
;;;239    			break;
;;;240    		case SPI_module2:
;;;241    			if(smp_spi2_handle.Instance != 0){
;;;242    				if(HAL_SPI_DeInit(&smp_spi2_handle) != HAL_OK)
;;;243    				{
;;;244    					/* Deinitialization Error */
;;;245    					return SMP_ERROR_NOT_FOUND;
;;;246    				}
;;;247    				smp_spi2_handle.Instance = 0;
;;;248    			}
;;;249    			break;
;;;250    		case SPI_module3:
;;;251    			if(smp_spi3_handle.Instance != 0){
;;;252    				if(HAL_SPI_DeInit(&smp_spi3_handle) != HAL_OK)
;;;253    				{
;;;254    					/* Deinitialization Error */
;;;255    					return SMP_ERROR_NOT_FOUND;
;;;256    				}
;;;257    				smp_spi3_handle.Instance = 0;
;;;258    			}
;;;259    			break;
;;;260    		default:
;;;261    			/* SPI number unknown */
;;;262    			return SMP_ERROR_NOT_SUPPORTED;
000014  1ea0              SUBS     r0,r4,#2
;;;263    	}
;;;264    	return SMP_SUCCESS;	
;;;265    }
000016  bd70              POP      {r4-r6,pc}
                  |L14.24|
000018  4d11              LDR      r5,|L14.96|
00001a  6828              LDR      r0,[r5,#0]            ;231  ; smp_spi1_handle
00001c  b1f0              CBZ      r0,|L14.92|
00001e  4628              MOV      r0,r5                 ;232
000020  f7fffffe          BL       HAL_SPI_DeInit
000024  b108              CBZ      r0,|L14.42|
000026  4630              MOV      r0,r6                 ;235
000028  bd70              POP      {r4-r6,pc}
                  |L14.42|
00002a  602c              STR      r4,[r5,#0]            ;237  ; smp_spi1_handle
00002c  e016              B        |L14.92|
                  |L14.46|
00002e  4d0c              LDR      r5,|L14.96|
000030  3564              ADDS     r5,r5,#0x64           ;241
000032  6828              LDR      r0,[r5,#0]            ;241  ; smp_spi2_handle
000034  b190              CBZ      r0,|L14.92|
000036  4628              MOV      r0,r5                 ;242
000038  f7fffffe          BL       HAL_SPI_DeInit
00003c  b108              CBZ      r0,|L14.66|
00003e  4630              MOV      r0,r6                 ;245
000040  bd70              POP      {r4-r6,pc}
                  |L14.66|
000042  602c              STR      r4,[r5,#0]            ;247  ; smp_spi2_handle
000044  e00a              B        |L14.92|
                  |L14.70|
000046  4d06              LDR      r5,|L14.96|
000048  35c8              ADDS     r5,r5,#0xc8           ;251
00004a  6828              LDR      r0,[r5,#0]            ;251  ; smp_spi3_handle
00004c  b130              CBZ      r0,|L14.92|
00004e  4628              MOV      r0,r5                 ;252
000050  f7fffffe          BL       HAL_SPI_DeInit
000054  b108              CBZ      r0,|L14.90|
000056  4630              MOV      r0,r6                 ;255
000058  bd70              POP      {r4-r6,pc}
                  |L14.90|
00005a  602c              STR      r4,[r5,#0]            ;257  ; smp_spi3_handle
                  |L14.92|
00005c  2000              MOVS     r0,#0                 ;264
00005e  bd70              POP      {r4-r6,pc}
;;;266    
                          ENDP

                  |L14.96|
                          DCD      ||.bss||

                          AREA ||i.smp_spi_master_init||, CODE, READONLY, ALIGN=2

                  smp_spi_master_init PROC
;;;78     
;;;79     int8_t smp_spi_master_init(smp_spi_t *p_spi, smp_spi_event_t smp_spi_event_handler, const bool lsb)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;80     {
000004  460d              MOV      r5,r1
;;;81     	switch(p_spi->num){
000006  f890a000          LDRB     r10,[r0,#0]
00000a  2402              MOVS     r4,#2
;;;82     		case SPI_module1:
;;;83     			__SPI1_CLK_ENABLE();
00000c  f8dfe240          LDR      lr,|L15.592|
;;;84     			smp_spi1_handle.Instance               = BSP_SPI1;
;;;85     			smp_spi1_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; 
;;;86     			smp_spi1_handle.Init.Direction         = SPI_DIRECTION_2LINES;
;;;87     			switch(p_spi->mode){
;;;88     				case SPI_mode0:
;;;89     					smp_spi1_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW;
;;;90     					smp_spi1_handle.Init.CLKPhase       = SPI_PHASE_1EDGE;  
;;;91     					break;
;;;92     				case SPI_mode1:
;;;93     					smp_spi1_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW; 
;;;94     					smp_spi1_handle.Init.CLKPhase       = SPI_PHASE_2EDGE;  
;;;95     					break;
;;;96     				case SPI_mode2:
;;;97     					smp_spi1_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;98     					smp_spi1_handle.Init.CLKPhase       = SPI_PHASE_1EDGE; 
;;;99     					break;
;;;100    				case SPI_mode3:
;;;101    					smp_spi1_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;102    					smp_spi1_handle.Init.CLKPhase       = SPI_PHASE_2EDGE; 					
;;;103    					break;				
;;;104    				default:
;;;105    					return SMP_ERROR_INVALID_PARAM;
000010  1f61              SUBS     r1,r4,#5
000012  2301              MOVS     r3,#1                 ;81
000014  2600              MOVS     r6,#0                 ;81
000016  f04f0b38          MOV      r11,#0x38             ;85
;;;106    			}
;;;107    			smp_spi1_handle.Init.DataSize          = SPI_DATASIZE_8BIT;
00001a  f44f67e0          MOV      r7,#0x700
;;;108    			if(lsb == true)
;;;109    				smp_spi1_handle.Init.FirstBit      = SPI_FIRSTBIT_LSB;
00001e  f04f0c80          MOV      r12,#0x80
;;;110    			else	
;;;111    				smp_spi1_handle.Init.FirstBit      = SPI_FIRSTBIT_MSB;
;;;112    			smp_spi1_handle.Init.TIMode            = SPI_TIMODE_DISABLE;
;;;113    			smp_spi1_handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
;;;114    			smp_spi1_handle.Init.CRCPolynomial     = 7;
000022  f04f0807          MOV      r8,#7
;;;115    			smp_spi1_handle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
;;;116    			smp_spi1_handle.Init.NSS               = SPI_NSS_SOFT;
000026  f44f7900          MOV      r9,#0x200
00002a  f1ba0f00          CMP      r10,#0                ;81
00002e  d008              BEQ      |L15.66|
000030  f1ba0f01          CMP      r10,#1                ;81
000034  d05a              BEQ      |L15.236|
000036  f1ba0f02          CMP      r10,#2                ;81
00003a  d079              BEQ      |L15.304|
;;;117    			smp_spi1_handle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
;;;118    
;;;119    			smp_spi1_handle.Init.Mode = SPI_MODE_MASTER;
;;;120    
;;;121    			if(HAL_SPI_Init(&smp_spi1_handle) != HAL_OK)
;;;122    			{
;;;123    			/* Initialization Error */
;;;124    				return SMP_ERROR_NOT_FOUND;
;;;125    			}
;;;126    			spi1_evt_cb = smp_spi_event_handler;
;;;127    			break;
;;;128    		case SPI_module2:
;;;129    			__SPI2_CLK_ENABLE();
;;;130    			smp_spi2_handle.Instance               = BSP_SPI2;
;;;131    			smp_spi2_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; 
;;;132    			smp_spi2_handle.Init.Direction         = SPI_DIRECTION_2LINES;
;;;133    			switch(p_spi->mode){
;;;134    				case SPI_mode0:
;;;135    					smp_spi2_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW;
;;;136    					smp_spi2_handle.Init.CLKPhase       = SPI_PHASE_1EDGE;  
;;;137    					break;
;;;138    				case SPI_mode1:
;;;139    					smp_spi2_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW; 
;;;140    					smp_spi2_handle.Init.CLKPhase       = SPI_PHASE_2EDGE;  
;;;141    					break;
;;;142    				case SPI_mode2:
;;;143    					smp_spi2_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;144    					smp_spi2_handle.Init.CLKPhase       = SPI_PHASE_1EDGE; 
;;;145    					break;
;;;146    				case SPI_mode3:
;;;147    					smp_spi2_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;148    					smp_spi2_handle.Init.CLKPhase       = SPI_PHASE_2EDGE; 					
;;;149    					break;				
;;;150    				default:
;;;151    					return SMP_ERROR_INVALID_PARAM;
;;;152    			}
;;;153    			smp_spi2_handle.Init.DataSize          = SPI_DATASIZE_8BIT;
;;;154    			if(lsb == true)
;;;155    				smp_spi2_handle.Init.FirstBit      = SPI_FIRSTBIT_LSB;
;;;156    			else	
;;;157    				smp_spi2_handle.Init.FirstBit      = SPI_FIRSTBIT_MSB;
;;;158    			smp_spi2_handle.Init.TIMode            = SPI_TIMODE_DISABLE;
;;;159    			smp_spi2_handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
;;;160    			smp_spi2_handle.Init.CRCPolynomial     = 7;
;;;161    			smp_spi2_handle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
;;;162    			smp_spi2_handle.Init.NSS               = SPI_NSS_SOFT;
;;;163    			smp_spi2_handle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
;;;164    
;;;165    			smp_spi2_handle.Init.Mode = SPI_MODE_MASTER;
;;;166    
;;;167    			if(HAL_SPI_Init(&smp_spi2_handle) != HAL_OK)
;;;168    			{
;;;169    			/* Initialization Error */
;;;170    				return SMP_ERROR_NOT_FOUND;
;;;171    			}
;;;172    			spi2_evt_cb = smp_spi_event_handler;
;;;173    			break;
;;;174    		case SPI_module3:
;;;175    			__SPI3_CLK_ENABLE();
;;;176    			smp_spi3_handle.Instance               = BSP_SPI3;
;;;177    			smp_spi3_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; 
;;;178    			smp_spi3_handle.Init.Direction         = SPI_DIRECTION_2LINES;
;;;179    			switch(p_spi->mode){
;;;180    				case SPI_mode0:
;;;181    					smp_spi3_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW;
;;;182    					smp_spi3_handle.Init.CLKPhase       = SPI_PHASE_1EDGE;  
;;;183    					break;
;;;184    				case SPI_mode1:
;;;185    					smp_spi3_handle.Init.CLKPolarity  	= SPI_POLARITY_LOW; 
;;;186    					smp_spi3_handle.Init.CLKPhase       = SPI_PHASE_2EDGE;  
;;;187    					break;
;;;188    				case SPI_mode2:
;;;189    					smp_spi3_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;190    					smp_spi3_handle.Init.CLKPhase       = SPI_PHASE_1EDGE; 
;;;191    					break;
;;;192    				case SPI_mode3:
;;;193    					smp_spi3_handle.Init.CLKPolarity  	= SPI_POLARITY_HIGH; 
;;;194    					smp_spi3_handle.Init.CLKPhase       = SPI_PHASE_2EDGE; 					
;;;195    					break;				
;;;196    				default:
;;;197    					return SMP_ERROR_INVALID_PARAM;
;;;198    			}
;;;199    			smp_spi3_handle.Init.DataSize          = SPI_DATASIZE_8BIT;
;;;200    			if(lsb == true)
;;;201    				smp_spi3_handle.Init.FirstBit      = SPI_FIRSTBIT_LSB;
;;;202    			else	
;;;203    				smp_spi3_handle.Init.FirstBit      = SPI_FIRSTBIT_MSB;
;;;204    			smp_spi3_handle.Init.TIMode            = SPI_TIMODE_DISABLE;
;;;205    			smp_spi3_handle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
;;;206    			smp_spi3_handle.Init.CRCPolynomial     = 7;
;;;207    			smp_spi3_handle.Init.CRCLength         = SPI_CRC_LENGTH_8BIT;
;;;208    			smp_spi3_handle.Init.NSS               = SPI_NSS_SOFT;
;;;209    			smp_spi3_handle.Init.NSSPMode          = SPI_NSS_PULSE_DISABLE;
;;;210    
;;;211    			smp_spi3_handle.Init.Mode = SPI_MODE_MASTER;
;;;212    
;;;213    			if(HAL_SPI_Init(&smp_spi3_handle) != HAL_OK)
;;;214    			{
;;;215    			/* Initialization Error */
;;;216    				return SMP_ERROR_NOT_FOUND;
;;;217    			}
;;;218    			spi3_evt_cb = smp_spi_event_handler;
;;;219    			break;
;;;220    		default:
;;;221    			/* SPI number unknown */
;;;222    			return SMP_ERROR_INVALID_PARAM;
00003c  4608              MOV      r0,r1
                  |L15.62|
;;;223    	}
;;;224    	return SMP_SUCCESS;	
;;;225    }
00003e  e8bd8ff8          POP      {r3-r11,pc}
                  |L15.66|
000042  f8dea060          LDR      r10,[lr,#0x60]        ;83
000046  f44a5a80          ORR      r10,r10,#0x1000       ;83
00004a  f8cea060          STR      r10,[lr,#0x60]        ;83
00004e  f8dea060          LDR      r10,[lr,#0x60]        ;83
000052  f40a5a80          AND      r10,r10,#0x1000       ;83
000056  f8cda000          STR      r10,[sp,#0]           ;83
00005a  f8dfa1fc          LDR      r10,|L15.600|
00005e  f8dfe1f4          LDR      lr,|L15.596|
000062  f8cae000          STR      lr,[r10,#0]           ;84  ; smp_spi1_handle
000066  f8cab01c          STR      r11,[r10,#0x1c]       ;85  ; smp_spi1_handle
00006a  f8ca6008          STR      r6,[r10,#8]           ;86  ; smp_spi1_handle
00006e  7840              LDRB     r0,[r0,#1]            ;87
000070  b138              CBZ      r0,|L15.130|
000072  2801              CMP      r0,#1                 ;87
000074  d00a              BEQ      |L15.140|
000076  2802              CMP      r0,#2                 ;87
000078  d00d              BEQ      |L15.150|
00007a  2803              CMP      r0,#3                 ;87
00007c  d010              BEQ      |L15.160|
00007e  4608              MOV      r0,r1                 ;105
000080  e7dd              B        |L15.62|
                  |L15.130|
000082  f8ca6010          STR      r6,[r10,#0x10]        ;89  ; smp_spi1_handle
000086  f8ca6014          STR      r6,[r10,#0x14]        ;90  ; smp_spi1_handle
00008a  e00d              B        |L15.168|
                  |L15.140|
00008c  f8ca6010          STR      r6,[r10,#0x10]        ;93  ; smp_spi1_handle
000090  f8ca3014          STR      r3,[r10,#0x14]        ;94  ; smp_spi1_handle
000094  e008              B        |L15.168|
                  |L15.150|
000096  f8ca4010          STR      r4,[r10,#0x10]        ;97  ; smp_spi1_handle
00009a  f8ca6014          STR      r6,[r10,#0x14]        ;98  ; smp_spi1_handle
00009e  e003              B        |L15.168|
                  |L15.160|
0000a0  f8ca4010          STR      r4,[r10,#0x10]        ;101  ; smp_spi1_handle
0000a4  f8ca3014          STR      r3,[r10,#0x14]        ;102  ; smp_spi1_handle
                  |L15.168|
0000a8  f8ca700c          STR      r7,[r10,#0xc]         ;107  ; smp_spi1_handle
0000ac  b112              CBZ      r2,|L15.180|
0000ae  f8cac020          STR      r12,[r10,#0x20]       ;109  ; smp_spi1_handle
0000b2  e001              B        |L15.184|
                  |L15.180|
0000b4  f8ca6020          STR      r6,[r10,#0x20]        ;111  ; smp_spi1_handle
                  |L15.184|
0000b8  f8ca6024          STR      r6,[r10,#0x24]        ;112  ; smp_spi1_handle
0000bc  f8ca6028          STR      r6,[r10,#0x28]        ;113  ; smp_spi1_handle
0000c0  f8ca802c          STR      r8,[r10,#0x2c]        ;114  ; smp_spi1_handle
0000c4  f8ca3030          STR      r3,[r10,#0x30]        ;115  ; smp_spi1_handle
0000c8  f8ca9018          STR      r9,[r10,#0x18]        ;116  ; smp_spi1_handle
0000cc  f8ca6034          STR      r6,[r10,#0x34]        ;117  ; smp_spi1_handle
0000d0  f44f7082          MOV      r0,#0x104             ;119
0000d4  f8ca0004          STR      r0,[r10,#4]           ;119  ; smp_spi1_handle
0000d8  485f              LDR      r0,|L15.600|
0000da  f7fffffe          BL       HAL_SPI_Init
0000de  b110              CBZ      r0,|L15.230|
0000e0  f04f30ff          MOV      r0,#0xffffffff        ;124
0000e4  e7ab              B        |L15.62|
                  |L15.230|
0000e6  485d              LDR      r0,|L15.604|
0000e8  6045              STR      r5,[r0,#4]            ;126  ; spi1_evt_cb
0000ea  e0af              B        |L15.588|
                  |L15.236|
0000ec  f8dea058          LDR      r10,[lr,#0x58]        ;129
0000f0  f44a4a80          ORR      r10,r10,#0x4000       ;129
0000f4  f8cea058          STR      r10,[lr,#0x58]        ;129
0000f8  f8dea058          LDR      r10,[lr,#0x58]        ;129
0000fc  f40a4a80          AND      r10,r10,#0x4000       ;129
000100  f8cda000          STR      r10,[sp,#0]           ;129
000104  f8dfa150          LDR      r10,|L15.600|
000108  f8dfe154          LDR      lr,|L15.608|
00010c  f10a0a64          ADD      r10,r10,#0x64         ;130
000110  f8cae000          STR      lr,[r10,#0]           ;130  ; smp_spi2_handle
000114  f8cab01c          STR      r11,[r10,#0x1c]       ;131  ; smp_spi2_handle
000118  f8ca6008          STR      r6,[r10,#8]           ;132  ; smp_spi2_handle
00011c  7840              LDRB     r0,[r0,#1]            ;133
00011e  b140              CBZ      r0,|L15.306|
000120  2801              CMP      r0,#1                 ;133
000122  d00b              BEQ      |L15.316|
000124  2802              CMP      r0,#2                 ;133
000126  d00e              BEQ      |L15.326|
000128  2803              CMP      r0,#3                 ;133
00012a  d011              BEQ      |L15.336|
00012c  4608              MOV      r0,r1                 ;151
00012e  e786              B        |L15.62|
                  |L15.304|
000130  e035              B        |L15.414|
                  |L15.306|
000132  f8ca6010          STR      r6,[r10,#0x10]        ;135  ; smp_spi2_handle
000136  f8ca6014          STR      r6,[r10,#0x14]        ;136  ; smp_spi2_handle
00013a  e00d              B        |L15.344|
                  |L15.316|
00013c  f8ca6010          STR      r6,[r10,#0x10]        ;139  ; smp_spi2_handle
000140  f8ca3014          STR      r3,[r10,#0x14]        ;140  ; smp_spi2_handle
000144  e008              B        |L15.344|
                  |L15.326|
000146  f8ca4010          STR      r4,[r10,#0x10]        ;143  ; smp_spi2_handle
00014a  f8ca6014          STR      r6,[r10,#0x14]        ;144  ; smp_spi2_handle
00014e  e003              B        |L15.344|
                  |L15.336|
000150  f8ca4010          STR      r4,[r10,#0x10]        ;147  ; smp_spi2_handle
000154  f8ca3014          STR      r3,[r10,#0x14]        ;148  ; smp_spi2_handle
                  |L15.344|
000158  f8ca700c          STR      r7,[r10,#0xc]         ;153  ; smp_spi2_handle
00015c  b112              CBZ      r2,|L15.356|
00015e  f8cac020          STR      r12,[r10,#0x20]       ;155  ; smp_spi2_handle
000162  e001              B        |L15.360|
                  |L15.356|
000164  f8ca6020          STR      r6,[r10,#0x20]        ;157  ; smp_spi2_handle
                  |L15.360|
000168  f8ca6024          STR      r6,[r10,#0x24]        ;158  ; smp_spi2_handle
00016c  f8ca6028          STR      r6,[r10,#0x28]        ;159  ; smp_spi2_handle
000170  f8ca802c          STR      r8,[r10,#0x2c]        ;160  ; smp_spi2_handle
000174  f8ca3030          STR      r3,[r10,#0x30]        ;161  ; smp_spi2_handle
000178  f8ca9018          STR      r9,[r10,#0x18]        ;162  ; smp_spi2_handle
00017c  f8ca6034          STR      r6,[r10,#0x34]        ;163  ; smp_spi2_handle
000180  f44f7082          MOV      r0,#0x104             ;165
000184  f8ca0004          STR      r0,[r10,#4]           ;165  ; smp_spi2_handle
000188  4833              LDR      r0,|L15.600|
00018a  3064              ADDS     r0,r0,#0x64           ;167
00018c  f7fffffe          BL       HAL_SPI_Init
000190  b110              CBZ      r0,|L15.408|
000192  f04f30ff          MOV      r0,#0xffffffff        ;170
000196  e752              B        |L15.62|
                  |L15.408|
000198  4830              LDR      r0,|L15.604|
00019a  6085              STR      r5,[r0,#8]            ;172  ; spi2_evt_cb
00019c  e056              B        |L15.588|
                  |L15.414|
00019e  f8dea058          LDR      r10,[lr,#0x58]        ;175
0001a2  f44a4a00          ORR      r10,r10,#0x8000       ;175
0001a6  f8cea058          STR      r10,[lr,#0x58]        ;175
0001aa  f8dea058          LDR      r10,[lr,#0x58]        ;175
0001ae  f40a4a00          AND      r10,r10,#0x8000       ;175
0001b2  f8cda000          STR      r10,[sp,#0]           ;175
0001b6  f8dfa0a0          LDR      r10,|L15.600|
0001ba  f8dfe0a8          LDR      lr,|L15.612|
0001be  f10a0ac8          ADD      r10,r10,#0xc8         ;176
0001c2  f8cae000          STR      lr,[r10,#0]           ;176  ; smp_spi3_handle
0001c6  f8cab01c          STR      r11,[r10,#0x1c]       ;177  ; smp_spi3_handle
0001ca  f8ca6008          STR      r6,[r10,#8]           ;178  ; smp_spi3_handle
0001ce  7840              LDRB     r0,[r0,#1]            ;179
0001d0  b138              CBZ      r0,|L15.482|
0001d2  2801              CMP      r0,#1                 ;179
0001d4  d00a              BEQ      |L15.492|
0001d6  2802              CMP      r0,#2                 ;179
0001d8  d00d              BEQ      |L15.502|
0001da  2803              CMP      r0,#3                 ;179
0001dc  d010              BEQ      |L15.512|
0001de  4608              MOV      r0,r1                 ;197
0001e0  e72d              B        |L15.62|
                  |L15.482|
0001e2  f8ca6010          STR      r6,[r10,#0x10]        ;181  ; smp_spi3_handle
0001e6  f8ca6014          STR      r6,[r10,#0x14]        ;182  ; smp_spi3_handle
0001ea  e00d              B        |L15.520|
                  |L15.492|
0001ec  f8ca6010          STR      r6,[r10,#0x10]        ;185  ; smp_spi3_handle
0001f0  f8ca3014          STR      r3,[r10,#0x14]        ;186  ; smp_spi3_handle
0001f4  e008              B        |L15.520|
                  |L15.502|
0001f6  f8ca4010          STR      r4,[r10,#0x10]        ;189  ; smp_spi3_handle
0001fa  f8ca6014          STR      r6,[r10,#0x14]        ;190  ; smp_spi3_handle
0001fe  e003              B        |L15.520|
                  |L15.512|
000200  f8ca4010          STR      r4,[r10,#0x10]        ;193  ; smp_spi3_handle
000204  f8ca3014          STR      r3,[r10,#0x14]        ;194  ; smp_spi3_handle
                  |L15.520|
000208  f8ca700c          STR      r7,[r10,#0xc]         ;199  ; smp_spi3_handle
00020c  b112              CBZ      r2,|L15.532|
00020e  f8cac020          STR      r12,[r10,#0x20]       ;201  ; smp_spi3_handle
000212  e001              B        |L15.536|
                  |L15.532|
000214  f8ca6020          STR      r6,[r10,#0x20]        ;203  ; smp_spi3_handle
                  |L15.536|
000218  f8ca6024          STR      r6,[r10,#0x24]        ;204  ; smp_spi3_handle
00021c  f8ca6028          STR      r6,[r10,#0x28]        ;205  ; smp_spi3_handle
000220  f8ca802c          STR      r8,[r10,#0x2c]        ;206  ; smp_spi3_handle
000224  f8ca3030          STR      r3,[r10,#0x30]        ;207  ; smp_spi3_handle
000228  f8ca9018          STR      r9,[r10,#0x18]        ;208  ; smp_spi3_handle
00022c  f8ca6034          STR      r6,[r10,#0x34]        ;209  ; smp_spi3_handle
000230  f44f7082          MOV      r0,#0x104             ;211
000234  f8ca0004          STR      r0,[r10,#4]           ;211  ; smp_spi3_handle
000238  4807              LDR      r0,|L15.600|
00023a  30c8              ADDS     r0,r0,#0xc8           ;213
00023c  f7fffffe          BL       HAL_SPI_Init
000240  b110              CBZ      r0,|L15.584|
000242  f04f30ff          MOV      r0,#0xffffffff        ;216
000246  e6fa              B        |L15.62|
                  |L15.584|
000248  4804              LDR      r0,|L15.604|
00024a  60c5              STR      r5,[r0,#0xc]          ;218  ; spi3_evt_cb
                  |L15.588|
00024c  2000              MOVS     r0,#0                 ;224
00024e  e6f6              B        |L15.62|
;;;226    
                          ENDP

                  |L15.592|
                          DCD      0x40021000
                  |L15.596|
                          DCD      0x40013000
                  |L15.600|
                          DCD      ||.bss||
                  |L15.604|
                          DCD      ||.data||
                  |L15.608|
                          DCD      0x40003800
                  |L15.612|
                          DCD      0x40003c00

                          AREA ||i.smp_spi_master_send_recv||, CODE, READONLY, ALIGN=2

                  smp_spi_master_send_recv PROC
;;;314    uint16_t g_rx_size[3];
;;;315    int8_t smp_spi_master_send_recv(smp_spi_t *spi, uint8_t *tx_data,uint16_t tx_size, uint8_t *rx_data, uint16_t rx_size,smp_spi_cs_t *p_cs)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;316    {
000004  b099              SUB      sp,sp,#0x64
000006  4604              MOV      r4,r0
000008  e9dd7622          LDRD     r7,r6,[sp,#0x88]
00000c  468b              MOV      r11,r1
00000e  4690              MOV      r8,r2
000010  469a              MOV      r10,r3
;;;317    	HAL_StatusTypeDef status;
;;;318    	SPI_HandleTypeDef temp_spi_handle;
;;;319    	smp_spi_master_cs_set(p_cs,GPIO_ACTIVE_LOW);
000012  2100              MOVS     r1,#0
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       smp_spi_master_cs_set
;;;320    	if(uSPIFlag[spi->num] != SPI_Done){
00001a  7820              LDRB     r0,[r4,#0]
00001c  4d59              LDR      r5,|L16.388|
00001e  5c29              LDRB     r1,[r5,r0]
000020  2903              CMP      r1,#3
000022  d004              BEQ      |L16.46|
;;;321    		return SMP_ERROR_BUSY;
000024  f06f000c          MVN      r0,#0xc
                  |L16.40|
;;;322    	}
;;;323    	CS[spi->num] = *p_cs;
;;;324    	
;;;325    	if( spi->num == SPI_module1){
;;;326    		temp_spi_handle = smp_spi1_handle;
;;;327    	}else if( spi->num == SPI_module2){
;;;328    		temp_spi_handle = smp_spi2_handle;
;;;329    	}else if( spi->num == SPI_module3){
;;;330    		temp_spi_handle = smp_spi3_handle;
;;;331    	}else{
;;;332    		return SMP_ERROR_NOT_SUPPORTED;	
;;;333    	}
;;;334    	if(tx_size == 0){
;;;335    		uSPIFlag[spi->num] = SPI_Recived_only;
;;;336    	}else if(rx_size == 0){
;;;337    		uSPIFlag[spi->num] = SPI_Transfer_only;
;;;338    	}else{
;;;339    		uSPIFlag[spi->num] = SPI_Both;
;;;340    	}
;;;341    	if(rx_size != 0){
;;;342    		g_rx_data[spi->num] = (uint8_t *)rx_data;
;;;343    		g_rx_size[spi->num] = rx_size;
;;;344    		if(uSPIFlag[spi->num]==SPI_Recived_only){
;;;345    			status = HAL_SPI_Receive_DMA(&temp_spi_handle, (uint8_t *)rx_data, rx_size);
;;;346    		}	
;;;347    	}
;;;348    	if(tx_size != 0){	
;;;349    		status = HAL_SPI_Transmit_DMA(&temp_spi_handle, (uint8_t *)tx_data, tx_size);
;;;350    	}
;;;351    
;;;352    	if(status!=HAL_OK){
;;;353    		return SMP_ERROR_NOT_FOUND;
;;;354    	}
;;;355    	return SMP_SUCCESS;	
;;;356    }
000028  b019              ADD      sp,sp,#0x64
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.46|
00002e  4956              LDR      r1,|L16.392|
000030  eb000040          ADD      r0,r0,r0,LSL #1       ;323
000034  eb010080          ADD      r0,r1,r0,LSL #2       ;323
000038  ce0e              LDM      r6!,{r1-r3}           ;323
00003a  c00e              STM      r0!,{r1-r3}           ;323
00003c  7820              LDRB     r0,[r4,#0]            ;325
00003e  f10d0948          ADD      r9,sp,#0x48           ;326
000042  b130              CBZ      r0,|L16.82|
000044  2801              CMP      r0,#1                 ;327
000046  d023              BEQ      |L16.144|
000048  2802              CMP      r0,#2                 ;329
00004a  d044              BEQ      |L16.214|
00004c  f06f0001          MVN      r0,#1                 ;332
000050  e7ea              B        |L16.40|
                  |L16.82|
000052  223e              MOVS     r2,#0x3e              ;326
000054  494d              LDR      r1,|L16.396|
000056  4668              MOV      r0,sp                 ;326
000058  f7fffffe          BL       __aeabi_memcpy4
00005c  4e4b              LDR      r6,|L16.396|
00005e  3640              ADDS     r6,r6,#0x40           ;326
000060  f8360c02          LDRH     r0,[r6,#-2]           ;326  ; smp_spi1_handle
000064  f8ad003e          STRH     r0,[sp,#0x3e]         ;326
000068  6830              LDR      r0,[r6,#0]            ;326  ; smp_spi1_handle
00006a  9010              STR      r0,[sp,#0x40]         ;326
00006c  88b0              LDRH     r0,[r6,#4]            ;326  ; smp_spi1_handle
00006e  f8ad0044          STRH     r0,[sp,#0x44]         ;326
000072  88f0              LDRH     r0,[r6,#6]            ;326  ; smp_spi1_handle
000074  f8ad0046          STRH     r0,[sp,#0x46]         ;326
000078  2215              MOVS     r2,#0x15              ;326
00007a  f1060108          ADD      r1,r6,#8              ;326
00007e  4648              MOV      r0,r9                 ;326
000080  f7fffffe          BL       __aeabi_memcpy4
000084  7f70              LDRB     r0,[r6,#0x1d]         ;326  ; smp_spi1_handle
000086  f88d005d          STRB     r0,[sp,#0x5d]         ;326
00008a  6a30              LDR      r0,[r6,#0x20]         ;326  ; smp_spi1_handle
00008c  9018              STR      r0,[sp,#0x60]         ;326
00008e  e044              B        |L16.282|
                  |L16.144|
000090  493e              LDR      r1,|L16.396|
000092  223e              MOVS     r2,#0x3e              ;328
000094  3164              ADDS     r1,r1,#0x64           ;328
000096  4668              MOV      r0,sp                 ;328
000098  f7fffffe          BL       __aeabi_memcpy4
00009c  4e3b              LDR      r6,|L16.396|
00009e  3664              ADDS     r6,r6,#0x64           ;328
0000a0  8ff0              LDRH     r0,[r6,#0x3e]         ;328  ; smp_spi2_handle
0000a2  f8ad003e          STRH     r0,[sp,#0x3e]         ;328
0000a6  f106001c          ADD      r0,r6,#0x1c           ;328
0000aa  6a41              LDR      r1,[r0,#0x24]         ;328  ; smp_spi2_handle
0000ac  9110              STR      r1,[sp,#0x40]         ;328
0000ae  8d00              LDRH     r0,[r0,#0x28]         ;328  ; smp_spi2_handle
0000b0  f8ad0044          STRH     r0,[sp,#0x44]         ;328
0000b4  f8b60046          LDRH     r0,[r6,#0x46]         ;328  ; smp_spi2_handle
0000b8  f8ad0046          STRH     r0,[sp,#0x46]         ;328
0000bc  2215              MOVS     r2,#0x15              ;328
0000be  f1060148          ADD      r1,r6,#0x48           ;328
0000c2  4648              MOV      r0,r9                 ;328
0000c4  f7fffffe          BL       __aeabi_memcpy4
0000c8  f896005d          LDRB     r0,[r6,#0x5d]         ;328  ; smp_spi2_handle
0000cc  f88d005d          STRB     r0,[sp,#0x5d]         ;328
0000d0  6e30              LDR      r0,[r6,#0x60]         ;328  ; smp_spi2_handle
0000d2  9018              STR      r0,[sp,#0x60]         ;328
0000d4  e021              B        |L16.282|
                  |L16.214|
0000d6  492d              LDR      r1,|L16.396|
0000d8  223e              MOVS     r2,#0x3e              ;330
0000da  31c8              ADDS     r1,r1,#0xc8           ;330
0000dc  4668              MOV      r0,sp                 ;330
0000de  f7fffffe          BL       __aeabi_memcpy4
0000e2  4e2a              LDR      r6,|L16.396|
0000e4  36c8              ADDS     r6,r6,#0xc8           ;330
0000e6  8ff0              LDRH     r0,[r6,#0x3e]         ;330  ; smp_spi3_handle
0000e8  f8ad003e          STRH     r0,[sp,#0x3e]         ;330
0000ec  f1060038          ADD      r0,r6,#0x38           ;330
0000f0  6881              LDR      r1,[r0,#8]            ;330  ; smp_spi3_handle
0000f2  9110              STR      r1,[sp,#0x40]         ;330
0000f4  8980              LDRH     r0,[r0,#0xc]          ;330  ; smp_spi3_handle
0000f6  f8ad0044          STRH     r0,[sp,#0x44]         ;330
0000fa  f8b60046          LDRH     r0,[r6,#0x46]         ;330  ; smp_spi3_handle
0000fe  f8ad0046          STRH     r0,[sp,#0x46]         ;330
000102  2215              MOVS     r2,#0x15              ;330
000104  f1060148          ADD      r1,r6,#0x48           ;330
000108  4648              MOV      r0,r9                 ;330
00010a  f7fffffe          BL       __aeabi_memcpy4
00010e  f896005d          LDRB     r0,[r6,#0x5d]         ;330  ; smp_spi3_handle
000112  f88d005d          STRB     r0,[sp,#0x5d]         ;330
000116  6e30              LDR      r0,[r6,#0x60]         ;330  ; smp_spi3_handle
000118  9018              STR      r0,[sp,#0x60]         ;330
                  |L16.282|
00011a  f1b80f00          CMP      r8,#0                 ;334
00011e  d013              BEQ      |L16.328|
000120  b1b7              CBZ      r7,|L16.336|
000122  7820              LDRB     r0,[r4,#0]            ;339
000124  2100              MOVS     r1,#0                 ;339
000126  5429              STRB     r1,[r5,r0]            ;339
                  |L16.296|
000128  b1e7              CBZ      r7,|L16.356|
00012a  4917              LDR      r1,|L16.392|
00012c  7820              LDRB     r0,[r4,#0]            ;342
00012e  3124              ADDS     r1,r1,#0x24           ;342
000130  f841a020          STR      r10,[r1,r0,LSL #2]    ;342
000134  4913              LDR      r1,|L16.388|
000136  7820              LDRB     r0,[r4,#0]            ;343
000138  3110              ADDS     r1,r1,#0x10           ;343
00013a  f8217010          STRH     r7,[r1,r0,LSL #1]     ;343
00013e  7820              LDRB     r0,[r4,#0]            ;344
000140  5c28              LDRB     r0,[r5,r0]            ;344
000142  2802              CMP      r0,#2                 ;344
000144  d008              BEQ      |L16.344|
000146  e00d              B        |L16.356|
                  |L16.328|
000148  7820              LDRB     r0,[r4,#0]            ;335
00014a  2102              MOVS     r1,#2                 ;335
00014c  5429              STRB     r1,[r5,r0]            ;335
00014e  e7eb              B        |L16.296|
                  |L16.336|
000150  7820              LDRB     r0,[r4,#0]            ;337
000152  2101              MOVS     r1,#1                 ;337
000154  5429              STRB     r1,[r5,r0]            ;337
000156  e7e7              B        |L16.296|
                  |L16.344|
000158  463a              MOV      r2,r7                 ;345
00015a  4651              MOV      r1,r10                ;345
00015c  4668              MOV      r0,sp                 ;345
00015e  f7fffffe          BL       HAL_SPI_Receive_DMA
000162  4604              MOV      r4,r0                 ;345
                  |L16.356|
000164  f1b80f00          CMP      r8,#0                 ;348
000168  d005              BEQ      |L16.374|
00016a  4642              MOV      r2,r8                 ;349
00016c  4659              MOV      r1,r11                ;349
00016e  4668              MOV      r0,sp                 ;349
000170  f7fffffe          BL       HAL_SPI_Transmit_DMA
000174  4604              MOV      r4,r0                 ;349
                  |L16.374|
000176  b114              CBZ      r4,|L16.382|
000178  f04f30ff          MOV      r0,#0xffffffff        ;353
00017c  e754              B        |L16.40|
                  |L16.382|
00017e  2000              MOVS     r0,#0                 ;355
000180  e752              B        |L16.40|
;;;357    
                          ENDP

000182  0000              DCW      0x0000
                  |L16.388|
                          DCD      ||.data||
                  |L16.392|
                          DCD      ||.bss||+0x2dc
                  |L16.396|
                          DCD      ||.bss||

                          AREA ||i.smp_spi_master_send_recv_blocking||, CODE, READONLY, ALIGN=2

                  smp_spi_master_send_recv_blocking PROC
;;;357    
;;;358    int8_t smp_spi_master_send_recv_blocking(smp_spi_t *spi, uint8_t *tx_data,uint16_t tx_size, uint8_t *rx_data, uint16_t rx_size,smp_spi_cs_t *p_cs)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;359    {
000004  b099              SUB      sp,sp,#0x64
000006  4605              MOV      r5,r0
000008  e9dd8922          LDRD     r8,r9,[sp,#0x88]
00000c  460f              MOV      r7,r1
00000e  4692              MOV      r10,r2
000010  469b              MOV      r11,r3
;;;360    	HAL_StatusTypeDef status;
;;;361    	SPI_HandleTypeDef temp_spi_handle;
;;;362    	uint8_t temp_spi_cnt = 0;
000012  2400              MOVS     r4,#0
;;;363    	smp_spi_master_cs_set(p_cs,GPIO_ACTIVE_LOW);
000014  2100              MOVS     r1,#0
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       smp_spi_master_cs_set
;;;364    	while (uSPIFlag[spi->num] != SPI_Done) {
00001c  4e53              LDR      r6,|L17.364|
00001e  e00b              B        |L17.56|
                  |L17.32|
;;;365    		HAL_Delay(10);
000020  200a              MOVS     r0,#0xa
000022  f7fffffe          BL       HAL_Delay
;;;366    		temp_spi_cnt++;
000026  1c64              ADDS     r4,r4,#1
000028  b2e4              UXTB     r4,r4
;;;367    		if(temp_spi_cnt >= 10){
00002a  2c0a              CMP      r4,#0xa
00002c  d304              BCC      |L17.56|
;;;368    			return SMP_ERROR_BUSY;
00002e  f06f000c          MVN      r0,#0xc
                  |L17.50|
;;;369    		}
;;;370    	}
;;;371    	
;;;372    	CS[spi->num] = *p_cs;
;;;373    	
;;;374    	if( spi->num == SPI_module1){
;;;375    		temp_spi_handle = smp_spi1_handle;
;;;376    	}else if( spi->num == SPI_module2){
;;;377    		temp_spi_handle = smp_spi2_handle;
;;;378    	}else if( spi->num == SPI_module3){
;;;379    		temp_spi_handle = smp_spi3_handle;
;;;380    	}else{
;;;381    		return SMP_ERROR_NOT_SUPPORTED;	
;;;382    	}
;;;383    	
;;;384    	if(tx_size != 0){	
;;;385    		status = HAL_SPI_Transmit(&temp_spi_handle, (uint8_t *)tx_data, tx_size,100);
;;;386    	}
;;;387    	if(rx_size != 0){
;;;388    		status = HAL_SPI_Receive(&temp_spi_handle, (uint8_t *)rx_data, rx_size,100);
;;;389    	}
;;;390    	smp_spi_master_cs_set(p_cs,GPIO_ACTIVE_HIGH);
;;;391    	if(status!=HAL_OK){
;;;392    		return SMP_ERROR_NOT_FOUND;
;;;393    	}else{
;;;394    		return SMP_SUCCESS;	
;;;395    	}
;;;396    }
000032  b019              ADD      sp,sp,#0x64
000034  e8bd8ff0          POP      {r4-r11,pc}
                  |L17.56|
000038  7828              LDRB     r0,[r5,#0]            ;364
00003a  5c30              LDRB     r0,[r6,r0]            ;364
00003c  2803              CMP      r0,#3                 ;364
00003e  d1ef              BNE      |L17.32|
000040  7828              LDRB     r0,[r5,#0]            ;372
000042  494b              LDR      r1,|L17.368|
000044  eb000040          ADD      r0,r0,r0,LSL #1       ;372
000048  eb010080          ADD      r0,r1,r0,LSL #2       ;372
00004c  e899000e          LDM      r9,{r1-r3}            ;372
000050  c00e              STM      r0!,{r1-r3}           ;372
000052  7828              LDRB     r0,[r5,#0]            ;374
000054  ad12              ADD      r5,sp,#0x48           ;375
000056  b130              CBZ      r0,|L17.102|
000058  2801              CMP      r0,#1                 ;376
00005a  d023              BEQ      |L17.164|
00005c  2802              CMP      r0,#2                 ;378
00005e  d044              BEQ      |L17.234|
000060  f06f0001          MVN      r0,#1                 ;381
000064  e7e5              B        |L17.50|
                  |L17.102|
000066  223e              MOVS     r2,#0x3e              ;375
000068  4942              LDR      r1,|L17.372|
00006a  4668              MOV      r0,sp                 ;375
00006c  f7fffffe          BL       __aeabi_memcpy4
000070  4c40              LDR      r4,|L17.372|
000072  3440              ADDS     r4,r4,#0x40           ;375
000074  f8340c02          LDRH     r0,[r4,#-2]           ;375  ; smp_spi1_handle
000078  f8ad003e          STRH     r0,[sp,#0x3e]         ;375
00007c  6820              LDR      r0,[r4,#0]            ;375  ; smp_spi1_handle
00007e  9010              STR      r0,[sp,#0x40]         ;375
000080  88a0              LDRH     r0,[r4,#4]            ;375  ; smp_spi1_handle
000082  f8ad0044          STRH     r0,[sp,#0x44]         ;375
000086  88e0              LDRH     r0,[r4,#6]            ;375  ; smp_spi1_handle
000088  f8ad0046          STRH     r0,[sp,#0x46]         ;375
00008c  2215              MOVS     r2,#0x15              ;375
00008e  f1040108          ADD      r1,r4,#8              ;375
000092  4628              MOV      r0,r5                 ;375
000094  f7fffffe          BL       __aeabi_memcpy4
000098  7f60              LDRB     r0,[r4,#0x1d]         ;375  ; smp_spi1_handle
00009a  f88d005d          STRB     r0,[sp,#0x5d]         ;375
00009e  6a20              LDR      r0,[r4,#0x20]         ;375  ; smp_spi1_handle
0000a0  9018              STR      r0,[sp,#0x60]         ;375
0000a2  e044              B        |L17.302|
                  |L17.164|
0000a4  4933              LDR      r1,|L17.372|
0000a6  223e              MOVS     r2,#0x3e              ;377
0000a8  3164              ADDS     r1,r1,#0x64           ;377
0000aa  4668              MOV      r0,sp                 ;377
0000ac  f7fffffe          BL       __aeabi_memcpy4
0000b0  4c30              LDR      r4,|L17.372|
0000b2  3464              ADDS     r4,r4,#0x64           ;377
0000b4  8fe0              LDRH     r0,[r4,#0x3e]         ;377  ; smp_spi2_handle
0000b6  f8ad003e          STRH     r0,[sp,#0x3e]         ;377
0000ba  f104001c          ADD      r0,r4,#0x1c           ;377
0000be  6a41              LDR      r1,[r0,#0x24]         ;377  ; smp_spi2_handle
0000c0  9110              STR      r1,[sp,#0x40]         ;377
0000c2  8d00              LDRH     r0,[r0,#0x28]         ;377  ; smp_spi2_handle
0000c4  f8ad0044          STRH     r0,[sp,#0x44]         ;377
0000c8  f8b40046          LDRH     r0,[r4,#0x46]         ;377  ; smp_spi2_handle
0000cc  f8ad0046          STRH     r0,[sp,#0x46]         ;377
0000d0  2215              MOVS     r2,#0x15              ;377
0000d2  f1040148          ADD      r1,r4,#0x48           ;377
0000d6  4628              MOV      r0,r5                 ;377
0000d8  f7fffffe          BL       __aeabi_memcpy4
0000dc  f894005d          LDRB     r0,[r4,#0x5d]         ;377  ; smp_spi2_handle
0000e0  f88d005d          STRB     r0,[sp,#0x5d]         ;377
0000e4  6e20              LDR      r0,[r4,#0x60]         ;377  ; smp_spi2_handle
0000e6  9018              STR      r0,[sp,#0x60]         ;377
0000e8  e021              B        |L17.302|
                  |L17.234|
0000ea  4922              LDR      r1,|L17.372|
0000ec  223e              MOVS     r2,#0x3e              ;379
0000ee  31c8              ADDS     r1,r1,#0xc8           ;379
0000f0  4668              MOV      r0,sp                 ;379
0000f2  f7fffffe          BL       __aeabi_memcpy4
0000f6  4c1f              LDR      r4,|L17.372|
0000f8  34c8              ADDS     r4,r4,#0xc8           ;379
0000fa  8fe0              LDRH     r0,[r4,#0x3e]         ;379  ; smp_spi3_handle
0000fc  f8ad003e          STRH     r0,[sp,#0x3e]         ;379
000100  f1040038          ADD      r0,r4,#0x38           ;379
000104  6881              LDR      r1,[r0,#8]            ;379  ; smp_spi3_handle
000106  9110              STR      r1,[sp,#0x40]         ;379
000108  8980              LDRH     r0,[r0,#0xc]          ;379  ; smp_spi3_handle
00010a  f8ad0044          STRH     r0,[sp,#0x44]         ;379
00010e  f8b40046          LDRH     r0,[r4,#0x46]         ;379  ; smp_spi3_handle
000112  f8ad0046          STRH     r0,[sp,#0x46]         ;379
000116  2215              MOVS     r2,#0x15              ;379
000118  f1040148          ADD      r1,r4,#0x48           ;379
00011c  4628              MOV      r0,r5                 ;379
00011e  f7fffffe          BL       __aeabi_memcpy4
000122  f894005d          LDRB     r0,[r4,#0x5d]         ;379  ; smp_spi3_handle
000126  f88d005d          STRB     r0,[sp,#0x5d]         ;379
00012a  6e20              LDR      r0,[r4,#0x60]         ;379  ; smp_spi3_handle
00012c  9018              STR      r0,[sp,#0x60]         ;379
                  |L17.302|
00012e  f1ba0f00          CMP      r10,#0                ;384
000132  d006              BEQ      |L17.322|
000134  2364              MOVS     r3,#0x64              ;385
000136  4652              MOV      r2,r10                ;385
000138  4639              MOV      r1,r7                 ;385
00013a  4668              MOV      r0,sp                 ;385
00013c  f7fffffe          BL       HAL_SPI_Transmit
000140  4607              MOV      r7,r0                 ;385
                  |L17.322|
000142  f1b80f00          CMP      r8,#0                 ;387
000146  d006              BEQ      |L17.342|
000148  2364              MOVS     r3,#0x64              ;388
00014a  4642              MOV      r2,r8                 ;388
00014c  4659              MOV      r1,r11                ;388
00014e  4668              MOV      r0,sp                 ;388
000150  f7fffffe          BL       HAL_SPI_Receive
000154  4607              MOV      r7,r0                 ;388
                  |L17.342|
000156  2101              MOVS     r1,#1                 ;390
000158  4648              MOV      r0,r9                 ;390
00015a  f7fffffe          BL       smp_spi_master_cs_set
00015e  b117              CBZ      r7,|L17.358|
000160  f04f30ff          MOV      r0,#0xffffffff        ;392
000164  e765              B        |L17.50|
                  |L17.358|
000166  2000              MOVS     r0,#0                 ;394
000168  e763              B        |L17.50|
;;;397    /**
                          ENDP

00016a  0000              DCW      0x0000
                  |L17.364|
                          DCD      ||.data||
                  |L17.368|
                          DCD      ||.bss||+0x2dc
                  |L17.372|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  smp_spi1_handle
                          %        100
                  smp_spi2_handle
                          %        100
                  smp_spi3_handle
                          %        100
                  hdma_spi1_tx
                          %        72
                  hdma_spi1_rx
                          %        72
                  hdma_spi2_tx
                          %        72
                  hdma_spi2_rx
                          %        72
                  hdma_spi3_tx
                          %        72
                  hdma_spi3_rx
                          %        72
                  ||CS||
                          %        36
                  g_rx_data
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  uSPIFlag
000000  03030300          DCB      0x03,0x03,0x03,0x00
                  spi1_evt_cb
                          DCD      0x00000000
                  spi2_evt_cb
                          DCD      0x00000000
                  spi3_evt_cb
                          DCD      0x00000000
                  g_rx_size
                          DCD      0x00000000
000014  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Drivers\\SMP\\smp_spi_DMA.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_smp_spi_DMA_c_uSPIFlag____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___13_smp_spi_DMA_c_uSPIFlag____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_smp_spi_DMA_c_uSPIFlag____REVSH|
#line 507
|__asm___13_smp_spi_DMA_c_uSPIFlag____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_smp_spi_DMA_c_uSPIFlag____RRX|
#line 694
|__asm___13_smp_spi_DMA_c_uSPIFlag____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
