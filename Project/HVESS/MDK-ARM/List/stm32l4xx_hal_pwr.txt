; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\obj\stm32l4xx_hal_pwr.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\obj\stm32l4xx_hal_pwr.d --cpu=Cortex-M4.fp.sp --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../../../Drivers/CMSIS/Include -I../../../Drivers/CMSIS/Device/ST/STM32L4xx/Include -I../../../Drivers/STM32L4xx_HAL_Driver/Inc -I../../../Drivers/BSP/STM32L4xx_Nucleo_144 -I..\..\..\User -I..\..\..\HAL -I..\..\..\Lib -I..\..\..\Config_Common -I..\..\..\AppProtect -I..\..\..\APP -I..\..\..\Lib\SMP -I..\..\..\Drivers\SMP -I..\..\..\BSP -I..\..\..\Drivers\BSP\STM32L496V_Davinci -I..\..\..\API -I..\..\..\AppCommunication -I..\..\..\Drivers\W5500 -I..\..\..\RTT -I.\RTE\_HVESS_Normal -IC:\Users\88691\AppData\Local\Arm\Packs\ARM\CMSIS\5.8.0\CMSIS\Core\Include -IC:\Users\88691\AppData\Local\Arm\Packs\Keil\STM32L4xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32L4xx\Include -D__MICROLIB -D__UVISION_VERSION=535 -D_RTE_ -DSTM32L496xx -D_RTE_ -DSTM32L496xx -DUSE_HAL_DRIVER -DUSE_STM32L4XX_NUCLEO_144 -DBSPSMPS -DUSE_STM32L4XX_NUCLEO_144_SMPS -DUSE_ADP5301ACBZ -W ../../../Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c]
                          THUMB

                          AREA ||i.HAL_PWR_ConfigPVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_ConfigPVD PROC
;;;311      */
;;;312    HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
000000  b530              PUSH     {r4,r5,lr}
;;;313    {
;;;314      /* Check the parameters */
;;;315      assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
;;;316      assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
;;;317    
;;;318      /* Set PLS bits according to PVDLevel value */
;;;319      MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
000002  491d              LDR      r1,|L1.120|
000004  684a              LDR      r2,[r1,#4]
000006  6803              LDR      r3,[r0,#0]
000008  f022020e          BIC      r2,r2,#0xe
00000c  431a              ORRS     r2,r2,r3
00000e  604a              STR      r2,[r1,#4]
;;;320    
;;;321      /* Clear any previous config. Keep it clear if no event or IT mode is selected */
;;;322      __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
000010  4c1a              LDR      r4,|L1.124|
000012  6821              LDR      r1,[r4,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  6021              STR      r1,[r4,#0]
;;;323      __HAL_PWR_PVD_EXTI_DISABLE_IT();
00001a  1f21              SUBS     r1,r4,#4
00001c  680a              LDR      r2,[r1,#0]
00001e  f4223280          BIC      r2,r2,#0x10000
000022  600a              STR      r2,[r1,#0]
;;;324      __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
000024  4b15              LDR      r3,|L1.124|
000026  3308              ADDS     r3,r3,#8
000028  681a              LDR      r2,[r3,#0]
00002a  f4223280          BIC      r2,r2,#0x10000
00002e  601a              STR      r2,[r3,#0]
;;;325      __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
000030  1f1a              SUBS     r2,r3,#4
000032  6815              LDR      r5,[r2,#0]
000034  f4253580          BIC      r5,r5,#0x10000
000038  6015              STR      r5,[r2,#0]
;;;326    
;;;327      /* Configure interrupt mode */
;;;328      if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
00003a  6845              LDR      r5,[r0,#4]
00003c  03ed              LSLS     r5,r5,#15
00003e  d503              BPL      |L1.72|
;;;329      {
;;;330        __HAL_PWR_PVD_EXTI_ENABLE_IT();
000040  680d              LDR      r5,[r1,#0]
000042  f4453580          ORR      r5,r5,#0x10000
000046  600d              STR      r5,[r1,#0]
                  |L1.72|
;;;331      }
;;;332    
;;;333      /* Configure event mode */
;;;334      if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
000048  6841              LDR      r1,[r0,#4]
00004a  0389              LSLS     r1,r1,#14
00004c  d503              BPL      |L1.86|
;;;335      {
;;;336        __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
00004e  6821              LDR      r1,[r4,#0]
000050  f4413180          ORR      r1,r1,#0x10000
000054  6021              STR      r1,[r4,#0]
                  |L1.86|
;;;337      }
;;;338    
;;;339      /* Configure the edge */
;;;340      if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
000056  7901              LDRB     r1,[r0,#4]
000058  07c9              LSLS     r1,r1,#31
00005a  d003              BEQ      |L1.100|
;;;341      {
;;;342        __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
00005c  6811              LDR      r1,[r2,#0]
00005e  f4413180          ORR      r1,r1,#0x10000
000062  6011              STR      r1,[r2,#0]
                  |L1.100|
;;;343      }
;;;344    
;;;345      if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
000064  7900              LDRB     r0,[r0,#4]
000066  0780              LSLS     r0,r0,#30
000068  d503              BPL      |L1.114|
;;;346      {
;;;347        __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
00006a  6818              LDR      r0,[r3,#0]
00006c  f4403080          ORR      r0,r0,#0x10000
000070  6018              STR      r0,[r3,#0]
                  |L1.114|
;;;348      }
;;;349    
;;;350      return HAL_OK;
000072  2000              MOVS     r0,#0
;;;351    }
000074  bd30              POP      {r4,r5,pc}
;;;352    
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      0x40007000
                  |L1.124|
                          DCD      0x40010404

                          AREA ||i.HAL_PWR_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DeInit PROC
;;;86       */
;;;87     void HAL_PWR_DeInit(void)
000000  4804              LDR      r0,|L2.20|
;;;88     {
;;;89       __HAL_RCC_PWR_FORCE_RESET();
000002  6b81              LDR      r1,[r0,#0x38]
000004  f0415180          ORR      r1,r1,#0x10000000
000008  6381              STR      r1,[r0,#0x38]
;;;90       __HAL_RCC_PWR_RELEASE_RESET();
00000a  6b81              LDR      r1,[r0,#0x38]
00000c  f0215180          BIC      r1,r1,#0x10000000
000010  6381              STR      r1,[r0,#0x38]
;;;91     }
000012  4770              BX       lr
;;;92     
                          ENDP

                  |L2.20|
                          DCD      0x40021000

                          AREA ||i.HAL_PWR_DisableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableBkUpAccess PROC
;;;114      */
;;;115    void HAL_PWR_DisableBkUpAccess(void)
000000  4802              LDR      r0,|L3.12|
;;;116    {
;;;117      CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6801              LDR      r1,[r0,#0]
000004  f4217180          BIC      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;118    }
00000a  4770              BX       lr
;;;119    
                          ENDP

                  |L3.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisablePVD PROC
;;;366      */
;;;367    void HAL_PWR_DisablePVD(void)
000000  4802              LDR      r0,|L4.12|
;;;368    {
;;;369      CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
000002  6841              LDR      r1,[r0,#4]
000004  f0210101          BIC      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;370    }
00000a  4770              BX       lr
;;;371    
                          ENDP

                  |L4.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_DisableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSEVOnPend PROC
;;;622      */
;;;623    void HAL_PWR_DisableSEVOnPend(void)
000000  4802              LDR      r0,|L5.12|
;;;624    {
;;;625      /* Clear SEVONPEND bit of Cortex System Control Register */
;;;626      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;627    }
00000a  4770              BX       lr
;;;628    
                          ENDP

                  |L5.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableSleepOnExit PROC
;;;595      */
;;;596    void HAL_PWR_DisableSleepOnExit(void)
000000  4802              LDR      r0,|L6.12|
;;;597    {
;;;598      /* Clear SLEEPONEXIT bit of Cortex System Control Register */
;;;599      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0210102          BIC      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;600    }
00000a  4770              BX       lr
;;;601    
                          ENDP

                  |L6.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_DisableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_DisableWakeUpPin PROC
;;;412      */
;;;413    void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
000000  4903              LDR      r1,|L7.16|
;;;414    {
;;;415      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
;;;416    
;;;417      CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
000002  688a              LDR      r2,[r1,#8]
000004  f000001f          AND      r0,r0,#0x1f
000008  4382              BICS     r2,r2,r0
00000a  608a              STR      r2,[r1,#8]
;;;418    }
00000c  4770              BX       lr
;;;419    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableBkUpAccess||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableBkUpAccess PROC
;;;104      */
;;;105    void HAL_PWR_EnableBkUpAccess(void)
000000  4802              LDR      r0,|L8.12|
;;;106    {
;;;107      SET_BIT(PWR->CR1, PWR_CR1_DBP);
000002  6801              LDR      r1,[r0,#0]
000004  f4417180          ORR      r1,r1,#0x100
000008  6001              STR      r1,[r0,#0]
;;;108    }
00000a  4770              BX       lr
;;;109    
                          ENDP

                  |L8.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnablePVD||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnablePVD PROC
;;;357      */
;;;358    void HAL_PWR_EnablePVD(void)
000000  4802              LDR      r0,|L9.12|
;;;359    {
;;;360      SET_BIT(PWR->CR2, PWR_CR2_PVDE);
000002  6841              LDR      r1,[r0,#4]
000004  f0410101          ORR      r1,r1,#1
000008  6041              STR      r1,[r0,#4]
;;;361    }
00000a  4770              BX       lr
;;;362    
                          ENDP

                  |L9.12|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnableSEVOnPend||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSEVOnPend PROC
;;;609      */
;;;610    void HAL_PWR_EnableSEVOnPend(void)
000000  4802              LDR      r0,|L10.12|
;;;611    {
;;;612      /* Set SEVONPEND bit of Cortex System Control Register */
;;;613      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;614    }
00000a  4770              BX       lr
;;;615    
                          ENDP

                  |L10.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableSleepOnExit||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableSleepOnExit PROC
;;;582      */
;;;583    void HAL_PWR_EnableSleepOnExit(void)
000000  4802              LDR      r0,|L11.12|
;;;584    {
;;;585      /* Set SLEEPONEXIT bit of Cortex System Control Register */
;;;586      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
000002  6801              LDR      r1,[r0,#0]
000004  f0410102          ORR      r1,r1,#2
000008  6001              STR      r1,[r0,#0]
;;;587    }
00000a  4770              BX       lr
;;;588    
                          ENDP

                  |L11.12|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnableWakeUpPin||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnableWakeUpPin PROC
;;;391      */
;;;392    void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
000000  4a05              LDR      r2,|L12.24|
;;;393    {
;;;394      assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
;;;395    
;;;396      /* Specifies the Wake-Up pin polarity for the event detection
;;;397        (rising or falling edge) */
;;;398      MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
000002  68d3              LDR      r3,[r2,#0xc]
000004  f000011f          AND      r1,r0,#0x1f
000008  438b              BICS     r3,r3,r1
00000a  ea431050          ORR      r0,r3,r0,LSR #5
00000e  60d0              STR      r0,[r2,#0xc]
;;;399    
;;;400      /* Enable wake-up pin */
;;;401      SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
000010  6890              LDR      r0,[r2,#8]
000012  4308              ORRS     r0,r0,r1
000014  6090              STR      r0,[r2,#8]
;;;402    
;;;403    
;;;404    }
000016  4770              BX       lr
;;;405    
                          ENDP

                  |L12.24|
                          DCD      0x40007000

                          AREA ||i.HAL_PWR_EnterSLEEPMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSLEEPMode PROC
;;;444      */
;;;445    void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
000000  b510              PUSH     {r4,lr}
;;;446    {
000002  460c              MOV      r4,r1
;;;447      /* Check the parameters */
;;;448      assert_param(IS_PWR_REGULATOR(Regulator));
;;;449      assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
;;;450    
;;;451      /* Set Regulator parameter */
;;;452      if (Regulator == PWR_MAINREGULATOR_ON)
;;;453      {
;;;454        /* If in low-power run mode at this point, exit it */
;;;455        if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
000004  4a0e              LDR      r2,|L13.64|
000006  2800              CMP      r0,#0                 ;452
000008  d010              BEQ      |L13.44|
;;;456        {
;;;457          if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
;;;458          {
;;;459            return ;
;;;460          }
;;;461        }
;;;462        /* Regulator now in main mode. */
;;;463      }
;;;464      else
;;;465      {
;;;466        /* If in run mode, first move to low-power run mode.
;;;467           The system clock frequency must be below 2 MHz at this point. */
;;;468        if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
00000a  6950              LDR      r0,[r2,#0x14]
00000c  43c0              MVNS     r0,r0
00000e  0580              LSLS     r0,r0,#22
000010  d501              BPL      |L13.22|
;;;469        {
;;;470          HAL_PWREx_EnableLowPowerRunMode();
000012  f7fffffe          BL       HAL_PWREx_EnableLowPowerRunMode
                  |L13.22|
;;;471        }
;;;472      }
;;;473    
;;;474      /* Clear SLEEPDEEP bit of Cortex System Control Register */
;;;475      CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
000016  480b              LDR      r0,|L13.68|
000018  6801              LDR      r1,[r0,#0]
00001a  f0210204          BIC      r2,r1,#4
00001e  6002              STR      r2,[r0,#0]
;;;476    
;;;477      /* Select SLEEP mode entry -------------------------------------------------*/
;;;478      if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
000020  2c01              CMP      r4,#1
000022  d00b              BEQ      |L13.60|
;;;479      {
;;;480        /* Request Wait For Interrupt */
;;;481        __WFI();
;;;482      }
;;;483      else
;;;484      {
;;;485        /* Request Wait For Event */
;;;486        __SEV();
000024  bf40              SEV      
;;;487        __WFE();
000026  bf20              WFE      
;;;488        __WFE();
000028  bf20              WFE      
                  |L13.42|
;;;489      }
;;;490    
;;;491    }
00002a  bd10              POP      {r4,pc}
                  |L13.44|
00002c  6950              LDR      r0,[r2,#0x14]         ;455
00002e  0580              LSLS     r0,r0,#22             ;455
000030  d5f1              BPL      |L13.22|
000032  f7fffffe          BL       HAL_PWREx_DisableLowPowerRunMode
000036  2800              CMP      r0,#0                 ;457
000038  d1f7              BNE      |L13.42|
00003a  e7ec              B        |L13.22|
                  |L13.60|
00003c  bf30              WFI                            ;481
00003e  bd10              POP      {r4,pc}
;;;492    
                          ENDP

                  |L13.64|
                          DCD      0x40007000
                  |L13.68|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  HAL_PWR_EnterSTANDBYMode PROC
;;;556      */
;;;557    void HAL_PWR_EnterSTANDBYMode(void)
000000  4806              LDR      r0,|L14.28|
;;;558    {
;;;559      /* Set Stand-by mode */
;;;560      MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
000002  6801              LDR      r1,[r0,#0]
000004  f0210107          BIC      r1,r1,#7
000008  1cc9              ADDS     r1,r1,#3
00000a  6001              STR      r1,[r0,#0]
;;;561    
;;;562      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;563      SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
00000c  4804              LDR      r0,|L14.32|
00000e  6801              LDR      r1,[r0,#0]
000010  f0410104          ORR      r1,r1,#4
000014  6001              STR      r1,[r0,#0]
;;;564    
;;;565    /* This option is used to ensure that store operations are completed */
;;;566    #if defined ( __CC_ARM)
;;;567      __force_stores();
;;;568    #endif
;;;569      /* Request Wait For Interrupt */
;;;570      __WFI();
000016  bf30              WFI      
;;;571    }
000018  4770              BX       lr
;;;572    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40007000
                  |L14.32|
                          DCD      0xe000ed10

                          AREA ||i.HAL_PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=1

                  HAL_PWR_EnterSTOPMode PROC
;;;523      */
;;;524    void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
000000  4602              MOV      r2,r0
;;;525    {
000002  4608              MOV      r0,r1
;;;526      /* Check the parameters */
;;;527      assert_param(IS_PWR_REGULATOR(Regulator));
;;;528    
;;;529      if(Regulator == PWR_LOWPOWERREGULATOR_ON)
000004  f5b24f80          CMP      r2,#0x4000
000008  d001              BEQ      |L15.14|
;;;530      {
;;;531        HAL_PWREx_EnterSTOP1Mode(STOPEntry);
;;;532      }
;;;533      else
;;;534      {
;;;535        HAL_PWREx_EnterSTOP0Mode(STOPEntry);
00000a  f7ffbffe          B.W      HAL_PWREx_EnterSTOP0Mode
                  |L15.14|
00000e  f7ffbffe          B.W      HAL_PWREx_EnterSTOP1Mode
;;;536      }
;;;537    }
;;;538    
                          ENDP


                          AREA ||i.HAL_PWR_PVDCallback||, CODE, READONLY, ALIGN=1

                  HAL_PWR_PVDCallback PROC
;;;636      */
;;;637    __weak void HAL_PWR_PVDCallback(void)
000000  4770              BX       lr
;;;638    {
;;;639      /* NOTE : This function should not be modified; when the callback is needed,
;;;640                the HAL_PWR_PVDCallback can be implemented in the user file
;;;641       */
;;;642    }
;;;643    
                          ENDP


;*** Start embedded assembler ***

#line 1 "../../../Drivers/STM32L4xx_HAL_Driver/Src/stm32l4xx_hal_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REV16|
#line 492 "../../../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REV16| PROC
#line 493

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REVSH|
#line 507
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____REVSH| PROC
#line 508

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____RRX|
#line 694
|__asm___19_stm32l4xx_hal_pwr_c_f2cfe8be____RRX| PROC
#line 695

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
